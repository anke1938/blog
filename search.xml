<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020-12-21</title>
    <url>/2020/12/21/2020-12-21/</url>
    <content><![CDATA[<h4 id="今天应该是有意义的一天吧"><a href="#今天应该是有意义的一天吧" class="headerlink" title="今天应该是有意义的一天吧"></a>今天应该是有意义的一天吧</h4><blockquote>
<p>今天,冬至</p>
<p>八点十五下班,赶着时间去永辉超市,买了速冻水饺,凑单了个洗面奶,用了永辉30-15的券</p>
</blockquote>
<h4 id="晚上九点开会"><a href="#晚上九点开会" class="headerlink" title="晚上九点开会"></a>晚上九点开会</h4><blockquote>
<p>毫无意义</p>
</blockquote>
<h4 id="十点"><a href="#十点" class="headerlink" title="十点"></a>十点</h4><blockquote>
<p>感觉疲惫不堪</p>
</blockquote>
<h4 id="十一点半-看了个笑话"><a href="#十一点半-看了个笑话" class="headerlink" title="十一点半,看了个笑话"></a>十一点半,看了个笑话</h4><blockquote>
<p>新冠密接北京案例：<br>上班，开会，吃包子，加班，公交车<br>新冠密接成都案例：<br>打牌，蹦迪，美甲，火锅，茶馆</p>
</blockquote>
<h4 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h4><blockquote>
<p>应该要回去了,不应该在北京呆着了</p>
</blockquote>
<h4 id="累了"><a href="#累了" class="headerlink" title="累了"></a>累了</h4>]]></content>
  </entry>
  <entry>
    <title>2021.4.1</title>
    <url>/2021/04/01/2021.4.1/</url>
    <content><![CDATA[<p><a href="http://music.163.com/song/media/outer/url?id=1442508316">http://music.163.com/song/media/outer/url?id=1442508316</a></p>
<p>纵有千种情愁,又与何人说.</p>
]]></content>
  </entry>
  <entry>
    <title>Docker上run起我们的Redis</title>
    <url>/2018/06/12/Docker%E4%B8%8Arun%E8%B5%B7%E6%88%91%E4%BB%AC%E7%9A%84Redis/</url>
    <content><![CDATA[<p><img src="/uploads/docker.jpg" alt="avatar">  <img src="/uploads/redis.jpg" alt="avatar"></p>
<h4 id="直接pull-官方镜像吧。没啥说的，这样方便省事。"><a href="#直接pull-官方镜像吧。没啥说的，这样方便省事。" class="headerlink" title="直接pull 官方镜像吧。没啥说的，这样方便省事。"></a>直接pull 官方镜像吧。没啥说的，这样方便省事。</h4><h4 id="创建一个-redis-x2F-data-目录"><a href="#创建一个-redis-x2F-data-目录" class="headerlink" title="创建一个 redis&#x2F;data 目录"></a>创建一个 redis&#x2F;data 目录</h4><span id="more"></span>

<ul>
<li>我从本地拷贝了一份redis.conf,因为需要设置密码,密码配置在conf中</li>
</ul>
<h4 id="启动容器，做映射"><a href="#启动容器，做映射" class="headerlink" title="启动容器，做映射"></a>启动容器，做映射</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name myredis -v $PWD/redis.conf:/etc/redis/redis.conf -v $PWD/data:/data -d redis:latest redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>

<ul>
<li>-v $PWD&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf ： 将主机中当前目录下的redis.conf配置文件映射</li>
<li>-v $PWD&#x2F;data:&#x2F;data -d redis:latest ： 将主机中当前目录下的data挂载到容器的&#x2F;data</li>
<li>–redis-server –appendonly yes :在容器执行redis-server启动命令，并打开redis持久化配置</li>
</ul>
<h4 id="redis容器已经正常启动"><a href="#redis容器已经正常启动" class="headerlink" title="redis容器已经正常启动"></a>redis容器已经正常启动</h4><h4 id="通过客户端软件可以连接查看-redis-cli-或者"><a href="#通过客户端软件可以连接查看-redis-cli-或者" class="headerlink" title="通过客户端软件可以连接查看(redis-cli),或者"></a>通过客户端软件可以连接查看(redis-cli),或者</h4><ul>
<li>docker inspect myredis | grep IP —先查询到myredis容器的ip地址。</li>
<li>docker run -it redis:3.2 redis-cli -h 172.1.1.0 —连接到redis容器。然后就进入redis命令行了</li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Redis</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>8系统部署ver1.0</title>
    <url>/2020/11/26/8%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2ver1-0/</url>
    <content><![CDATA[<h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install htop -y</span><br></pre></td></tr></table></figure>

<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://dev8.cn:8000/static/ops/jdk.sh | bash</span><br></pre></td></tr></table></figure>

<h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils  device-mapper-persistent-data  lvm2</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager  --add-repo   https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h4 id="mySql-root-x2F-1QAZ2wsx"><a href="#mySql-root-x2F-1QAZ2wsx" class="headerlink" title="mySql:  root &#x2F; 1QAZ2wsx"></a>mySql:  root &#x2F; 1QAZ2wsx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 3306:3306 --name nksql --net mynet -e MYSQL_ROOT_PASSWORD=1QAZ2wsx -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h4 id="network"><a href="#network" class="headerlink" title="network:"></a>network:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create --subnet=172.72.0.0/16 mynet</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="portainer-io"><a href="#portainer-io" class="headerlink" title="portainer.io"></a>portainer.io</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://101.201.249.217:9000/</span><br></pre></td></tr></table></figure>

<h4 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h4><p>访问入口:<a href="http://101.201.249.217:10080/">http://101.201.249.217:10080/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /opt/gitea:/data --net mynet --ip 172.72.0.98 gitea/gitea:1.12.6</span><br><span class="line"></span><br><span class="line">数据库使用:  gitea</span><br></pre></td></tr></table></figure>

<h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><p>访问入口:  <a href="http://101.201.249.217:9080/">http://101.201.249.217:9080/</a></p>
<p>管理员用户及密码: admin &#x2F; ad23681eace74ec4985f748f8909aa63</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  -d \</span><br><span class="line">  -p 9080:8080 \</span><br><span class="line">  -p 50000:50000 \</span><br><span class="line">  --name jenkins  -v jenkins-data:/var/jenkins_home \</span><br><span class="line">  jenkins/jenkins:lts</span><br><span class="line">  </span><br><span class="line">访问: http://101.201.249.217:9080/</span><br><span class="line"></span><br><span class="line">进入容器内部获取密码:docker <span class="built_in">exec</span> -it jenkins bash</span><br><span class="line">查看密码: <span class="built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">手动安装 插件</span><br></pre></td></tr></table></figure>

<h4 id="Grafana-系统监控"><a href="#Grafana-系统监控" class="headerlink" title="Grafana   系统监控"></a>Grafana   系统监控</h4><p>访问入口:<a href="http://101.201.249.217:7003/">http://101.201.249.217:7003</a></p>
<p>管理员密码:  admin  &#x2F;  nancal666</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 7003:3000 --name grafana grafana/grafana:latest</span><br></pre></td></tr></table></figure>

<h4 id="Docker-Compose-安装"><a href="#Docker-Compose-安装" class="headerlink" title="Docker Compose 安装"></a>Docker Compose 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker Compose 安装</span><br><span class="line">yum install epel-release</span><br><span class="line">pip3 install docker-compose</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<h4 id="镜像管理-Harbor"><a href="#镜像管理-Harbor" class="headerlink" title="镜像管理   Harbor"></a>镜像管理   Harbor</h4><p>访问入口: <a href="http://101.201.249.217:9880/">http://101.201.249.217:9880/</a></p>
<p>管理员账户:   admin	&#x2F;  Harbor12345</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.wget https://github.com/goharbor/harbor/releases/download/v1.10.4/harbor-online-installer-v1.10.4.tgz  -P 2./opt/docker -N</span><br><span class="line">3.tar zxvf /opt/docker/harbor-online-installer-v1.10.4.tgz -C /opt/docker</span><br><span class="line">4.wget <span class="variable">$host</span>/ops/harbor.yml -O /opt/docker/harbor/harbor.yml  (此步骤是编写yml文件)</span><br><span class="line">5.注意修改 : hosts为本机hosts, 注释https ,否则会找不到ssl证书报错  /   端口</span><br><span class="line">6./opt/docker/harbor/install.sh</span><br></pre></td></tr></table></figure>

<h4 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">            --name elasticsearch \</span><br><span class="line">            --net mynet\</span><br><span class="line">            -p 9200:9200 \</span><br><span class="line">            -p 9300:9300  \</span><br><span class="line">            -e &quot;discovery.type=single-node&quot; \</span><br><span class="line">            -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx128m&quot; \</span><br><span class="line">            elasticsearch:7.3.1</span><br></pre></td></tr></table></figure>

<h4 id="es客户端工具"><a href="#es客户端工具" class="headerlink" title="es客户端工具"></a>es客户端工具</h4><p>访问入口: <a href="http://101.201.249.217:9458/">http://101.201.249.217:9458/</a></p>
<p>链接es地址: <a href="http://101.201.249.217:9200/">http://101.201.249.217:9200</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 9458:9800 -d --net mynet --link elasticsearch:demo containerize/elastichd</span><br></pre></td></tr></table></figure>

<h4 id="调用链监控-Skywalking"><a href="#调用链监控-Skywalking" class="headerlink" title="调用链监控  Skywalking"></a>调用链监控  Skywalking</h4><p>访问入口:  <a href="http://101.201.249.217:9072/">http://101.201.249.217:9072/</a></p>
<p>安装服务端  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> docker run --name skywalking-oap \</span><br><span class="line">     --restart always -d \</span><br><span class="line">     -p 1234:1234 \</span><br><span class="line">     -p 11800:11800 \</span><br><span class="line">     -p 12800:12800 \</span><br><span class="line">     -e TZ=Asia/Shanghai \</span><br><span class="line">     -e SW_STORAGE=elasticsearch7 \</span><br><span class="line">     -e SW_STORAGE_ES_CLUSTER_NODES=101.201.249.217:9200 \</span><br><span class="line">     apache/skywalking-oap-server:8.1.0-es7</span><br><span class="line"></span><br><span class="line">-- 查询启动日志</span><br><span class="line"> docker logs --tail=100 -f skywalking-oap</span><br><span class="line">-- tips</span><br><span class="line"> 必须指定es7  不然会报错 启动日志显示Current image doesn&#x27;t Elasticsearch 6 </span><br></pre></td></tr></table></figure>

<p>安装UI端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name skywalking-ui \</span><br><span class="line">    --restart=always -d \</span><br><span class="line">    -e TZ=Asia/Shanghai \</span><br><span class="line">    -p 9072:8080  \</span><br><span class="line">    -e SW_OAP_ADDRESS=101.201.249.217:12800 \</span><br><span class="line">    apache/skywalking-ui:8.1.0-es7</span><br></pre></td></tr></table></figure>

<h4 id="代码分析-sonaqube"><a href="#代码分析-sonaqube" class="headerlink" title="代码分析  sonaqube"></a>代码分析  sonaqube</h4><p>访问入口: <a href="http://101.201.249.217:9900/">http://101.201.249.217:9900/</a></p>
<p>管理员密码:  admin &#x2F;admin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建 sonarqube 工作目录，映射目录都放在这里</span><br><span class="line">mkdir -p /usr/local/sonarqube &amp;&amp; cd /usr/local/sonarqube</span><br><span class="line"></span><br><span class="line"># 创建映射目录，查看日志</span><br><span class="line">mkdir /usr/local/sonarqube/data &amp;&amp; \</span><br><span class="line">mkdir /usr/local/sonarqube/extensions &amp;&amp; \</span><br><span class="line">mkdir /usr/local/sonarqube/logs</span><br><span class="line"></span><br><span class="line"># 设置为 777 权限，否则映射不生效</span><br><span class="line"># 可能是因为我用 root 用户操作，而容器内部用的 sonarqube 用户</span><br><span class="line">chmod 777 /usr/local/sonarqube/data &amp;&amp; \</span><br><span class="line">chmod 777 /usr/local/sonarqube/extensions &amp;&amp; \</span><br><span class="line">chmod 777 /usr/local/sonarqube/logs</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">docker run -d --name sonarqube \</span><br><span class="line">    -p 9900:9000 \</span><br><span class="line">    -v /usr/local/sonarqube/data:/opt/sonarqube/data \</span><br><span class="line">    -v /usr/local/sonarqube/extensions:/opt/sonarqube/extensions \</span><br><span class="line">    -v /usr/local/sonarqube/logs:/opt/sonarqube/logs \</span><br><span class="line">    sonarqube:8.3-community</span><br></pre></td></tr></table></figure>

<h4 id="Ceph管理-Ceph-分布式文件管理系统"><a href="#Ceph管理-Ceph-分布式文件管理系统" class="headerlink" title="Ceph管理   Ceph  分布式文件管理系统"></a>Ceph管理   Ceph  分布式文件管理系统</h4><h4 id="K8s管理-KUboard-安装完k8s-之后才会使用"><a href="#K8s管理-KUboard-安装完k8s-之后才会使用" class="headerlink" title="K8s管理   KUboard    (安装完k8s 之后才会使用)"></a>K8s管理   KUboard    (安装完k8s 之后才会使用)</h4>]]></content>
  </entry>
  <entry>
    <title>搜索</title>
    <url>/2020/04/07/ElasticSearch%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h2 id="ES和Solr"><a href="#ES和Solr" class="headerlink" title="ES和Solr"></a>ES和Solr</h2><h4 id="ElasticSearch-vs-Solr"><a href="#ElasticSearch-vs-Solr" class="headerlink" title="ElasticSearch vs Solr"></a>ElasticSearch vs Solr</h4><ol>
<li>es基本是开箱即用（解压就可以用 ! ），非常简单。Solr安装略微复杂一丢丢！</li>
<li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</li>
<li>Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。</li>
<li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提<br>供，例如图形化界面需要kibana友好支撑~!</li>
<li><strong>Solr 查询快，但更新索引时慢</strong>（即插入删除慢），用于电商等查询多的应用；<br><strong>ES建立索引快（即查询慢），即实时性查询快</strong>，用于facebook新浪等搜索。<br>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</li>
<li>Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而 Elasticsearch相对开发维护者<br>较少，更新太快，学习使用成本较高。（趋势！）</li>
</ol>
<span id="more"></span>

<h2 id="ES目录结构-默认端口9200"><a href="#ES目录结构-默认端口9200" class="headerlink" title="ES目录结构   默认端口9200"></a>ES目录结构   默认端口9200</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin 启动文件</span><br><span class="line">config 配置文件</span><br><span class="line">	log4j2 日志配置文件</span><br><span class="line">	jvm.options java 虚拟机相关的配置</span><br><span class="line">	elasticsearch.yml  elasticsearch 的配置文件！ 默认 9200 端口！ 跨域！</span><br><span class="line">lib   相关jar包</span><br><span class="line">logs   日志！</span><br><span class="line">modules 功能模块</span><br><span class="line">plugins 插件！</span><br></pre></td></tr></table></figure>

<h2 id="可视化界面-es-head的插件"><a href="#可视化界面-es-head的插件" class="headerlink" title="可视化界面 es head的插件"></a>可视化界面 es head的插件</h2><ol>
<li><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head/">https://github.com/mobz/elasticsearch-head/</a></p>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>
</li>
<li><p>存在跨域问题：配置es  修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为Elastic<br>Stack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框<br>架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可<br>见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。Logstash是ELK<br>的中央数据流引擎，用于从不同目标（文件&#x2F;数据存储&#x2F;MQ）收集的不同格式数据，经过过滤后支持输出<br>到不同目的地（文件&#x2F;MQ&#x2F;redis&#x2F;elasticsearch&#x2F;kafka等）。Kibana可以将elasticsearch的数据通过友好<br>的页面展示出来，提供实时分析的功能</p>
<h2 id="安装Kibana-5601"><a href="#安装Kibana-5601" class="headerlink" title="安装Kibana  5601"></a>安装Kibana  5601</h2><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索<br>引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理<br>解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查<br>询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动<br>Elasticsearch索引监测。</p>
<p><a href="https://www.elastic.co/cn/kibana">https://www.elastic.co/cn/kibana</a></p>
<h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h2><ol>
<li>索引</li>
<li>字段类型</li>
<li>文档</li>
</ol>
<p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包<br>含多 个文档(行)，每个文档中又包含多个字段(列)</p>
<p><strong>物理设计：</strong></p>
<p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移<br>一个人就是一个集群！默认的集群名称就是 elaticsearh</p>
<p><strong>逻辑设计：</strong></p>
<p>一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的一各<br>顺序找到 它: 索引 ▷ 类型 ▷ 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID不必是整<br>数，实际上它是个字 符串</p>
<p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch<br>中，文档有几个 重要属性 :</p>
<ul>
<li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key:value！<br>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！ {就是一个json对象！<br>fastjson进行自动转换！}</li>
<li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，<br>在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个<br>新的字段。</li>
</ul>
<p>尽管我们可以随意的新增或者忽略某个字段，但是，<strong>每个字段的类型非常重要</strong>，比如一个年龄字段类<br>型，可以是字符 串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种<br>映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p>
<p><strong>类型</strong></p>
<p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射，<br>比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，<br>比如新增一个字段，那么elasticsearch是怎么做的呢?elasticsearch会自动的将新字段加入映射，但是这<br>个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它<br>是整形。 但是elasticsearch也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关<br>系型数据库殊途同归了，先定义好字段，然后再使用</p>
<p><strong>索引</strong></p>
<ul>
<li>就是数据库！</li>
<li>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段<br>和其他设置。 然后它们被存储到了各个分片上了</li>
</ul>
<p>elasticsearch使用的是一种称为<strong>倒排索引</strong>的结构，采用Lucene倒排索作为底层。这种结构适用于快速的<br>全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。</p>
<h2 id="IK分词器插件"><a href="#IK分词器插件" class="headerlink" title="IK分词器插件"></a>IK分词器插件</h2><p><strong>分词</strong>：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把<br>数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个<br>词，比如 “我爱x” 会被分为”我”,”爱”,”x”，这显然是不符合要求的，所以我们需要安装中文分词<br>器ik来解决这个问题。</p>
<p>如果要使用中文，建议使用ik分词器！</p>
<p>IK提供了两个分词算法：<strong>ik_smart 和 ik_max_word</strong>，其中 ik_smart 为最少切分，ik_max_word为最细<br>粒度划分！</p>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200407104317.jpg" alt="QQ截图20200407104306"></p>
<h2 id="索引的基本操作"><a href="#索引的基本操作" class="headerlink" title="索引的基本操作"></a>索引的基本操作</h2><ol>
<li><p>创建一个索引</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">put  /索引名/类型名/文档<span class="built_in">id</span>   &#123;内容&#125;  //  &#123;<span class="string">&quot;name&quot;</span> :<span class="string">&quot;xxx&quot;</span>,  <span class="string">&quot;age&quot;</span>:<span class="string">&quot;xxxx&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>type  指定数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串类型</span><br><span class="line">	text 、 keyword</span><br><span class="line">数值类型</span><br><span class="line">	long, integer, short, byte, double, float, half_float, scaled_float</span><br><span class="line">日期类型</span><br><span class="line">	date</span><br><span class="line">布尔值类型</span><br><span class="line">	boolean</span><br><span class="line">二进制类型</span><br><span class="line">	binary</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code>put /test
&#123;
    &quot;mappings&quot;:&#123;
        &quot;properties&quot;:&#123;
            &quot;name&quot;:&#123;
                type:&quot;text&quot;
            &#125;
        &#125;
    &#125;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   通过命令 elasticsearch 索引情况！ 通过get _cat/ 可以获得es的当前的很多信息！</span><br><span class="line">   </span><br><span class="line">4. 更新</span><br><span class="line"></span><br></pre></td></tr></table></figure>
post /test/_update
&#123;
    &quot;xxx&quot;:&quot;xxx&quot;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">## 文档的基本操作</span><br><span class="line"></span><br><span class="line">1. 添加数据</span><br><span class="line"></span><br><span class="line">   ```bash</span><br><span class="line">   PUT /xx/user/1</span><br><span class="line">   &#123;</span><br><span class="line">    &quot;name&quot;: &quot;名字&quot;,</span><br><span class="line">    &quot;age&quot;: 30,</span><br><span class="line">    &quot;desc&quot;: &quot;描述&quot;,</span><br><span class="line">    &quot;tags&quot;: [&quot;技术宅&quot;,&quot;温暖&quot;,&quot;直男&quot;]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>获取    get</p>
</li>
<li><p>更新   put  &#x2F;  post _update</p>
</li>
<li><p>复杂查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get  /xxx</span><br><span class="line">&#123;</span><br><span class="line">	query:&#123;</span><br><span class="line">		match:&#123;</span><br><span class="line">			xxx:xxx</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	sort:[&#123;</span><br><span class="line">		&quot;xxx&quot;:desc</span><br><span class="line">	&#125;],</span><br><span class="line">	from:0,</span><br><span class="line">	size:10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>must （and），所有的条件都要符合 where id &#x3D; 1 and name &#x3D; xxx</p>
<p>should（or），所有的条件都要符合 where id &#x3D; 1 or name &#x3D; xxx</p>
<p>must_not （not）</p>
<p>过滤器 filter</p>
</li>
<li><p>精确查询     term 查询是直接通过倒排索引指定的词条进程精确查找</p>
<ul>
<li>term ，直接查询精确的</li>
<li>match，会使用分词器解析！（先分析文档，然后在通过分析的文档进行查询！）</li>
</ul>
</li>
</ol>
<h2 id="集成SpringBoot"><a href="#集成SpringBoot" class="headerlink" title="集成SpringBoot"></a>集成SpringBoot</h2><ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>&#96;&#96;&#96;<br>RestHighLevelClient client &#x3D; new RestHighLevelClient(<br>    RestClient.builder(<br>            new HttpHost(“localhost”, 9200, “http”),<br>            new HttpHost(“localhost”, 9201, “http”)));<br>client.close();</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## API测试</span><br><span class="line"></span><br><span class="line">1. 创建索引</span><br><span class="line">2. 判断索引是否存在</span><br><span class="line">3. 删除索引</span><br><span class="line">4. 创建文档</span><br><span class="line">5. crud文档</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@SpringBootTest</span><br><span class="line">class EsApiApplicationTests &#123;</span><br><span class="line">  // 面向对象来操作</span><br><span class="line">  @Autowired</span><br><span class="line">  @Qualifier(&quot;restHighLevelClient&quot;)</span><br><span class="line">  private RestHighLevelClient client;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  // 测试索引的创建 Request PUT tree_index</span><br><span class="line">  @Test</span><br><span class="line">  void testCreateIndex() throws IOException &#123;</span><br><span class="line">    // 1、创建索引请求</span><br><span class="line">    CreateIndexRequest request = new CreateIndexRequest(&quot;tree_index&quot;);</span><br><span class="line">      </span><br><span class="line">    // 2、客户端执行请求 IndicesClient,请求后获得响应</span><br><span class="line">    CreateIndexResponse createIndexResponse =</span><br><span class="line">        client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(createIndexResponse);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 测试获取索引,判断其是否存在</span><br><span class="line">  @Test</span><br><span class="line">  void testExistIndex() throws IOException &#123;</span><br><span class="line">    GetIndexRequest request = new GetIndexRequest(&quot;tree_index2&quot;);</span><br><span class="line">    boolean exists = client.indices().exists(request,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 测试删除索引</span><br><span class="line">  @Test</span><br><span class="line">  void testDeleteIndex() throws IOException &#123;</span><br><span class="line">    DeleteIndexRequest request = new DeleteIndexRequest(&quot;tree_index&quot;);</span><br><span class="line">    // 删除</span><br><span class="line">    AcknowledgedResponse delete = client.indices().delete(request,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(delete.isAcknowledged());</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 测试添加文档</span><br><span class="line">  @Test</span><br><span class="line">  void testAddDocument() throws IOException &#123;</span><br><span class="line">    // 创建对象</span><br><span class="line">    User user = new User(&quot;ks&quot;, 3);</span><br><span class="line">    // 创建请求</span><br><span class="line">    IndexRequest request = new IndexRequest(&quot;tree_index&quot;);</span><br><span class="line">    // 规则 put /tree_index/_doc/1</span><br><span class="line">    request.id(&quot;1&quot;);</span><br><span class="line">    request.timeout(TimeValue.timeValueSeconds(1));</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    // 将我们的数据放入请求 json</span><br><span class="line">    request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">    // 客户端发送请求 , 获取响应的结果</span><br><span class="line">    IndexResponse indexResponse = client.index(request,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(indexResponse.toString()); //</span><br><span class="line">    System.out.println(indexResponse.status()); // 对应我们命令返回的状态</span><br><span class="line">CREATED</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 获取文档，判断是否存在 get /index/doc/1</span><br><span class="line">  @Test</span><br><span class="line">  void testIsExists() throws IOException &#123;</span><br><span class="line">    GetRequest getRequest = new GetRequest(&quot;tree_index&quot;, &quot;1&quot;);</span><br><span class="line">    // 不获取返回的 _source 的上下文了</span><br><span class="line">    getRequest.fetchSourceContext(new FetchSourceContext(false));</span><br><span class="line">    getRequest.storedFields(&quot;_none_&quot;);</span><br><span class="line">    boolean exists = client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 获得文档的信息</span><br><span class="line">  @Test</span><br><span class="line">  void testGetDocument() throws IOException &#123;</span><br><span class="line">    GetRequest getRequest = new GetRequest(&quot;tree_index&quot;, &quot;1&quot;);</span><br><span class="line">    GetResponse getResponse = client.get(getRequest,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(getResponse.getSourceAsString()); // 打印文档的内容</span><br><span class="line">    System.out.println(getResponse); // 返回的全部内容和命令式一样的</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 更新文档的信息</span><br><span class="line">  @Test</span><br><span class="line">  void testUpdateRequest() throws IOException &#123;</span><br><span class="line">    UpdateRequest updateRequest = new UpdateRequest(&quot;tree_index&quot;,&quot;1&quot;);</span><br><span class="line">    updateRequest.timeout(&quot;1s&quot;);</span><br><span class="line">    User user = new User(&quot;ksJava&quot;, 18);</span><br><span class="line">    updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">    UpdateResponse updateResponse = client.update(updateRequest,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(updateResponse.status());</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 删除文档记录</span><br><span class="line">  @Test</span><br><span class="line">  void testDeleteRequest() throws IOException &#123;</span><br><span class="line">    DeleteRequest request = new DeleteRequest(&quot;tree_index&quot;,&quot;1&quot;);</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    DeleteResponse deleteResponse = client.delete(request,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(deleteResponse.status());</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">  // 特殊的，真的项目一般都会批量插入数据！</span><br><span class="line">  @Test</span><br><span class="line">  void testBulkRequest() throws IOException &#123;</span><br><span class="line">    BulkRequest bulkRequest = new BulkRequest();</span><br><span class="line">    bulkRequest.timeout(&quot;10s&quot;);</span><br><span class="line">    ArrayList&lt;User&gt; userList = new ArrayList&lt;&gt;();</span><br><span class="line">    userList.add(new User(&quot;treeshen1&quot;,3));</span><br><span class="line">    userList.add(new User(&quot;treeshen2&quot;,3));</span><br><span class="line">    userList.add(new User(&quot;treeshen3&quot;,3));</span><br><span class="line">    userList.add(new User(&quot;qq1&quot;,3));</span><br><span class="line">    userList.add(new User(&quot;qq1&quot;,3));</span><br><span class="line">    userList.add(new User(&quot;qq1&quot;,3));</span><br><span class="line">    // 批处理请求</span><br><span class="line">    for (int i = 0; i &lt; userList.size() ; i++) &#123;</span><br><span class="line">      // 批量更新和批量删除，就在这里修改对应的请求就可以了</span><br><span class="line">      bulkRequest.add(</span><br><span class="line">          new IndexRequest(&quot;tree_index&quot;)</span><br><span class="line">         .id(&quot;&quot;+(i+1))</span><br><span class="line">        </span><br><span class="line">.source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class="line">   &#125;</span><br><span class="line">    BulkResponse bulkResponse = client.bulk(bulkRequest,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(bulkResponse.hasFailures()); // 是否失败，返回 false 代表</span><br><span class="line">成功！</span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line">  // 查询</span><br><span class="line">  // SearchRequest 搜索请求</span><br><span class="line">  // SearchSourceBuilder 条件构造</span><br><span class="line">  // HighlightBuilder 构建高亮</span><br><span class="line">  // TermQueryBuilder 精确查询</span><br><span class="line">  // MatchAllQueryBuilder</span><br><span class="line">  // xxx QueryBuilder 对应我们刚才看到的命令！</span><br><span class="line"> </span><br><span class="line">  @Test</span><br><span class="line">  void testSearch() throws IOException &#123;</span><br><span class="line">    SearchRequest searchRequest = new SearchRequest(&quot;tree_index&quot;);</span><br><span class="line">    // 构建搜索条件</span><br><span class="line">    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">    sourceBuilder.highlighter()</span><br><span class="line">        </span><br><span class="line">    // 查询条件，我们可以使用 QueryBuilders 工具来实现</span><br><span class="line">    // QueryBuilders.termQuery 精确</span><br><span class="line">    // QueryBuilders.matchAllQuery() 匹配所有</span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(&quot;name&quot;,</span><br><span class="line">&quot;qq1&quot;);</span><br><span class="line">//    MatchAllQueryBuilder matchAllQueryBuilder =</span><br><span class="line">QueryBuilders.matchAllQuery();</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(new TimeValue(60,TimeUnit.SECONDS));</span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = client.search(searchRequest,</span><br><span class="line">RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">    System.out.println(&quot;=================================&quot;);</span><br><span class="line">    for (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">      System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker上run起我们的数据库</title>
    <url>/2018/06/11/Docker%E4%B8%8Arun%E8%B5%B7%E6%88%91%E4%BB%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p><img src="/uploads/docker.jpg" alt="avatar">  <img src="/uploads/mongodb.jpg" alt="avatar"></p>
<h4 id="查看Docker-Hub-上的容器镜像"><a href="#查看Docker-Hub-上的容器镜像" class="headerlink" title="查看Docker Hub 上的容器镜像"></a>查看Docker Hub 上的容器镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search mongo</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="公司生产环境使用Mongo-3-4-这里pull-3-4"><a href="#公司生产环境使用Mongo-3-4-这里pull-3-4" class="headerlink" title="公司生产环境使用Mongo 3.4 ,这里pull 3.4"></a>公司生产环境使用Mongo 3.4 ,这里pull 3.4</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mongo:3.4</span><br></pre></td></tr></table></figure>

<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name m3 -p 27017:27017 -v $PWD/xxx_online:/data/db -d mongo:3.4</span><br></pre></td></tr></table></figure>

<ul>
<li>-p 27017:27017 :将容器的27017 端口映射到主机的27017 端口</li>
<li>-v $PWD&#x2F;xxx_online:&#x2F;data&#x2F;db :将主机中当前目录下的xxx_online挂载到容器的&#x2F;data&#x2F;db，作为mongo数据存储目录</li>
</ul>
<h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@admin:/home/udi/文档# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">054a00e48b8f        mongo:3.4           &quot;docker-entrypoint...&quot;   6 minutes ago       Up 6 minutes        0.0.0.0:27017-&gt;27017/tcp   cocky_roentgen</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="与容器中mongo-进行-原始交互"><a href="#与容器中mongo-进行-原始交互" class="headerlink" title="与容器中mongo 进行 原始交互"></a>与容器中mongo 进行 原始交互</h4><p>如果已经成功run,那么直接mongo,就进入了mongo的shell</p>
<p>或者，m3是容器的名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it m3 bash</span><br></pre></td></tr></table></figure>

<h4 id="此时再使用mongo-就可以进入shell，接下来把数据导入到数据库中，就可以正常访问了"><a href="#此时再使用mongo-就可以进入shell，接下来把数据导入到数据库中，就可以正常访问了" class="headerlink" title="此时再使用mongo,就可以进入shell，接下来把数据导入到数据库中，就可以正常访问了"></a>此时再使用mongo,就可以进入shell，接下来把数据导入到数据库中，就可以正常访问了</h4><h1 id="因为我主要是想方便快捷的pull一个数据库到本地，可以直接使用，免去很多麻烦，所以要push到阿里云仓库"><a href="#因为我主要是想方便快捷的pull一个数据库到本地，可以直接使用，免去很多麻烦，所以要push到阿里云仓库" class="headerlink" title="因为我主要是想方便快捷的pull一个数据库到本地，可以直接使用，免去很多麻烦，所以要push到阿里云仓库"></a>因为我主要是想方便快捷的pull一个数据库到本地，可以直接使用，免去很多麻烦，所以要push到阿里云仓库</h1><h4 id="pull下来之后，依然需要这样启动"><a href="#pull下来之后，依然需要这样启动" class="headerlink" title="pull下来之后，依然需要这样启动"></a>pull下来之后，依然需要这样启动</h4><blockquote>
<p>docker run –name m3 -p 27017:27017 -v $PWD&#x2F;testdb:&#x2F;data&#x2F;db -d 6b89d82e7fa1</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>学习记录</tag>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中配置数据卷容器及启动springboot项目等</title>
    <url>/2020/03/31/Docker%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8%E5%8F%8A%E5%90%AF%E5%8A%A8springboot%E9%A1%B9%E7%9B%AE%E7%AD%89/</url>
    <content><![CDATA[<h2 id="数据卷的概念内容"><a href="#数据卷的概念内容" class="headerlink" title="数据卷的概念内容"></a>数据卷的概念内容</h2><ul>
<li>是宿主机的一个目录或者文件存放</li>
</ul>
<h2 id="数据卷的作用"><a href="#数据卷的作用" class="headerlink" title="数据卷的作用"></a>数据卷的作用</h2><ul>
<li>容器数据持久化</li>
<li>客户端和容器的数据交换</li>
<li>容器间的数据交换</li>
</ul>
<span id="more"></span>

<h2 id="配置容器卷"><a href="#配置容器卷" class="headerlink" title="配置容器卷"></a>配置容器卷</h2><ul>
<li>创建容器,挂载目录,其他容器继承该容器   –volume-from</li>
</ul>
<p>1.创建名为tree的数据容器卷, 使用-v参数,设置数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=tree -v /volume centos:7 /bin/bash</span><br></pre></td></tr></table></figure>

<p>2.启动其他容器,使用–volumes-from  参数,挂载并且使用参数卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=one --volumes-from tree centos:7 /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=two --volumes-from tree centos:7 /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol>
<li><p>在本地目录下创建一个数据存放点 data,用于存放数据库信息</p>
</li>
<li><p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3309:3306 \</span><br><span class="line">--anme=cysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql/ \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><ol>
<li><p>在本地目录下创建一个数据存放点 data,用于存信息</p>
</li>
<li><p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=tree_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><ol>
<li><p>挂载配置文件,主机目录下的配置挂载</p>
</li>
<li><p>执行代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=tree_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=tree_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure>

<h2 id="镜像制作-x2F-容器转换为镜像"><a href="#镜像制作-x2F-容器转换为镜像" class="headerlink" title="镜像制作 &#x2F; 容器转换为镜像"></a>镜像制作 &#x2F; 容器转换为镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.docker commit 容器id 镜像名称:版本号</span><br><span class="line">2.docker save -o 压缩文件名称 镜像名称:版本号</span><br><span class="line">3.docker load -i 压缩文件名称</span><br></pre></td></tr></table></figure>

<h2 id="制作springboot-Dockerfile-栗子"><a href="#制作springboot-Dockerfile-栗子" class="headerlink" title="制作springboot Dockerfile 栗子"></a>制作springboot Dockerfile 栗子</h2><ol>
<li><p>定义父镜像名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM:java:78</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义作者信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAINTAINER tree &lt;anke1938@foxmail.com&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将jar包添加到容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD xxxx.jar app.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义容器启动时候执行的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMD java -jar app.jar</span><br></pre></td></tr></table></figure>


</li>
<li><p>通过dockerfile构建镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile文件路径 -t 镜像名称:版本</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="容器编排-docker-compose"><a href="#容器编排-docker-compose" class="headerlink" title="容器编排 docker compose"></a>容器编排 docker compose</h2><p>docker compose是一个编排多容器分布式部署的工具,包括构建服务,启动,停止</p>
<ol>
<li>利用dockerfile 定义运行环境镜像</li>
<li>使用docker-compose.yml 定义组成应用的各服务</li>
<li>运行docker-compose up 启动应用</li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>GC小总结</title>
    <url>/2020/03/31/GC%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="对象判定为垃圾的算法"><a href="#对象判定为垃圾的算法" class="headerlink" title="对象判定为垃圾的算法"></a>对象判定为垃圾的算法</h2><ul>
<li><h3 id="引用计数算法-判断对象的引用数量"><a href="#引用计数算法-判断对象的引用数量" class="headerlink" title="引用计数算法(判断对象的引用数量)"></a>引用计数算法(判断对象的引用数量)</h3><blockquote>
<p>1.通过判断对象的引用数量来决定对象是否可以被回收</p>
<p>2.每个对象实例都有一个引用计数器,被引用+1,完成应用-1,它有一个缺点不能解决循环引用的问题</p>
<p>3.任何引用计数为0的对象实例都可以当做垃圾收集</p>
</blockquote>
</li>
<li><h3 id="可达性计数算法"><a href="#可达性计数算法" class="headerlink" title="可达性计数算法"></a>可达性计数算法</h3><blockquote>
<p>从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。通过判断对象的引用链是否可达来决定对象是否回收</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<h2 id="可以作为GC-Root的对象"><a href="#可以作为GC-Root的对象" class="headerlink" title="可以作为GC Root的对象"></a>可以作为GC Root的对象</h2><ul>
<li>虚拟机栈中引用的对象(栈帧中的本地变量表)</li>
<li>方法区中的常量引用对象</li>
<li>方法区中的类静态属性引用的对象</li>
<li>本地方法栈中的JNI(native方法) 的引用对象</li>
<li>活跃线程的引用对象</li>
</ul>
<h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><ol>
<li><p>标记清除算法</p>
</li>
<li><p>复制算法</p>
<blockquote>
<ol>
<li>分为对象面和空闲面</li>
<li>对象在对象面上创建</li>
<li>存活的对象被从对象面复制到空闲面</li>
<li>将对象面所有对象内存清除</li>
</ol>
<p>解决碎片化问题</p>
<p>顺序分配内存,简单高效</p>
<p>适用于对象存活率低的场景</p>
</blockquote>
</li>
<li><p>标记整理算法</p>
<blockquote>
<p>标记:从根集合进行扫描,对存活的对象进行标记</p>
<p>清除:移动所有存活的对象,且按照内存地址次序依次排列,末端重新回收</p>
<p>避免内存的不连续性</p>
<p>不用设置两块内存空间互换,省内存</p>
<p>适用于存活率高的场景</p>
</blockquote>
<p>另: JDK8之后没有永久代</p>
</li>
<li><p>分代收集算法</p>
<ul>
<li><p>年轻代: 尽可能的快速回收掉  声明周期短的对象</p>
<blockquote>
<p>Eden区</p>
<p>两个Survivor区</p>
</blockquote>
</li>
<li><p>老年代:存放生命周期较长的对象</p>
<blockquote>
<p>标记清理算法   和    标记整理算法</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200331203007.jpg" alt="QQ截图20200331202808"></p>
<h3 id="对象如何晋升到老年代"><a href="#对象如何晋升到老年代" class="headerlink" title="对象如何晋升到老年代"></a>对象如何晋升到老年代</h3><ol>
<li>经历一次Minor次数依然存活的对象</li>
<li>Survivor区中存放不下对象</li>
<li>新生成的大对象 ( -XX:+PretenuerSizeThreshold   可以设置 )</li>
</ol>
<h2 id="触发FUllGC的条件"><a href="#触发FUllGC的条件" class="headerlink" title="触发FUllGC的条件"></a>触发FUllGC的条件</h2><ol>
<li><p>老年代空间不足</p>
</li>
<li><p>永久代空间不足</p>
</li>
<li><p>Minor GC晋升到老年代的平均大小大于老年代的剩余空间</p>
</li>
<li><p>System.gc()</p>
</li>
<li><p>CMS GC时出现 Promotion failed, concurrent mode failure</p>
<blockquote>
<p>CMS并行GC收集器是大多数JAVA服务应用的最佳选择,但是也有很多问题 . </p>
<p><strong>Promotion failed</strong> :对象只能放入老年代，而此时老年代也放不下造成的</p>
<p><strong>concurrent mode failure</strong>:在执行CMS GC的过程中同时业务线程将对象放入老年代，而此时老年代空间不足，或者在做Minor GC的时候，新生代Survivor空间放不下，需要放入老年代，而老年代也放不下而产生的。</p>
</blockquote>
</li>
</ol>
<h2 id="年轻代常见的垃圾收集器"><a href="#年轻代常见的垃圾收集器" class="headerlink" title="年轻代常见的垃圾收集器"></a>年轻代常见的垃圾收集器</h2><ul>
<li><p>Serial 收集器 ( -XX:+UseSerialGC, 复制算法)</p>
<blockquote>
<p>1.单线程手机,进行垃圾收集时,必须停止所有的工作线程</p>
<p>2.简单高效,Client模式下默认的年轻代收集器</p>
</blockquote>
</li>
<li><p>ParNew收集器 ( -XX:UserParNewGC,复制算法)</p>
<blockquote>
<p>1.多线程收集,特点和Serial 收集器 一样</p>
<p>2.单核执行效率不如Serial,多核有优势</p>
</blockquote>
</li>
<li><p>Parallel Scanenge收集器 ( -XX:UseParallerlGC,复制算法)</p>
<blockquote>
<p>1.更关注系统的吞吐量</p>
<p>2.多核下有优势,Server模式下默认的年轻代收集器</p>
</blockquote>
</li>
</ul>
<h2 id="老年代常见的垃圾收集器"><a href="#老年代常见的垃圾收集器" class="headerlink" title="老年代常见的垃圾收集器"></a>老年代常见的垃圾收集器</h2><ul>
<li><p>Serial Old收集器 ( -XX:UseSerialOldGC, 标记<strong>整理</strong>算法)</p>
<blockquote>
<p>1.单线程收集,收集时必须暂停所有的工作线程</p>
<p>2.简单高效,Client模式下默认的老年代收集器</p>
</blockquote>
</li>
<li><p>Paraller Ole收集器 ( -XX:UseParllerOldGC,标记<strong>整理</strong>算法)</p>
<blockquote>
<p>多线程,吞吐量优先</p>
</blockquote>
</li>
<li><p>CMS收集器 ( -XX:UseConcMarkSweepGC, 标记<strong>清除</strong>算法)</p>
<blockquote>
<ol>
<li>初识标记:stop-the-world</li>
<li>并发标记: 并发追溯标记,程序不会停顿</li>
<li>并发预清理 :查找执行并发标记从年轻到老年的对象</li>
<li>重新标记:暂停虚拟机,扫描CMS堆中的剩余对象</li>
<li>并发清理: 清理垃圾对象,不会停顿</li>
<li>并发重置: 重置CMS收集器的数据结构</li>
</ol>
</blockquote>
</li>
<li><p>G1收集器 ( -XX:UseG1GC,复制+标记<strong>整理</strong>算法 )</p>
<blockquote>
<p>Garbage First收集器</p>
<ol>
<li>并行和并发</li>
<li>分代收集</li>
<li>空间整合</li>
<li>可预测的停顿</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="垃圾收集器之间的关系"><a href="#垃圾收集器之间的关系" class="headerlink" title="垃圾收集器之间的关系"></a>垃圾收集器之间的关系</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200331211007.jpg" alt="QQ截图20200331210951"></p>
<h2 id="强引用-软引用-弱引用-虚引用"><a href="#强引用-软引用-弱引用-虚引用" class="headerlink" title="强引用,软引用,弱引用,虚引用"></a>强引用,软引用,弱引用,虚引用</h2><ul>
<li><p>强引用</p>
<blockquote>
<p>最普通的引用:Object obj &#x3D; new Object()</p>
<p>OutOfMemoryError  也不会回收强引用对象</p>
<p>可通过设置为null来弱化引用,使其回收</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>软引用</p>
<blockquote>
<p>对象处在有用但是非必须的状态</p>
<p>只有内存不足的时候,GC会回收</p>
<p>可用来实现高速缓存</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SoftReferentce&lt;String&gt; soft = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;String&gt;(str)</span><br></pre></td></tr></table></figure>
</li>
<li><p>弱引用</p>
<blockquote>
<p>非必须对象,比软更弱</p>
<p>GC时会被回收</p>
<p>被回收的概率不大,因为GC线程优先级较低</p>
<p>使用偶尔使用且不影响垃圾收集的对象</p>
</blockquote>
</li>
<li><p>虚引用</p>
<blockquote>
<p>不会决定对象的生命周期</p>
<p>任何时候都可能被垃圾收集器回收</p>
<p>跟踪对象被回收的活动,哨兵</p>
<p>必须和应用队列联合使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"><span class="type">ReferenceQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>();</span><br><span class="line"><span class="type">Phantomference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phantomference</span>(str,queue)</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用队列</p>
<blockquote>
<p>无实际存储结构 ,存储依赖内部节点关系</p>
<p>存储关联的且被GC的软,弱,虚引用</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitea源码修改实现url参数登录</title>
    <url>/2020/11/23/Gitea%E6%BA%90%E7%A0%81%E4%BF%AE%E6%94%B9%E5%AE%9E%E7%8E%B0url%E5%8F%82%E6%95%B0%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><blockquote>
<p>最近一个项目需要在系统中集成很多系统的登录功能,之后也了解了LAPD &#x2F; OAuth2 等方案,最后还是决定直接找开源项目, 修改源码 (当然不是我决定)</p>
<p>于是   我一个Java   开始去读Go</p>
</blockquote>
<h3 id="根本想不到的困难点"><a href="#根本想不到的困难点" class="headerlink" title="根本想不到的困难点"></a>根本想不到的困难点</h3><blockquote>
<p>如何启动Gitea,实在是想不到  ,这困扰了我两三天,go build  之后可以访问 ,但是在goLand 中,直接运行 main.go  访问 会找不到前端页面,中间各种找原因…实在是不堪回首,最后问题是运行项目环境配置   输出目录要和编译目录在一起 ,因为…因为…前端页面是templete</p>
</blockquote>
<h3 id="Gitea使用框架是go-macaron"><a href="#Gitea使用框架是go-macaron" class="headerlink" title="Gitea使用框架是go-macaron"></a>Gitea使用框架是go-macaron</h3><h3 id="Go基础教程"><a href="#Go基础教程" class="headerlink" title="Go基础教程:"></a>Go基础教程:</h3><ul>
<li><p><a href="https://www.runoob.com/go/go-tutorial.html">https://www.runoob.com/go/go-tutorial.html</a></p>
</li>
<li><p>项目源代码地址:  <a href="https://github.com/go-gitea/gitea.git">https://github.com/go-gitea/gitea.git</a></p>
</li>
<li><p>加速地址:  <a href="https://hub.fastgit.org/go-gitea/gitea.git">https://hub.fastgit.org/go-gitea/gitea.git</a></p>
</li>
</ul>
<h4 id="切换代码分支到-origin-x2F-release-x2F-v1-10-其他版本都有些许问题"><a href="#切换代码分支到-origin-x2F-release-x2F-v1-10-其他版本都有些许问题" class="headerlink" title="切换代码分支到 origin&#x2F;release&#x2F;v1.10,其他版本都有些许问题"></a>切换代码分支到 origin&#x2F;release&#x2F;v1.10,其他版本都有些许问题</h4><h4 id="源代码构建过程"><a href="#源代码构建过程" class="headerlink" title="源代码构建过程"></a>源代码构建过程</h4><ol>
<li>GoLand 打开 go.mod，系统会检测环境，如果没有配置GoPath，添加GoPath到 C:\用户主目录\Go.(windows一般安装完成之后就会加入path)</li>
<li>运行环境  切换国内代理,不然下不来包：</li>
</ol>
<blockquote>
<p>go env -w GOSUMDB&#x3D;off</p>
<p>go env -w GOPROXY&#x3D;<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></p>
</blockquote>
<ol>
<li>Re-run go list  (一般会自动将包导入)</li>
<li>options 拷贝一份，改名为 conf (或许要这样)</li>
<li>执行： go build  稍等片刻会生成  gitea.exe</li>
<li>windows终端下运行  gitea web   浏览器打开  localhost:3000    即可访问</li>
</ol>
<h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><ol>
<li>配置go build, output directory 和 working directory 填写代码位置</li>
<li>run</li>
</ol>
<ul>
<li><h4 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/user/sign_up         auth.go 文件下的  SignUpPost方法</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/user/login    auth.go 文件下  SignInPost 方法</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="登录过程"><a href="#登录过程" class="headerlink" title="登录过程 ()"></a>登录过程 ()</h4><ol>
<li><p>先查询  login_source  表   ( name &#x3D; ? and type &#x3D; ? and is_actived &#x3D; ? )    看是否有符合的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">models.GetActiveOAuth2Providers()方法 </span><br></pre></td></tr></table></figure>
</li>
<li><p>检查用户名密码 必要性检查  封装User 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">models.UserSignIn(form.UserName, form.Password)</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查用户loginType  :    LoginNoType, LoginPlain, LoginOAuth2    查看用户是否是双重认证登录</p>
</li>
<li><p>执行登录   auth.og   -&gt;    195行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleSignIn(ctx, u, form.Remember)     -&gt;    执行   handleSignInFull()</span><br></pre></td></tr></table></figure>

<ol>
<li><p>如果用户点击记住用户名    设置:    xxx</p>
<ol>
<li>days &#x3D; 7</li>
<li>设置cookie</li>
</ol>
</li>
<li><p>删除session 中的数据</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;openid_verified_uri&quot;</span>)</span><br><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;openid_signin_remember&quot;</span>)</span><br><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;openid_determined_email&quot;</span>)</span><br><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;openid_determined_username&quot;</span>)</span><br><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;twofaUid&quot;</span>)</span><br><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;twofaRemember&quot;</span>)</span><br><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;u2fChallenge&quot;</span>)</span><br><span class="line">_ = ctx.Session.Delete(<span class="string">&quot;linkAccount&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>session 中设置 uid &#x2F; uname</p>
</li>
<li><p>设置 “lang”的cookie</p>
</li>
<li><p>重新设置CSRF的cookie   如果之前有也会重新生成覆盖</p>
</li>
<li><p>写入上次登录信息 , 主要写个时间戳  更新的也是user表中数据    auth.go   -&gt;  521</p>
</li>
</ol>
</li>
</ol>
<h5 id="发现cookie-中-i-like-gitea-实际为保存的用户数据"><a href="#发现cookie-中-i-like-gitea-实际为保存的用户数据" class="headerlink" title="发现cookie 中  i_like_gitea   实际为保存的用户数据"></a>发现cookie 中  i_like_gitea   实际为保存的用户数据</h5><p>ctx 中  有参数 IsSigned  判断用户是否已经登录  ,那么之前就会有确定用户是否登录的统一校验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Contexter() macaron.Handler   每次请求都会走这里</span><br></pre></td></tr></table></figure>

<ul>
<li><p>每个请求都会走  modules&#x2F;context&#x2F;context.go   中的  Contexter() 方法  跳转到 auth&#x2F;auth.go  中的  SignedInUser()</p>
</li>
<li><p>SignInID()  传入context,session   从session中获取uid 并返回</p>
</li>
<li><p>根据返回的uid   查询用户基本信息</p>
</li>
</ul>
<h3 id="构想即实现"><a href="#构想即实现" class="headerlink" title="构想即实现:"></a>构想即实现:</h3><blockquote>
<ol>
<li>第一次进入  带token进入  , 根据token 获取用户信息  ,  登录用户</li>
<li>根据用户信息, 设置对应的session ,给session 中写入当前用户信息</li>
</ol>
</blockquote>
<h3 id="最后想说"><a href="#最后想说" class="headerlink" title="最后想说"></a>最后想说</h3><blockquote>
<p>实际上,只修改了最后的部分,但是分析的过程很难受</p>
</blockquote>
]]></content>
      <tags>
        <tag>gitea go</tag>
      </tags>
  </entry>
  <entry>
    <title>Html中发送请求的另类方法</title>
    <url>/2020/04/12/Html%E4%B8%AD%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8F%A6%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="事情是这样的-想在博客中记录访问的情况"><a href="#事情是这样的-想在博客中记录访问的情况" class="headerlink" title="事情是这样的,想在博客中记录访问的情况"></a>事情是这样的,想在博客中记录访问的情况</h2><p>当然是想简单点,于是就找到了这个方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="title class_">Image</span>()).<span class="property">src</span>=<span class="string">&quot;包含用户行为数据的url&quot;</span></span><br></pre></td></tr></table></figure>

<p>利用img.src可以发送http请求，但是发送http请求不是img.src的真正用意。</p>
<p><strong>同样，用script.src去请求jsonp格式的接口数据也不是script元素的最初设计用途。</strong></p>
<p>但是这些<code>歪门邪道</code>的技术都是利用了img&#x2F;script等DOM元素能发跨域请求的特性。</p>
<ol>
<li><p>先访问一个获取ip的服务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://pv.sohu.com/cityjson?ie=utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回json数据</span></span><br><span class="line"><span class="keyword">var</span> returnCitySN = &#123;<span class="string">&quot;cip&quot;</span>: <span class="string">&quot;111.198.230.24&quot;</span>, <span class="string">&quot;cid&quot;</span>: <span class="string">&quot;110000&quot;</span>, <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;北京市&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>
<ol start="2">
<li><p>,将信息传递到server酱(对,就是想偷懒)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ip = returnCitySN[<span class="string">&quot;cip&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> city = returnCitySN[<span class="string">&quot;cname&quot;</span>]</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Image</span>()).<span class="property">src</span>=</span><br><span class="line">    <span class="string">&quot;http://sc.ftqq.com/SCKEY.send?text=&quot;</span>+ city +<span class="string">&quot;的大神找到你了,IP: &quot;</span>+ ip;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Youtobe的前端工程师说他们使用img-src请求来实现preloading-video-connection。"><a href="#Youtobe的前端工程师说他们使用img-src请求来实现preloading-video-connection。" class="headerlink" title="Youtobe的前端工程师说他们使用img.src请求来实现preloading video connection。"></a><a href="http://velocity.oreilly.com.cn/2010/index.php?func=session&name=YouTube%E7%9A%84%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E6%94%B9%E8%BF%9B%EF%BC%9A%E9%80%90%E6%AD%A5%E5%A2%9E%E5%BC%BA%E4%B8%8E%E8%B6%85%E8%B6%8A">Youtobe的前端工程师</a>说他们使用img.src请求来实现preloading video connection。</h2><blockquote>
<p>实现DNS预解析和TCP链接的建立！</p>
</blockquote>
<p>实现方式是在html的head部分有下面一段script代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var img = new Image();</span><br><span class="line">img.src = videoConnectionUrl;</span><br></pre></td></tr></table></figure>

<p>这样做的结果是：</p>
<ul>
<li>Resolves DNS while page is rendering, before it is needed</li>
<li>Maintains an open connection for later use</li>
</ul>
<p>看，又是一个<code>剑走偏锋</code>的用途！但是它比正规的dns-prefetch更强大，而且不存在低版本浏览器不支持的问题。</p>
]]></content>
  </entry>
  <entry>
    <title>JVM你要了解的事情</title>
    <url>/2020/04/01/JVM%E4%BD%A0%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<h2 id="Jvm-的主要组成部分"><a href="#Jvm-的主要组成部分" class="headerlink" title="Jvm 的主要组成部分"></a>Jvm 的主要组成部分</h2><ul>
<li>类加载器（ClassLoader）</li>
<li>运行时数据区（Runtime Data Area）</li>
<li>执行引擎（Execution Engine）</li>
<li>本地库接口（Native Interface）</li>
<li>组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能</li>
</ul>
<h2 id="Jvm与上下游之间的关系"><a href="#Jvm与上下游之间的关系" class="headerlink" title="Jvm与上下游之间的关系"></a>Jvm与上下游之间的关系</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401102123.jpg" alt="QQ截图20200401101936"></p>
<span id="more"></span>

<h2 id="Jvm内存模型"><a href="#Jvm内存模型" class="headerlink" title="Jvm内存模型"></a>Jvm内存模型</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401102219.jpg" alt="QQ截图20200401101849"></p>
<h2 id="Jvm-运行时数据区"><a href="#Jvm-运行时数据区" class="headerlink" title="Jvm 运行时数据区"></a>Jvm 运行时数据区</h2><ol>
<li><strong>程序计数器</strong>（Program Counter Register）：当前线程所执行的字节码的行号指示器，字节码解析器的工作是通过改变这个计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能，都需要依赖这个计数器来完成</li>
<li><strong>Java 虚拟机栈</strong>（Java Virtual Machine Stacks）：用于存储局<strong>部变量表、操作数栈、动态链接、方法出口</strong>等信息</li>
<li><strong>本地方法栈</strong>（Native Method Stack）：与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的</li>
<li><strong>Java 堆</strong>（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的<strong>对象实例</strong>都在这里分配内存</li>
<li><strong>方法区</strong>（Method Area）：是被所有线程共享的,用于存储已被虚拟机加载的<strong>静态变量,常量,类信息(构造函数,接口代码)<strong>、即时编译后的代码等数据,但是</strong>实例变量存在于堆内存,和方法区无关</strong></li>
</ol>
<h2 id="堆-栈-队列"><a href="#堆-栈-队列" class="headerlink" title="堆,栈,队列"></a>堆,栈,队列</h2><ol>
<li>栈是用来存放对象的,堆是用来执行程序的,堆空间很大</li>
<li>栈是线程私有的,堆是线程共享</li>
<li>队列和栈都是被用来预存储数据</li>
<li>队列允许先进先出检索元素,而栈对元素进行后进先出进行检索</li>
</ol>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401110353.jpg" alt="QQ截图20200401110338"></p>
<h2 id="类加载器-ClassLoader"><a href="#类加载器-ClassLoader" class="headerlink" title="类加载器(ClassLoader)"></a>类加载器(ClassLoader)</h2><blockquote>
<p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。</p>
</blockquote>
<ol>
<li>启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分，用来加载Java_HOME&#x2F;lib&#x2F;目录中的，或者被 -Xbootclasspath 参数所指定的路径中并且被虚拟机识别的类库</li>
<li>其他类加载器：</li>
<li>扩展类加载器（Extension ClassLoader）：负责加载\lib\ext目录或Java. ext. dirs系统变量指定的路径中的所有类库</li>
<li>应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器</li>
</ol>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401110233.jpg" alt="QQ截图20200401110218"></p>
<h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><ul>
<li>有了类加载器的概念,那么就很好理解了.如果一个类加载器收到了类加载的请求,它首先不会自己去加载这个类,而是把这个请求委派给父类加载器中去完成,每一层的类加载器都是如此,这样所有加载请求都会传递到顶层的启动类加载器中,只有当父类加载无法完成加载请求(搜索范围中没有找到需要的类),子加载器才会尝试去加载</li>
</ul>
<h2 id="类加载的执行过程"><a href="#类加载的执行过程" class="headerlink" title="类加载的执行过程"></a>类加载的执行过程</h2><ol>
<li>加载：根据查找路径找到相应的 class 文件然后导入</li>
<li>检查：检查加载的 class 文件的正确性</li>
<li>准备：给类中的静态变量分配内存空间</li>
<li>解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址</li>
<li>初始化：对静态变量和静态代码块执行初始化工作</li>
</ol>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401110312.jpg" alt="QQ截图20200401110302"></p>
<h2 id="Jvm常用调优工具"><a href="#Jvm常用调优工具" class="headerlink" title="Jvm常用调优工具"></a>Jvm常用调优工具</h2><p>JDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 jconsole 和 jvisualvm 这两款视图监控工具</p>
<ol>
<li>jconsole：用于对 JVM 中的内存、线程和类等进行监控；</li>
<li>jvisualvm：JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等</li>
</ol>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射机制是在运行状态中,对于任意一个类,都能够知道这个类的所有方法和属性,对任意一个对象,都能够条用它的任何方法和属性,动态获取动态条用</p>
<p>forName  执行 static代码块</p>
<h2 id="常用Jvm调优参数"><a href="#常用Jvm调优参数" class="headerlink" title="常用Jvm调优参数"></a>常用Jvm调优参数</h2><blockquote>
<p><strong>（1）-Xms20M</strong></p>
<p>表示设置JVM启动内存的最小值为20M，必须以M为单位</p>
<p><strong>（2）-Xmx20M</strong></p>
<p>表示设置JVM启动内存的最大值为20M，必须以M为单位。将-Xmx和-Xms设置为一样可以避免JVM内存自动扩展。大的项目-Xmx和-Xms一般都要设置到10G、20G甚至还要高</p>
<p><strong>（3）-verbose:gc</strong></p>
<p>表示输出虚拟机中GC的详细情况</p>
<p><strong>（4）-Xss128k</strong></p>
<p>表示可以设置虚拟机栈的大小为128k</p>
<p><strong>（5）-Xoss128k</strong></p>
<p>表示设置本地方法栈的大小为128k。不过HotSpot并不区分虚拟机栈和本地方法栈，因此对于HotSpot来说这个参数是无效的</p>
<p><strong>（6）-XX:PermSize&#x3D;10M</strong></p>
<p>表示JVM初始分配的永久代（方法区）的容量，必须以M为单位</p>
<p><strong>（7）-XX:MaxPermSize&#x3D;10M</strong></p>
<p>表示JVM允许分配的永久代（方法区）的最大容量，必须以M为单位，大部分情况下这个参数默认为64M</p>
<p><strong>（8）-Xnoclassgc</strong></p>
<p>表示关闭JVM对类的垃圾回收</p>
<p><strong>（9）-XX:+TraceClassLoading</strong></p>
<p>表示查看类的加载信息</p>
<p><strong>（10）-XX:+TraceClassUnLoading</strong></p>
<p>表示查看类的卸载信息</p>
<p><strong>（11）-XX:NewRatio&#x3D;4</strong></p>
<p>表示设置 年轻代（包括Eden和两个Survivor区）&#x2F;老年代 的大小比值为1：4，这意味着年轻代占整个堆的1&#x2F;5</p>
<p>**（12）-XX:SurvivorRatio&#x3D;**8</p>
<p>表示设置2个Survivor区：1个Eden区的大小比值为2:8，这意味着Survivor区占整个年轻代的1&#x2F;5，这个参数默认为8</p>
<p><strong>（13）-Xmn20M</strong></p>
<p>表示设置年轻代的大小为20M</p>
<p><strong>（14）-XX:+HeapDumpOnOutOfMemoryError</strong></p>
<p>表示可以让虚拟机在出现内存溢出异常时Dump出当前的堆内存转储快照</p>
<p><strong>（15）-XX:+UseG1GC</strong></p>
<p>表示让JVM使用G1垃圾收集器</p>
<p><strong>（16）-XX:+PrintGCDetails</strong></p>
<p>表示在控制台上打印出GC具体细节</p>
<p><strong>（17）-XX:+PrintGC</strong></p>
<p>表示在控制台上打印出GC信息</p>
<p><strong>（18）-XX:PretenureSizeThreshold&#x3D;3145728</strong></p>
<p>表示对象大于3145728（3M）时直接进入老年代分配，这里只能以字节作为单位</p>
<p><strong>（19）-XX:MaxTenuringThreshold&#x3D;1</strong></p>
<p>表示对象年龄大于1，自动进入老年代,如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象在年轻代的存活时间，增加在年轻代被回收的概率。</p>
<p><strong>（20）-XX:CompileThreshold&#x3D;1000</strong></p>
<p>表示一个方法被调用1000次之后，会被认为是热点代码，并触发即时编译</p>
<p><strong>（21）-XX:+PrintHeapAtGC</strong></p>
<p>表示可以看到每次GC前后堆内存布局</p>
<p><strong>（22）-XX:+PrintTLAB</strong></p>
<p>表示可以看到TLAB的使用情况</p>
<p><strong>（23）-XX:+UseSpining</strong></p>
<p>开启自旋锁</p>
<p><strong>（24）-XX:PreBlockSpin</strong></p>
<p>更改自旋锁的自旋次数，使用这个参数必须先开启自旋锁</p>
<p><strong>（25）-XX:+UseSerialGC</strong></p>
<p>表示使用jvm的串行垃圾回收机制，该机制适用于丹cpu的环境下</p>
<p><strong>（26）-XX:+UseParallelGC</strong></p>
<p>表示使用jvm的并行垃圾回收机制，该机制适合用于多cpu机制，同时对响应时间无强硬要求的环境下，使用-XX:ParallelGCThreads&#x3D;<N>设置并行垃圾回收的线程数，此值可以设置与机器处理器数量相等。</p>
<p><strong>（27）-XX:+UseParallelOldGC</strong></p>
<p>表示年老代使用并行的垃圾回收机制</p>
<p><strong>（28）-XX:+UseConcMarkSweepGC</strong></p>
<p>表示使用并发模式的垃圾回收机制，该模式适用于对响应时间要求高，具有多cpu的环境下</p>
<p> <strong>（29）-XX:MaxGCPauseMillis&#x3D;100</strong></p>
<p>设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。</p>
<p><strong>（30）-XX:+UseAdaptiveSizePolicy</strong></p>
<p>设置此选项后，并行收集器会自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低响应时间或者收集频率等，此值建议使用并行收集器时，一直打开</p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>LDAP服务的docker安装使用</title>
    <url>/2021/01/12/LDAP%E6%9C%8D%E5%8A%A1%E7%9A%84docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="LDAP服务的docker安装使用"><a href="#LDAP服务的docker安装使用" class="headerlink" title="LDAP服务的docker安装使用"></a>LDAP服务的docker安装使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并进入映射目录  </span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/ldap &amp;&amp; <span class="built_in">cd</span> /usr/local/ldap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run \</span><br><span class="line">-d \</span><br><span class="line">-p 389:389 \</span><br><span class="line">-p 636:636 \</span><br><span class="line">-v /usr/local/ldap:/usr/local/ldap \</span><br><span class="line">--name ldap \</span><br><span class="line">osixia/openldap:1.3.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的配置 可修改  </span></span><br><span class="line">dn dc=example,dc=org</span><br><span class="line">admin admin,dc=example,dc=org</span><br><span class="line">password admin</span><br></pre></td></tr></table></figure>

<h5 id="验证安装的LDAP服务是否可用"><a href="#验证安装的LDAP服务是否可用" class="headerlink" title="验证安装的LDAP服务是否可用"></a>验证安装的LDAP服务是否可用</h5><blockquote>
<p>主要是admin的用户名和密码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ldap ldapsearch -x -H ldap://localhost:389 -b dc=example,dc=org -D <span class="string">&quot;cn=admin,dc=example,dc=org&quot;</span> -w admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------&gt;   返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extended LDIF</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LDAPv3</span></span><br><span class="line"><span class="comment"># base &lt;dc=example,dc=org&gt; with scope subtree</span></span><br><span class="line"><span class="comment"># filter: (objectclass=*)</span></span><br><span class="line"><span class="comment"># requesting: ALL</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example.org</span></span><br><span class="line">dn: dc=example,dc=org</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organization</span><br><span class="line">o: Example Inc.</span><br><span class="line">dc: example</span><br><span class="line"></span><br><span class="line"><span class="comment"># admin, example.org</span></span><br><span class="line">dn: cn=admin,dc=example,dc=org</span><br><span class="line">objectClass: simpleSecurityObject</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: admin</span><br><span class="line">description: LDAP administrator</span><br><span class="line">userPassword:: e1NTSEF9SzNrZCtzdjZIY3NLRWdQZVd0VGZITUlXVFVlUUhjaFE=</span><br><span class="line"></span><br><span class="line"><span class="comment"># search result</span></span><br><span class="line">search: 2</span><br><span class="line">result: 0 Success</span><br><span class="line"></span><br><span class="line"><span class="comment"># numResponses: 3</span></span><br><span class="line"><span class="comment"># numEntries: 2</span></span><br></pre></td></tr></table></figure>

<h5 id="搭建-phpLDAPadmin"><a href="#搭建-phpLDAPadmin" class="headerlink" title="搭建 phpLDAPadmin"></a>搭建 phpLDAPadmin</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">-p 8081:80 \</span><br><span class="line">--<span class="built_in">link</span> ldap \</span><br><span class="line">--name suiyue_pla \</span><br><span class="line">--<span class="built_in">env</span> PHPLDAPADMIN_HTTPS=<span class="literal">false</span> \</span><br><span class="line">--<span class="built_in">env</span> PHPLDAPADMIN_LDAP_HOSTS=ldap \</span><br><span class="line">--restart always \</span><br><span class="line">--detach osixia/phpldapadmin</span><br></pre></td></tr></table></figure>

<h5 id="浏览器访问-8081端口"><a href="#浏览器访问-8081端口" class="headerlink" title="浏览器访问 8081端口"></a>浏览器访问 8081端口</h5><blockquote>
<p>用户名:	cn&#x3D;admin,dc&#x3D;example,dc&#x3D;org</p>
<p>密码:	admin</p>
</blockquote>
<h5 id="接下来需要在界面中配置organization-x2F-user"><a href="#接下来需要在界面中配置organization-x2F-user" class="headerlink" title="接下来需要在界面中配置organization &#x2F; user"></a>接下来需要在界面中配置organization &#x2F; user</h5><ul>
<li>create a child entry</li>
<li>posix group 是组织     user  account 是用户    够用了</li>
<li>用户登录使用用户名  密码即可登录</li>
</ul>
<h2 id="LDAP-名词解释"><a href="#LDAP-名词解释" class="headerlink" title="LDAP 名词解释"></a>LDAP 名词解释</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dn - CN, OU, DC 都是 LDAP 连接服务器的端字符串中的区别名称（DN, distinguished   name） </span><br><span class="line">o – organization（组织-公司）</span><br><span class="line">ou – organization unit（组织单元-部门）</span><br><span class="line">c - countryName（国家）</span><br><span class="line">dc - domainComponent（域名）</span><br><span class="line">sn – suer name（真实名称）</span><br><span class="line">cn - common name（常用名称</span><br></pre></td></tr></table></figure>

<h2 id="Gitea配置"><a href="#Gitea配置" class="headerlink" title="Gitea配置"></a>Gitea配置</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 配置认证源</span><br><span class="line">2. 认证类型 LDAP (via BindDN)</span><br><span class="line">3. 安全协议  Unencrypted</span><br><span class="line">4. 主机端口  :       xxx:389</span><br><span class="line">5. 绑定一个可以获取所有用户组织的的角色账号</span><br><span class="line">6. **用户搜索基准  cn=nancal,dc=example,dc=org**</span><br><span class="line">7. **用户过滤规则    (&amp;(objectClass=posixAccount)(uid=%s))**</span><br><span class="line">8. 电子邮箱属性    Email</span><br></pre></td></tr></table></figure>

<h3 id="Jenkins配置-不能和数据库用户共存-使用之后之前的用户不能登录"><a href="#Jenkins配置-不能和数据库用户共存-使用之后之前的用户不能登录" class="headerlink" title="Jenkins配置  不能和数据库用户共存(使用之后之前的用户不能登录)"></a>Jenkins配置  不能和数据库用户共存(使用之后之前的用户不能登录)</h3> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Server :       ldap://xxx.xx:389</span><br><span class="line">2. user  search base :      cn=nancal,dc=example,dc=org</span><br><span class="line">3. user  search  filter :   uid=&#123;0&#125;</span><br><span class="line">4. group search base :   cn=nancal,dc=example,dc=org</span><br><span class="line">5. Manager DN / Password :  管理员的用户名密码</span><br><span class="line">6. Test LDAP setting</span><br></pre></td></tr></table></figure>

<h3 id="Harbor-可以配置"><a href="#Harbor-可以配置" class="headerlink" title="Harbor  可以配置"></a>Harbor  可以配置</h3><blockquote>
<p>要开启Harbor的ldap认证功能就必须要在安装完，并启动服务后变更一下认证源。如果没有变更，就添加了用户就没有办法去修改配置变更了</p>
</blockquote>
<h6 id="Grafana-修改配置文件"><a href="#Grafana-修改配置文件" class="headerlink" title="Grafana  修改配置文件"></a>Grafana  修改配置文件</h6><h6 id="Yapi-需要修改docker-启动配置"><a href="#Yapi-需要修改docker-启动配置" class="headerlink" title="Yapi 需要修改docker 启动配置"></a>Yapi 需要修改docker 启动配置</h6><h6 id="Kuboard-v3版本-支持-我们使用的是v2版本"><a href="#Kuboard-v3版本-支持-我们使用的是v2版本" class="headerlink" title="Kuboard v3版本 支持,我们使用的是v2版本"></a>Kuboard v3版本 支持,我们使用的是v2版本</h6><h6 id="Zentao-需要专业版支持-开源版插件支持到7-3版本"><a href="#Zentao-需要专业版支持-开源版插件支持到7-3版本" class="headerlink" title="Zentao 需要专业版支持 , 开源版插件支持到7.3版本"></a>Zentao 需要专业版支持 , 开源版插件支持到7.3版本</h6><h6 id="Sonarqube-8-0版本后不支持"><a href="#Sonarqube-8-0版本后不支持" class="headerlink" title="Sonarqube 8.0版本后不支持"></a>Sonarqube 8.0版本后不支持</h6><hr>
<h2 id="Java的LDAP连接与关键接口"><a href="#Java的LDAP连接与关键接口" class="headerlink" title="Java的LDAP连接与关键接口"></a>Java的LDAP连接与关键接口</h2><h5 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--LDAP--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-ldap&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="application-yml-文件配置"><a href="#application-yml-文件配置" class="headerlink" title="application.yml 文件配置"></a>application.yml 文件配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">ldap:</span></span><br><span class="line">    <span class="attr">urls:</span> <span class="string">ldap://47.xxx.37.xx:389</span></span><br><span class="line">    <span class="attr">base:</span> <span class="string">dc=example,dc=org</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">cn=admin,dc=example,dc=org</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure>

<h5 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 实体</span></span><br><span class="line"><span class="meta">@Cn(<span class="string">&quot;LDAP用户&quot;</span>)</span></span><br><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@DbEntityGroup(<span class="string">&quot;corp&quot;</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">LDAPUser</span>(</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;用户姓名&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;cn&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> userName: String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;真实姓名&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;sn&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> realName: String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;密码&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;userpassword&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> userPassword:String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;uidnumber&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;uidnumber&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> uidnumber:String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;gidnumber&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;gidnumber&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> gidnumber:String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;uid&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;uid&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> uid:String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;homedirectory&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;homedirectory&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> homedirectory:String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可选信息</span></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;性别&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;sex&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> sex: String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;手机号&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;mobile&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> mobile: String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cn(<span class="string">&quot;邮件&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Attribute(name = <span class="string">&quot;email&quot;</span>)</span></span><br><span class="line">    <span class="keyword">var</span> email: String = <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">) : BaseEntity(), IMongoDocument</span><br></pre></td></tr></table></figure>

<h5 id="CRUD-等简单的接口"><a href="#CRUD-等简单的接口" class="headerlink" title="CRUD 等简单的接口"></a>CRUD 等简单的接口</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xx.web.corp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by CodeGenerator @2020-04-24 11:17:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(description = <span class="string">&quot;Corporation&quot;</span>, tags = arrayOf(<span class="string">&quot;Corporation&quot;</span>))</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@JsonpMapping(<span class="string">&quot;/open/ldap&quot;</span>)</span></span><br><span class="line"><span class="meta">@OpenAction</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LDAP_Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="string">&quot;\$&#123;spring.ldap.base&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> base: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="string">&quot;\$&#123;spring.ldap.urls&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> url: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="string">&quot;\$&#123;spring.ldap.username&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> dn: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="string">&quot;\$&#123;spring.ldap.password&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pwd: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">var</span> ldapTemplate:LdapTemplate?=<span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonpMapping(<span class="string">&quot;/allUserName&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllUserName</span><span class="params">()</span></span>:Any&#123;</span><br><span class="line">        <span class="keyword">val</span> res = ldapTemplate!!.search(</span><br><span class="line">            query().<span class="keyword">where</span>(<span class="string">&quot;objectclass&quot;</span>).`<span class="keyword">is</span>`(<span class="string">&quot;person&quot;</span>),</span><br><span class="line">            AttributesMapper &#123; attrs: Attributes -&gt;</span><br><span class="line">                attrs[<span class="string">&quot;cn&quot;</span>].<span class="keyword">get</span>() <span class="keyword">as</span> String</span><br><span class="line">            &#125; <span class="keyword">as</span> AttributesMapper&lt;*&gt;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonpMapping(<span class="string">&quot;/allUser&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUser</span><span class="params">()</span></span>: ApiResult&lt;List&lt;LDAPUser&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = ldapTemplate!!.search(</span><br><span class="line">            query()</span><br><span class="line">                .<span class="keyword">where</span>(<span class="string">&quot;objectclass&quot;</span>).`<span class="keyword">is</span>`(<span class="string">&quot;person&quot;</span>), LdapUserMapper()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ApiResult.of(<span class="keyword">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在ldap中，有两个&quot;查询&quot;概念，search和lookup。search是ldaptemplate对每一个entry进行查询，lookup是通过DN直接找到某个条目。</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据DN查询指定人员信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dn    e.g:   如果用户在 cn=nancal,dc=example,dc=org下</span></span><br><span class="line"><span class="comment">     *                      具体到某一个人   需要传入的是  cn=c y,cn=nancal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonpMapping(<span class="string">&quot;/userByDn&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findPersonWithDn</span><span class="params">(dn: <span class="type">String</span>)</span></span>:ApiResult&lt;LDAPUser&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.of(ldapTemplate!!.lookup(dn, LdapUserMapper()))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonpMapping(<span class="string">&quot;/checkPassword&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">check</span><span class="params">(username:<span class="type">String</span>,password:<span class="type">String</span>)</span></span>:JsonResult&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> filter = AndFilter()</span><br><span class="line">        filter.and(EqualsFilter(<span class="string">&quot;objectclass&quot;</span>, <span class="string">&quot;person&quot;</span>)).and(EqualsFilter(<span class="string">&quot;cn&quot;</span>, username))</span><br><span class="line">        <span class="keyword">val</span> flag = ldapTemplate!!.authenticate(DistinguishedName.EMPTY_PATH, filter.toString(), password)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            println(<span class="string">&quot;用户:<span class="variable">$username</span> 验证密码通过&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> JsonResult()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResult(<span class="string">&quot;密码错误,请重新输入&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonpMapping(<span class="string">&quot;/user/add&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addUser</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@JsonModel</span> user:<span class="type">LDAPUser</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dept:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>:JsonResult&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> ocAttr = BasicAttribute(<span class="string">&quot;objectclass&quot;</span>)</span><br><span class="line"></span><br><span class="line">        ocAttr.add(<span class="string">&quot;top&quot;</span>);</span><br><span class="line">        ocAttr.add(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        ocAttr.add(<span class="string">&quot;inetOrgPerson&quot;</span>);</span><br><span class="line">        ocAttr.add(<span class="string">&quot;organizationalPerson&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> attrs: Attributes = BasicAttributes()</span><br><span class="line"></span><br><span class="line">        attrs.put(ocAttr);</span><br><span class="line">        attrs.put(<span class="string">&quot;cn&quot;</span>, user.userName);</span><br><span class="line">        attrs.put(<span class="string">&quot;sn&quot;</span>, user.realName);</span><br><span class="line">        attrs.put(<span class="string">&quot;displayName&quot;</span>, user.userName);</span><br><span class="line">        attrs.put(<span class="string">&quot;mail&quot;</span>, user.email);</span><br><span class="line">        attrs.put(<span class="string">&quot;mobile&quot;</span>, user.mobile);</span><br><span class="line">        attrs.put(<span class="string">&quot;userPassword&quot;</span>, user.userPassword)</span><br><span class="line"></span><br><span class="line">        ldapTemplate!!.bind(<span class="string">&quot;cn=<span class="subst">$&#123;user.userName&#125;</span>,cn=<span class="variable">$dept</span>&quot;</span>,<span class="literal">null</span>,attrs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//username 不可修改</span></span><br><span class="line">    <span class="meta">@JsonpMapping(<span class="string">&quot;/user/update&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@JsonModel</span> user:<span class="type">LDAPUser</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dept:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>:JsonResult&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ldapTemplate!!.modifyAttributes(<span class="string">&quot;cn=<span class="subst">$&#123;user.userName&#125;</span>,cn=<span class="variable">$dept</span>&quot;</span>, arrayOf(</span><br><span class="line">                ModificationItem(DirContext.REPLACE_ATTRIBUTE, BasicAttribute(<span class="string">&quot;sn&quot;</span>, user.realName)),</span><br><span class="line">                ModificationItem(DirContext.REPLACE_ATTRIBUTE, BasicAttribute(<span class="string">&quot;mail&quot;</span>, user.email)),</span><br><span class="line">                ModificationItem(DirContext.REPLACE_ATTRIBUTE, BasicAttribute(<span class="string">&quot;mobile&quot;</span>, user.mobile)),</span><br><span class="line">                ModificationItem(DirContext.REPLACE_ATTRIBUTE, BasicAttribute(<span class="string">&quot;userPassword&quot;</span>, user.userPassword))</span><br><span class="line">            ))</span><br><span class="line">        &#125;<span class="keyword">catch</span> (e:Exception)&#123;</span><br><span class="line">            <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;修改失败,请重试: <span class="subst">$&#123;e.printStackTrace()&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonpMapping(<span class="string">&quot;/user/delete&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        name: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        dept:<span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>:JsonResult&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ldapTemplate!!.unbind(<span class="string">&quot;cn=<span class="subst">$&#123;name&#125;</span>,cn=<span class="variable">$dept</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;删除用户失败,请确认后重试&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LdapUserMapper</span> : <span class="type">AttributesMapper</span>&lt;<span class="type">LDAPUser</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Throws(NamingException::class)</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mapFromAttributes</span><span class="params">(attrs: <span class="type">Attributes</span>)</span></span>: LDAPUser &#123;</span><br><span class="line">            <span class="keyword">val</span> ldapUser = LDAPUser()</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                ldapUser.userName = attrs[<span class="string">&quot;cn&quot;</span>].<span class="keyword">get</span>() <span class="keyword">as</span> String</span><br><span class="line">                ldapUser.realName = attrs[<span class="string">&quot;sn&quot;</span>].<span class="keyword">get</span>() <span class="keyword">as</span> String</span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> bytes = attrs[<span class="string">&quot;userPassword&quot;</span>].<span class="keyword">get</span>() <span class="keyword">as</span> ByteArray</span><br><span class="line"></span><br><span class="line">                ldapUser.userPassword = String(bytes).replace(<span class="string">&quot;&#123;MD5&#125;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                ldapUser.gidnumber = attrs[<span class="string">&quot;gidnumber&quot;</span>].<span class="keyword">get</span>() <span class="keyword">as</span> String</span><br><span class="line">                ldapUser.uidnumber = attrs[<span class="string">&quot;uidnumber&quot;</span>].<span class="keyword">get</span>() <span class="keyword">as</span> String</span><br><span class="line">                ldapUser.uid = attrs[<span class="string">&quot;uid&quot;</span>].<span class="keyword">get</span>() <span class="keyword">as</span> String</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e:Exception)&#123;</span><br><span class="line">                <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;用户查询错误,请检查对应的dn是否正确&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ldapUser</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="附录-错误码"><a href="#附录-错误码" class="headerlink" title="附录:  (错误码)"></a>附录:  (错误码)</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDAP_SUCCESS = 0 //成功</span><br><span class="line"></span><br><span class="line">LDAP_OPERATIONS_ERROR = 1 //操作错误</span><br><span class="line"></span><br><span class="line">LDAP_PROTOCOL_ERROR = 2 //协议错误</span><br><span class="line"></span><br><span class="line">LDAP_TIME_LIMIT_EXCEEDED = 3 //超过最大时间限制</span><br><span class="line"></span><br><span class="line">LDAP_SIZE_LIMIT_EXCEEDED = 4 //超过最大返回条目数</span><br><span class="line"></span><br><span class="line">LDAP_COMPARE_FALSE = 5 //比较不匹配</span><br><span class="line"></span><br><span class="line">LDAP_COMPARE_TRUE = 6 //比较匹配</span><br><span class="line"></span><br><span class="line">LDAP_AUTH_METHOD_NOT_SUPPORTED = 7 //认证方法未被支持</span><br><span class="line"></span><br><span class="line">LDAP_STRONG_AUTH_REQUIRED = 8 //需要强认证</span><br><span class="line"></span><br><span class="line">LDAP_PARTIAL_RESULTS = 9 //null</span><br><span class="line"></span><br><span class="line">LDAP_REFERRAL = 10 //Referral</span><br><span class="line"></span><br><span class="line">LDAP_ADMIN_LIMIT_EXCEEDED = 11 //超出管理员权限</span><br><span class="line"></span><br><span class="line">LDAP_UNAVAILABLE_CRITICAL_EXTENSION = 12 //Critical扩展无效</span><br><span class="line"></span><br><span class="line">LDAP_CONFIDENTIALITY_REQUIRED = 13 //需要Confidentiality</span><br><span class="line"></span><br><span class="line">LDAP_SASL_BIND_IN_PROGRESS = 14 //需要SASL绑定</span><br><span class="line"></span><br><span class="line">LDAP_NO_SUCH_ATTRIBUTE = 16 //未找到该属性</span><br><span class="line"></span><br><span class="line">LDAP_UNDEFINED_ATTRIBUTE_TYPE = 17 //未定义的属性类型</span><br><span class="line"></span><br><span class="line">LDAP_INAPPROPRIATE_MATCHING = 18 //不适当的匹配</span><br><span class="line"></span><br><span class="line">LDAP_CONSTRAINT_VIOLATION = 19 //约束冲突</span><br><span class="line"></span><br><span class="line">LDAP_ATTRIBUTE_OR_value_EXISTS = 20 //属性或值已存在</span><br><span class="line"></span><br><span class="line">LDAP_INVALID_ATTRIBUTE_SYNTAX = 21 //无效的属性语法</span><br><span class="line"></span><br><span class="line">LDAP_NO_SUCH_OBJECT = 32 //未找到该对象</span><br><span class="line"></span><br><span class="line">LDAP_ALIAS_PROBLEM = 33 //别名有问题</span><br><span class="line"></span><br><span class="line">LDAP_INVALID_DN_SYNTAX = 34 //无效的DN语法</span><br><span class="line"></span><br><span class="line">LDAP_IS_LEAF = 35 //null</span><br><span class="line"></span><br><span class="line">LDAP_ALIAS_DEREFERENCING_PROBLEM = 36 //Dereference别名有问题</span><br><span class="line"></span><br><span class="line">LDAP_INAPPROPRIATE_AUTHENTICATION = 48 //不适当的认证</span><br><span class="line"></span><br><span class="line">LDAP_INVALID_CREDENTIALS = 49 //无效的Credential</span><br><span class="line"></span><br><span class="line">LDAP_INSUFFICIENT_ACCESS_RIGHTS = 50 //访问权限不够</span><br><span class="line"></span><br><span class="line">LDAP_BUSY = 51 //遇忙</span><br><span class="line"></span><br><span class="line">LDAP_UNAVAILABLE = 52 //无效</span><br><span class="line"></span><br><span class="line">LDAP_UNWILLING_TO_PERform = 53 //意外问题</span><br><span class="line"></span><br><span class="line">LDAP_LOOP_DETECT = 54 //发现死循环</span><br><span class="line"></span><br><span class="line">LDAP_NAMING_VIOLATION = 64 //命名冲突</span><br><span class="line"></span><br><span class="line">LDAP_OBJECT_CLASS_VIOLATION = 65 //对象类冲突</span><br><span class="line"></span><br><span class="line">LDAP_NOT_ALLOWED_ON_NON_LEAF = 66 //不允许在非叶结点执行此操作</span><br><span class="line"></span><br><span class="line">LDAP_NOT_ALLOWED_ON_RDN = 67 //不允许对RDN执行此操作</span><br><span class="line"></span><br><span class="line">LDAP_ENTRY_ALREADY_EXISTS = 68 //Entry已存在</span><br><span class="line"></span><br><span class="line">LDAP_OBJECT_CLASS_MODS_PROHIBITED = 69 //禁止更改对象类</span><br><span class="line"></span><br><span class="line">LDAP_AFFECTS_MULTIPLE_DSAS = 71 //null</span><br><span class="line"></span><br><span class="line">LDAP_OTHER = 80 //其它</span><br><span class="line"></span><br><span class="line">再来一份十六进制的，大家对照吧。</span><br><span class="line"></span><br><span class="line">下面是winldap.h文件中的定义的十六进制错误码，我给其中的绝大部分加上了从活动目录的书上看的汉语说明，。</span><br><span class="line"></span><br><span class="line">typedef enum</span><br><span class="line"></span><br><span class="line">Unknown macro: &#123;</span><br><span class="line"></span><br><span class="line">LDAP_SUCCESS = 0x00,//操作成功</span><br><span class="line"></span><br><span class="line">LDAP_OPERATIONS_ERROR = 0x01,//一个未指定的错误发生在处理LDAP请求的服务器上</span><br><span class="line"></span><br><span class="line">LDAP_PROTOCOL_ERROR = 0x02,//服务器接受到一个没有正确格式化或顺序出错的包</span><br><span class="line"></span><br><span class="line">LDAP_TIMELIMIT_EXCEEDED = 0x03,//操作上指定的时间限制被超出。这不同于服务器没有及时响应时的客户方检测到的超时错误</span><br><span class="line"></span><br><span class="line">LDAP_SIZELIMIT_EXCEEDED = 0x04,//搜索返回的项数超过了管理限制或请求限制</span><br><span class="line"></span><br><span class="line">LDAP_COMPARE_FALSE = 0x05,//LDAP比较函数(例如ldap_compare())返回FALSE</span><br><span class="line"></span><br><span class="line">LDAP_COMPARE_TRUE = 0x06,//LDAP比较函数(例如ldap_compare())返回TRUE</span><br><span class="line"></span><br><span class="line">LDAP_AUTH_METHOD_NOT_SUPPORTED = 0x07,//绑定(bind)操作中(例如ldap_bind())请求的认证方法不被服务器支持。如果你使用一个非微软LDAP客户与活动目录通信，这种情况可能发生</span><br><span class="line"></span><br><span class="line">LDAP_STRONG_AUTH_REQUIRED = 0x08,//服务器要求一个字符串认证方法而不是一个简单口令</span><br><span class="line"></span><br><span class="line">LDAP_REFERRAL_V2 = 0x09,//搜索结果包含LDAPv2引用或者一个部分结果集</span><br><span class="line"></span><br><span class="line">LDAP_PARTIAL_RESULTS = 0x09,</span><br><span class="line"></span><br><span class="line">LDAP_REFERRAL = 0x0a,//请求操作必须由另一个拥有适当的命名上下文备份的服务器处理</span><br><span class="line"></span><br><span class="line">LDAP_ADMIN_LIMIT_EXCEEDED = 0x0b,//管理限制被超出。例如，搜索操作花费的时间超出了服务器所允许的最大时间</span><br><span class="line"></span><br><span class="line">LDAP_UNAVAILABLE_CRIT_EXTENSION = 0x0c,//客户请求一个LDAP扩展并且指示该扩展是关键的，但是服务器并不支持扩展</span><br><span class="line"></span><br><span class="line">LDAP_CONFIDENTIALITY_REQUIRED = 0x0d,//操作要求某种级别的加密</span><br><span class="line"></span><br><span class="line">LDAP_SASL_BIND_IN_PROGRESS = 0x0e,//当一个SASL绑定(bind)已经在客户处理过程中时，请求一个绑定(bind)操作</span><br><span class="line"></span><br><span class="line">LDAP_NO_SUCH_ATTRIBUTE = 0x10,//客户尝试修改或者删除一个并不存在的项的一个属性</span><br><span class="line"></span><br><span class="line">LDAP_UNDEFINED_TYPE = 0x11,//未定义的类型</span><br><span class="line"></span><br><span class="line">LDAP_INAPPROPRIATE_MATCHING = 0x12,//提供的匹配规则对搜索不合适或者对于属性不合适</span><br><span class="line"></span><br><span class="line">LDAP_CONSTRAINT_VIOLATION = 0x13,//客户请求一个将违背目录中语义约束的操作。一个经常的原因是不合适的改变了模式--例如当添加一个新类时提供了一个重复的OID(对象识别符)</span><br><span class="line"></span><br><span class="line">LDAP_ATTRIBUTE_OR_value_EXISTS = 0x14,//客户尝试添加一个已经存在的属性或值</span><br><span class="line"></span><br><span class="line">LDAP_INVALID_SYNTAX = 0x15,//搜索过滤器的语法无效</span><br><span class="line"></span><br><span class="line">LDAP_NO_SUCH_OBJECT = 0x20,//客户尝试或者删除一个在目录中并不存在的项</span><br><span class="line"></span><br><span class="line">LDAP_ALIAS_PROBLEM = 0x21,//服务器在处理别名时遇到了一个错误</span><br><span class="line"></span><br><span class="line">LDAP_INVALID_DN_SYNTAX = 0x22,//请求中指定的可区别名字的格式无效</span><br><span class="line"></span><br><span class="line">LDAP_IS_LEAF = 0x23,//函数中指定的项是目录树中的一个叶子项</span><br><span class="line"></span><br><span class="line">LDAP_ALIAS_DEREF_PROBLEM = 0x24,//在解除对一个别名的引用时服务器遇到了一个错误。例如，目的项并不存在</span><br><span class="line"></span><br><span class="line">LDAP_INAPPROPRIATE_AUTH = 0x30,//认证级别对于操作不足</span><br><span class="line"></span><br><span class="line">LDAP_INVALID_CREDENTIALS = 0x31,//绑定(bind)请求中提供的证书是无效的--例如一个无效的口令</span><br><span class="line"></span><br><span class="line">LDAP_INSUFFICIENT_RIGHTS = 0x32,//没有执行该操作所需的足够的访问权限</span><br><span class="line"></span><br><span class="line">LDAP_BUSY = 0x33,//服务器太忙碌而无法服务该请求。稍后重新尝试</span><br><span class="line"></span><br><span class="line">LDAP_UNAVAILABLE = 0x34,//目录服务暂不可用。稍后重新尝试</span><br><span class="line"></span><br><span class="line">LDAP_UNWILLING_TO_PERform = 0x35,//由于管理策略约束方面的原因，服务器将不支持该操作--例如，如果在模式修改没有被允许或者没有连接到模式管理器的情况下，试图修改该模式</span><br><span class="line"></span><br><span class="line">LDAP_LOOP_DETECT = 0x36,//在追踪引用的过程中，客户引用到它以前已经引用的服务器</span><br><span class="line"></span><br><span class="line">LDAP_SORT_CONTROL_MISSING = 0x3C,</span><br><span class="line"></span><br><span class="line">LDAP_OFFSET_RANGE_ERROR = 0x3D,</span><br><span class="line"></span><br><span class="line">LDAP_NAMING_VIOLATION = 0x40,//客户指定了一个不正确的对象的可区别名字</span><br><span class="line"></span><br><span class="line">LDAP_OBJECT_CLASS_VIOLATION = 0x41,//操作违背了类定义中定义的语义规则</span><br><span class="line"></span><br><span class="line">LDAP_NOT_ALLOWED_ON_NONLEAF = 0x42,//所请求的操作只可能在一个叶子对象(非容器)上执行</span><br><span class="line"></span><br><span class="line">LDAP_NOT_ALLOWED_ON_RDN = 0x43,//在相对可区别名字上不允许该操作</span><br><span class="line"></span><br><span class="line">LDAP_ALREADY_EXISTS = 0x44,//客户试图添加一个已经存在的对象</span><br><span class="line"></span><br><span class="line">LDAP_NO_OBJECT_CLASS_MODS = 0x45,//客户试图通过改变一个对象的objectClass属性来修改对象的类</span><br><span class="line"></span><br><span class="line">LDAP_RESULTS_TOO_LARGE = 0x46,//搜索操作的结果集太大，服务器无法处理</span><br><span class="line"></span><br><span class="line">LDAP_AFFECTS_MULTIPLE_DSAS = 0x47,//所请求的操作将影响多个DSA--例如，在一个子树包含一个下级引用，该引用指向另一个命名上下文的情况下，删除该子树将影响多个DSA(目录服务器代理)</span><br><span class="line"></span><br><span class="line">LDAP_VIRTUAL_LIST_VIEW_ERROR = 0x4c,</span><br><span class="line"></span><br><span class="line">LDAP_OTHER = 0x50,//发生了一些其他的LDAP错误</span><br><span class="line"></span><br><span class="line">LDAP_SERVER_DOWN = 0x51,//LDAP服务器已关闭</span><br><span class="line"></span><br><span class="line">LDAP_LOCAL_ERROR = 0x52,//客户发生了其他一些未指定的错误</span><br><span class="line"></span><br><span class="line">LDAP_ENCODING_ERROR = 0x53,//在将一个LDAP请求编码为ASN.1的过程中发生了一个错误</span><br><span class="line"></span><br><span class="line">LDAP_DECODING_ERROR = 0x54,//从服务器接受到的ASN.1编码的数据是无效的</span><br><span class="line"></span><br><span class="line">LDAP_TIMEOUT = 0x55,//在指定的时间内服务器不能响应客户</span><br><span class="line"></span><br><span class="line">LDAP_AUTH_UNKNOWN = 0x56,//在绑定(bind)请求中指定了一种未知的认证机制</span><br><span class="line"></span><br><span class="line">LDAP_FILTER_ERROR = 0x57,//搜索过滤器出现了某种错误</span><br><span class="line"></span><br><span class="line">LDAP_USER_CANCELLED = 0x58,//用户取消了操作</span><br><span class="line"></span><br><span class="line">LDAP_PARAM_ERROR = 0x59,//函数中指定的某个参数出现了错误。例如，向一个LDAP API函数传递一个NULL指针，但该函数并不希望这样，在这种情况下就产生该错误</span><br><span class="line"></span><br><span class="line">LDAP_NO_MEMORY = 0x5a,//客户试图分配内存并且失败了</span><br><span class="line"></span><br><span class="line">LDAP_CONNECT_ERROR = 0x5b,//客户试图向服务器建立一个TCP连接并且失败了</span><br><span class="line"></span><br><span class="line">LDAP_NOT_SUPPORTED = 0x5c,//所请求的操作不被这种版本的LDAP协议所支持</span><br><span class="line"></span><br><span class="line">LDAP_NO_RESULTS_RETURNED = 0x5e,//从服务器接受到一个响应，但是它没有包含结果</span><br><span class="line"></span><br><span class="line">LDAP_CONTROL_NOT_FOUND = 0x5d,//从服务器接受到的数据表明有一个LDAP控制出现但是在数据中没有找到一个LDAP控制</span><br><span class="line"></span><br><span class="line">LDAP_MORE_RESULTS_TO_RETURN = 0x5f,//因为有太多的结果，所以客户无法检索</span><br><span class="line"></span><br><span class="line">LDAP_CLIENT_LOOP = 0x60,//在处理引用时客户检测到一个循环</span><br><span class="line"></span><br><span class="line">引用数目超过了限制</span><br><span class="line"></span><br><span class="line">LDAP_REFERRAL_LIMIT_EXCEEDED = 0x61//客户追踪的</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Jsoup下载漫画图片</title>
    <url>/2020/04/15/Jsoup%E4%B8%8B%E8%BD%BD%E6%BC%AB%E7%94%BB%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="消除不受信任的HTML-来防止XSS攻击"><a href="#消除不受信任的HTML-来防止XSS攻击" class="headerlink" title="消除不受信任的HTML (来防止XSS攻击)"></a>消除不受信任的HTML (来防止XSS攻击)</h1><p>昨天晚上突然兴起,用Jsoup去下载了动漫网站的漫画然后保存.</p>
<p>今天去新公司看代码的时候发现的用来防止XSS,</p>
<blockquote>
<p>在做网站的时候，经常会提供用户评论的功能。有些不怀好意的用户，会搞一些脚本到评论内容中，而这些脚本可能会破坏整个页面的行为，更严重的是获取一些机要信息，此时需要清理该HTML，以避免跨站脚本<a href="http://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting</a>攻击（XSS）。</p>
</blockquote>
<ul>
<li><strong>方法</strong></li>
</ul>
<span id="more"></span>

<blockquote>
<p>使用jsoup HTML <code>Cleaner</code> 方法进行清除，但需要指定一个可配置的 <code>Whitelist</code>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">unsafe</span> <span class="operator">=</span> </span><br><span class="line">  <span class="string">&quot;&lt;p&gt;&lt;a href=&#x27;http://example.com/&#x27; onclick=&#x27;stealCookies()&#x27;&gt;Link&lt;/a&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">safe</span> <span class="operator">=</span> Jsoup.clean(unsafe, Whitelist.basic());</span><br><span class="line"><span class="comment">// now: &lt;p&gt;&lt;a href=&quot;http://example.com/&quot; rel=&quot;nofollow&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="回归正题-下载图片"><a href="#回归正题-下载图片" class="headerlink" title="回归正题,下载图片"></a>回归正题,下载图片</h2><p>本来是想用python写的,奈何~</p>
<ul>
<li><p>获取漫画目录,通过发起请求,获取页面目录元素,我返回了一个map,具体页面就是<strong>div-&gt;ul-&gt;a</strong>,获取后我会生成对应的文件夹,以供保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String,String&gt; <span class="title function_">getMulu</span><span class="params">(String address, String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(address),<span class="number">30000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">slimScrollDiv</span> <span class="operator">=</span> document.getElementsByClass(<span class="string">&quot;slimScrollDiv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">ul</span> <span class="operator">=</span> slimScrollDiv.select(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        ul.forEach(it-&gt;&#123;</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">a</span> <span class="operator">=</span> it.getElementsByTag(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            a.forEach(item-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> item.text().replaceAll(<span class="string">&quot;[\\pP\\p&#123;Punct&#125;]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(item.attr(<span class="string">&quot;href&quot;</span>)+<span class="string">&quot;---------&quot;</span> + fileName);</span><br><span class="line">                map.put(item.attr(<span class="string">&quot;href&quot;</span>),fileName);</span><br><span class="line">                <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\manhua&quot;</span>+<span class="string">&quot;\\&quot;</span>+name+<span class="string">&quot;\\&quot;</span>+fileName);</span><br><span class="line">                <span class="keyword">if</span> (!dir.exists()) &#123;<span class="comment">// 判断目录是否存在</span></span><br><span class="line">                    dir.mkdir();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>封装为Map,key就是每一章的link,value是章节名字,由于网站用了<strong>lazy加载</strong>,所以通过循环获取标签下的data-original中的image,然后保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">mindex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> <span class="string">&quot;http://www.xxxxx.top/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> origin +<span class="string">&quot;chapter/&quot;</span>+<span class="string">&quot;717&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取目录,创建文件夹</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = MuluUtils.getMulu(address, name);</span><br><span class="line"></span><br><span class="line">        map.forEach((link,fileName)-&gt;&#123;</span><br><span class="line">            mindex++;</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                document = Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(origin+link),<span class="number">30000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">assert</span> document != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Elements</span> <span class="variable">comiclist</span> <span class="operator">=</span> document.getElementsByClass(<span class="string">&quot;comiclist&quot;</span>);</span><br><span class="line">            <span class="comment">//System.out.println(comiclist.html());</span></span><br><span class="line">            <span class="comment">//获取</span></span><br><span class="line">            comiclist.forEach(it -&gt;&#123;</span><br><span class="line">                <span class="type">Elements</span> <span class="variable">images</span> <span class="operator">=</span> it.getElementsByTag(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">                images.forEach(item -&gt;&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> item.attr(<span class="string">&quot;data-original&quot;</span>);</span><br><span class="line">                    System.out.println(img);</span><br><span class="line"></span><br><span class="line">                    <span class="type">BufferedImage</span> <span class="variable">oneImage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">URL</span> <span class="variable">urls</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(img);</span><br><span class="line">                        <span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection)urls.openConnection();</span><br><span class="line">                        <span class="comment">//设置请求方式为&quot;GET&quot;</span></span><br><span class="line">                        conn.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                        <span class="comment">//超时响应时间为5秒</span></span><br><span class="line">                        conn.setConnectTimeout(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">                        conn.setRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">i</span> <span class="operator">=</span> conn.getInputStream();</span><br><span class="line">                        oneImage = ImageIO.read(i);</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="number">1</span>+images.indexOf(item)+<span class="string">&quot;/&quot;</span>+images.size()+<span class="string">&quot;------&quot;</span>+fileName +<span class="string">&quot;---------进度 : &quot;</span> + mindex + <span class="string">&quot;/&quot;</span>+map.size());</span><br><span class="line">                        ImageIO.write(oneImage, <span class="string">&quot;jpg&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\manhua\\&quot;</span>+name+<span class="string">&quot;\\&quot;</span>+ fileName + <span class="string">&quot;\\&quot;</span>+ images.indexOf(item) +<span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>果然懒才是第一生产力</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux定时任务的使用</title>
    <url>/2021/01/26/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="Linux下使用corntab来执行"><a href="#Linux下使用corntab来执行" class="headerlink" title="Linux下使用corntab来执行"></a>Linux下使用corntab来执行</h4><h5 id="查看所有定时任务"><a href="#查看所有定时任务" class="headerlink" title="查看所有定时任务"></a>查看所有定时任务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -l    </span><br></pre></td></tr></table></figure>

<h5 id="编写定时任务-进入nano-编辑模式"><a href="#编写定时任务-进入nano-编辑模式" class="headerlink" title="编写定时任务 , 进入nano 编辑模式"></a>编写定时任务 , 进入nano 编辑模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<h5 id="编写任务"><a href="#编写任务" class="headerlink" title="编写任务"></a>编写任务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 例如我想执行js  将日志写入log.txt</span><br><span class="line">12 11 * * * node /a/52pojie.js &gt;&gt; /a/log.txt</span><br></pre></td></tr></table></figure>

<h5 id="直接修改文件位置"><a href="#直接修改文件位置" class="headerlink" title="直接修改文件位置"></a>直接修改文件位置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/spool/cron/root    centeos  </span><br><span class="line">/var/spool/cron/crontabs     ubuntu   下的root 文件 </span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MarkDown语法记录</title>
    <url>/2018/06/09/MarkDown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><img src="/uploads/markdown.png" alt="avatar"></p>
<h1 id="一级特大号标题"><a href="#一级特大号标题" class="headerlink" title="一级特大号标题"></a>一级特大号标题</h1><h6 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h6><span id="more"></span>

<h3 id="换行：只需在行末加两个空格键和一个回车键即可换行。"><a href="#换行：只需在行末加两个空格键和一个回车键即可换行。" class="headerlink" title="* 换行：只需在行末加两个空格键和一个回车键即可换行。"></a>* 换行：只需在行末加两个空格键和一个回车键即可换行。</h3><ul>
<li>加粗: <strong>真的变粗了</strong></li>
<li>斜体: <em>感觉快要倒了</em></li>
<li>删除线: <del>删除了</del></li>
<li>底纹: <code>底纹</code>|</li>
</ul>
<p>####无序列表直接在文字前加 「 - 」 或者 「 * 」 即可，有序列表则直接在文字前加 「1.」「2.」「3.」 。符号要和文字之间加上一个字符的空格。</p>
<h5 id="无序的点-看起来不错的样子"><a href="#无序的点-看起来不错的样子" class="headerlink" title="无序的点,看起来不错的样子"></a>无序的点,看起来不错的样子</h5><ul>
<li>1</li>
<li>2<ul>
<li>2.1<ul>
<li>2.1.1</li>
</ul>
</li>
</ul>
</li>
<li>3</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol>
<li>1</li>
<li>2<br> a. 2.1<br> b. 2.2</li>
<li>3</li>
</ol>
<h4 id="引用文本"><a href="#引用文本" class="headerlink" title="引用文本"></a>引用文本</h4><blockquote>
<p>我是引用文本</p>
</blockquote>
<pre><code>我是tab 文本
</code></pre>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="https://promotion.aliyun.com/ntms/act/group/team.html?group=qVlmnyqxVI">阿里云服务器优惠链接</a></p>
<h4 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h4><p>三个「 - 」或「 * 」都可以画出一条水平分割线</p>
<hr>
<hr>
<h4 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h4><ul>
<li>两对「 &#96;&#96;&#96; 」包裹</li>
<li>代码前加四个空格键</li>
<li>代码前加一个 tab 键</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="表格还得自己画"><a href="#表格还得自己画" class="headerlink" title="表格还得自己画?"></a>表格还得自己画?</h4><table>
<thead>
<tr>
<th>Name</th>
<th align="center">Academy</th>
<th align="right">score</th>
</tr>
</thead>
<tbody><tr>
<td>Harry Potter</td>
<td align="center">Gryffindor</td>
<td align="right">90</td>
</tr>
<tr>
<td>Hermione Granger</td>
<td align="center">Gryffindor</td>
<td align="right">100</td>
</tr>
<tr>
<td>Draco Malfoy</td>
<td align="center">Slytherin</td>
<td align="right">90</td>
</tr>
</tbody></table>
<h4 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h4><p>在网页上写文章建议使用直角引号『「」』。       </p>
<hr>
<pre><code>半个汉字的缩进：&amp;ensp;或&amp;#8194;(实现首行缩进需要4个)
一个汉字的缩进：&amp;emsp;或&amp;#8195;(实现首行缩进需要2个)
一个英文字符的缩进：&amp;nbsp;或&amp;#160;(我还是推荐用上面两种) 
</code></pre>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mendix_K8s_部署记录</title>
    <url>/2020/12/30/Mendix-K8s-%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Mendix-K8s-部署记录"><a href="#Mendix-K8s-部署记录" class="headerlink" title="Mendix K8s 部署记录"></a>Mendix K8s 部署记录</h1><h2 id="1-在mendix中生成-mda文件"><a href="#1-在mendix中生成-mda文件" class="headerlink" title="1. 在mendix中生成.mda文件"></a>1. 在mendix中生成.mda文件</h2><ul>
<li>Mendix Studio Pro 中点击 Project–Create Deployment Package</li>
<li>例如，生成了 <code>App.mda</code></li>
<li>将 <code>App.mda</code> 拖入装有docker docker-compose 的 linux 系统中</li>
</ul>
<h2 id="2-Docker-build-制作镜像"><a href="#2-Docker-build-制作镜像" class="headerlink" title="2. Docker build 制作镜像"></a>2. Docker build 制作镜像</h2><ul>
<li><p>提前准备好 <a href="https://github.com/mendix/docker-mendix-buildpack">https://github.com/mendix/docker-mendix-buildpack</a> 发行版本的源码，解压到docker-mendix-buildpack下</p>
</li>
<li><p>在 <code>docker-mendix-buildpack/</code> 下 解压App.mda到docker-mendix-buildpack&#x2F;build&#x2F;目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip /home/yudong/xxx/App.mda -d build/</span><br></pre></td></tr></table></figure></li>
<li><p>执行 docker build 创建镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build \</span><br><span class="line">  --build-arg BUILD_PATH=build \</span><br><span class="line">--build-arg CF_BUILDPACK=v4.14.1 \</span><br><span class="line">-t mendix/mendix-buildpack:v3.0.2 .</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上版本号可以在 .version 文件中找到 请改成合适的版本</p>
</li>
<li><p>在mysql中提前创建数据库，数据库名 mendix</p>
</li>
<li><p>使用docker run命令启动项目 测试镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">-e ADMIN_PASSWORD=Password1! \#超级管理员密码有复杂度要求</span><br><span class="line">-e DATABASE_ENDPOINT=mysql://username:password@databaseurl:port/mendix \</span><br><span class="line">mendix/mendix-buildpack:v3.0.2</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Docker-push-推送镜像"><a href="#Docker-push-推送镜像" class="headerlink" title="Docker push 推送镜像"></a>Docker push 推送镜像</h2><ul>
<li>接下来使用 docker push 推送镜像到镜像管理 harbor 中</li>
<li>首先找到镜像的 image ID</li>
</ul>
<p><code>docker images</code></p>
<ul>
<li>找到如下的镜像<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPOSITORY                        TAG             IMAGE ID       CREATED             SIZE</span><br><span class="line">mendix/mendix-buildpack           v3.0.2          051c03880e88   About an hour ago   602MB</span><br></pre></td></tr></table></figure></li>
<li>记下IMAGE ID 例如 <code>051c03880e88</code></li>
<li>在 harbor 中提前创建好 mendix 项目</li>
<li>命名镜像 定位镜像在 harbor 仓库中的位置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag  051c03880e88  saas-dev.xxx.com:7002/mendix/mendix-buildpack:1.0</span><br></pre></td></tr></table></figure></li>
<li>推送镜像<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push  saas-dev.xxxx.com:7002/mendix/mendix-buildpack:1.0</span><br></pre></td></tr></table></figure></li>
<li>若找不到 <code>saas-dev.xxxx.com</code> 则修改<code>/etc/hosts</code></li>
<li>在文件最下面一行添加<br><code>101.201.249.217 saas-dev.xxxx.com</code></li>
<li>k8s yaml中直接使用<code>saas-dev.xxxx.com:7002/mendix/mendix-buildpack:1.0 </code>作为镜像名</li>
</ul>
<h2 id="3-在k8s中部署应用"><a href="#3-在k8s中部署应用" class="headerlink" title="3. 在k8s中部署应用"></a>3. 在k8s中部署应用</h2><ul>
<li>在k8s集群的master节点机器下，使用 <code>deployment.yaml</code> 直接部署<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment.yaml</span><br></pre></td></tr></table></figure></li>
<li>测试使用可以注释掉 <code>deployment.yaml</code> 中的LICENSE环境变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#- name: LICENSE_ID</span><br><span class="line">#  value: &lt;UUID&gt;</span><br><span class="line">#- name: LICENSE_KEY</span><br><span class="line">#  value: &lt;LICENSE_KEY&gt;</span><br></pre></td></tr></table></figure></li>
<li>正式部署则需要LICENSE ID与KEY 否则只能使用 Trail 试用版</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># deployment.yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: mendix</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mendix</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: mendix</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: mendix</span><br><span class="line">          image: saas-dev.xxxx.com:7002/mendix/mendix-buildpack:1.0</span><br><span class="line">          env:</span><br><span class="line">            - name: ADMIN_PASSWORD</span><br><span class="line">              value: Password1!</span><br><span class="line">            - name: DATABASE_ENDPOINT</span><br><span class="line">              value: mysql://root:1234.5678@mariadb:3306/mendix</span><br><span class="line">            #- name: LICENSE_ID</span><br><span class="line">            #  value: &lt;UUID&gt;</span><br><span class="line">            #- name: LICENSE_KEY</span><br><span class="line">            #  value: &lt;LICENSE_KEY&gt;</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8080</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: mendix</span><br><span class="line">              mountPath: /data</span><br><span class="line">      volumes:</span><br><span class="line">        - name: mendix</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /mnt/k8s/mendix</span><br><span class="line">            type: DirectoryOrCreate</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mendix</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - name: web</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 8080</span><br><span class="line">      targetPort: 8080</span><br><span class="line">      nodePort: 31038</span><br><span class="line">  selector:</span><br><span class="line">    app: mendix</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Mongo的explain</title>
    <url>/2018/09/13/Mongo%E7%9A%84explain/</url>
    <content><![CDATA[<p><img src="/uploads/mongodb.jpg" alt="avatar"></p>
<h4 id="为了优化数据库的查询，首先了解下mongo的explain"><a href="#为了优化数据库的查询，首先了解下mongo的explain" class="headerlink" title="为了优化数据库的查询，首先了解下mongo的explain()"></a>为了优化数据库的查询，首先了解下mongo的explain()</h4><h5 id="进行一条普通的查询去了解具体的内容"><a href="#进行一条普通的查询去了解具体的内容" class="headerlink" title="进行一条普通的查询去了解具体的内容"></a>进行一条普通的查询去了解具体的内容</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;qRCodeInfo&#x27;).find(&#123;code:&#x27;u4vsw7956rz&#x27;&#125;).explain(&#x27;executionStats&#x27;)</span><br></pre></td></tr></table></figure>
<h4 id="stage-包含的计划"><a href="#stage-包含的计划" class="headerlink" title="stage 包含的计划"></a>stage 包含的计划</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COLLSCAN：全表扫描</span><br><span class="line">IXSCAN：索引扫描</span><br><span class="line">FETCH：根据索引去检索指定document</span><br><span class="line">SHARD_MERGE：将各个分片返回数据进行merge</span><br><span class="line">SORT：表明在内存中进行了排序</span><br><span class="line">LIMIT：使用limit限制返回数</span><br><span class="line">SKIP：使用skip进行跳过</span><br><span class="line">IDHACK：针对_id进行查询</span><br><span class="line">SHARDING_FILTER：通过mongos对分片数据进行查询</span><br><span class="line">COUNT：利用db.coll.explain().count()之类进行count运算</span><br><span class="line">COUNTSCAN：count不使用Index进行count时的stage返回</span><br><span class="line">COUNT_SCAN：count使用了Index进行count时的stage返回</span><br><span class="line">SUBPLA：未使用到索引的$or查询的stage返回</span><br><span class="line">TEXT：使用全文索引进行查询时候的stage返回</span><br><span class="line">PROJECTION：限定返回字段时候stage的返回</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="尽可能的引用"><a href="#尽可能的引用" class="headerlink" title="尽可能的引用"></a>尽可能的引用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fetch+IDHACK</span><br><span class="line">Fetch+ixscan</span><br><span class="line">Limit+（Fetch+ixscan）</span><br><span class="line">PROJECTION+ixscan</span><br><span class="line">SHARDING_FITER+ixscan</span><br><span class="line">COUNT_SCAN</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 1 */</span><br><span class="line">&#123;</span><br><span class="line">    &quot;queryPlanner&quot; : &#123;</span><br><span class="line">        &quot;plannerVersion&quot; : 1,</span><br><span class="line">        &quot;namespace&quot; : &quot;pzx_online.qRCodeInfo&quot;,        //query所查询的表</span><br><span class="line">        &quot;indexFilterSet&quot; : false,                      //是否使用到了索引来过滤</span><br><span class="line">        &quot;parsedQuery&quot; : &#123;</span><br><span class="line">            &quot;code&quot; : &#123;</span><br><span class="line">                &quot;$eq&quot; : &quot;u4vsw7956rz&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;winningPlan&quot; : &#123;              //最佳的执行计划</span><br><span class="line">            &quot;stage&quot; : &quot;FETCH&quot;, //最优执行计划的stage，这里返回是FETCH，通过索引</span><br><span class="line">            &quot;inputStage&quot; : &#123; //MongoDB将计划表示为 阶段树，可以有一个inputStage或者多个，顺序执行</span><br><span class="line">                &quot;stage&quot; : &quot;IXSCAN&quot;,         //IXSCAN，表示进行的是执行了索引查询</span><br><span class="line">                &quot;keyPattern&quot; : &#123;        </span><br><span class="line">                    &quot;code&quot; : 1.0    //所扫描的index内容   </span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;indexName&quot; : &quot;index_code&quot;,     //索引名称</span><br><span class="line">                &quot;isMultiKey&quot; : false,  //此处返回是false，如果索引建立在array上，此处将是true</span><br><span class="line">                &quot;multiKeyPaths&quot; : &#123;</span><br><span class="line">                    &quot;code&quot; : []</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;isUnique&quot; : true,</span><br><span class="line">                &quot;isSparse&quot; : false,</span><br><span class="line">                &quot;isPartial&quot; : false,</span><br><span class="line">                &quot;indexVersion&quot; : 2,</span><br><span class="line">                &quot;direction&quot; : &quot;forward&quot;,        //查询正逆序</span><br><span class="line">                &quot;indexBounds&quot; : &#123;</span><br><span class="line">                    &quot;code&quot; : [//扫描的索引范围,默认[Max, Min]，直接定位到chunck(分区)中查找</span><br><span class="line">                        &quot;[\&quot;u4vsw7956rz\&quot;, \&quot;u4vsw7956rz\&quot;]&quot; </span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;rejectedPlans&quot; : []   //其他执行计划（非最优而被查询优化器reject的）的详细返回</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;executionStats&quot; : &#123;             //执行计划相关统计信息</span><br><span class="line">        &quot;executionSuccess&quot; : true,      //执行成功的状态</span><br><span class="line">        &quot;nReturned&quot; : 1,                //返回结果集数目</span><br><span class="line">        &quot;executionTimeMillis&quot; : 0,      //执行所需的时间,毫秒</span><br><span class="line">        &quot;totalKeysExamined&quot; : 1,        //索引检查的时间</span><br><span class="line">        &quot;totalDocsExamined&quot; : 1,        //检查文档总数</span><br><span class="line">        &quot;executionStages&quot; : &#123;    //理想nReturned=totalKeysExamined=totalDocsExamined</span><br><span class="line">            &quot;stage&quot; : &quot;FETCH&quot;,          //根据索引去检索文档 </span><br><span class="line">            &quot;nReturned&quot; : 1,</span><br><span class="line">            &quot;executionTimeMillisEstimate&quot; : 0,//根据index去检索document获得n条数据的时间。</span><br><span class="line">            &quot;works&quot; : 2,            //工作单元数，一个查询会被派生为一些小的工作单元</span><br><span class="line">            &quot;advanced&quot; : 1,          //优先返回的结果数目</span><br><span class="line">            &quot;needTime&quot; : 0,        </span><br><span class="line">            &quot;needYield&quot; : 0,</span><br><span class="line">            &quot;saveState&quot; : 0,</span><br><span class="line">            &quot;restoreState&quot; : 0,</span><br><span class="line">            &quot;isEOF&quot; : 1,</span><br><span class="line">            &quot;invalidates&quot; : 0,</span><br><span class="line">            &quot;docsExamined&quot; : 1,</span><br><span class="line">            &quot;alreadyHasObj&quot; : 0,</span><br><span class="line">            &quot;inputStage&quot; : &#123;</span><br><span class="line">                &quot;stage&quot; : &quot;IXSCAN&quot;,         //索引扫描</span><br><span class="line">                &quot;nReturned&quot; : 1,</span><br><span class="line">                &quot;executionTimeMillisEstimate&quot; : 0,</span><br><span class="line">                &quot;works&quot; : 2,</span><br><span class="line">                &quot;advanced&quot; : 1,</span><br><span class="line">                &quot;needTime&quot; : 0,</span><br><span class="line">                &quot;needYield&quot; : 0,</span><br><span class="line">                &quot;saveState&quot; : 0,</span><br><span class="line">                &quot;restoreState&quot; : 0,</span><br><span class="line">                &quot;isEOF&quot; : 1,</span><br><span class="line">                &quot;invalidates&quot; : 0,</span><br><span class="line">                &quot;keyPattern&quot; : &#123;</span><br><span class="line">                    &quot;code&quot; : 1.0</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;indexName&quot; : &quot;index_code&quot;,</span><br><span class="line">                &quot;isMultiKey&quot; : false,</span><br><span class="line">                &quot;multiKeyPaths&quot; : &#123;</span><br><span class="line">                    &quot;code&quot; : []</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;isUnique&quot; : true,</span><br><span class="line">                &quot;isSparse&quot; : false,</span><br><span class="line">                &quot;isPartial&quot; : false,</span><br><span class="line">                &quot;indexVersion&quot; : 2,</span><br><span class="line">                &quot;direction&quot; : &quot;forward&quot;,</span><br><span class="line">                &quot;indexBounds&quot; : &#123;</span><br><span class="line">                    &quot;code&quot; : [ </span><br><span class="line">                        &quot;[\&quot;u4vsw7956rz\&quot;, \&quot;u4vsw7956rz\&quot;]&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;keysExamined&quot; : 1,</span><br><span class="line">                &quot;seeks&quot; : 1,</span><br><span class="line">                &quot;dupsTested&quot; : 0,</span><br><span class="line">                &quot;dupsDropped&quot; : 0,</span><br><span class="line">                &quot;seenInvalidated&quot; : 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;serverInfo&quot; : &#123;         //服务器信息，包括主机名，端口，版本等。</span><br><span class="line">        &quot;host&quot; : &quot;jwd-web&quot;,</span><br><span class="line">        &quot;port&quot; : 27717,</span><br><span class="line">        &quot;version&quot; : &quot;3.4.14&quot;,</span><br><span class="line">        &quot;gitVersion&quot; : &quot;fd954412dfc10e4d1e3e2dd4fac040f8b476b268&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ok&quot; : 1.0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#### 接下来继续寻找runcommand的优化</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>学习记录</tag>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus实用记录</title>
    <url>/2020/04/17/MyBatisPlus%E5%AE%9E%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="三种不同的lambda构造方法"><a href="#三种不同的lambda构造方法" class="headerlink" title="三种不同的lambda构造方法"></a>三种不同的lambda构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 三种不同的lambda构造方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectWrapper15</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 方式一</span></span><br><span class="line">     LambdaQueryWrapper&lt;User&gt; lambda = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().lambda();</span><br><span class="line">     <span class="comment">// 方式二</span></span><br><span class="line">     LambdaQueryWrapper&lt;User&gt; lambda2 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">// 方式三</span></span><br><span class="line">     LambdaQueryWrapper&lt;User&gt; lambda3 = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">     lambda3.like(User::getName, <span class="string">&quot;张&quot;</span>).lt(User::getAge, <span class="number">30</span>);</span><br><span class="line">     List&lt;User&gt; users = userMapper.selectList(lambda3);</span><br><span class="line">     users.forEach(System.out::println);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="自定义sql"><a href="#自定义sql" class="headerlink" title="自定义sql"></a>自定义sql</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 编写UserMapper</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUserByWrapper</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span>Wrapper&lt;User&gt; wrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectWrapper01</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; qw = Wrappers.&lt;User&gt;lambdaQuery().like(User::getName, <span class="string">&quot;张&quot;</span>).and(u -&gt; u.lt(User::getAge, <span class="number">40</span>).or().isNotNull(User::getEmail));</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectUserByWrapper(qw);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">---------------------------------方法二---------------------------------</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;select id=&quot;selectUserByWrapper&quot; resultType=&quot;com.yoni.mq.entity.User&quot;&gt;</span></span><br><span class="line"><span class="comment">        select * from user $&#123;ew.customSqlSegment&#125;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public List&lt;User&gt; selectUserByWrapper(@Param(Constants.WRAPPER)Wrapper&lt;User&gt; wrapper);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /**</span></span><br><span class="line"><span class="comment">     * 自定义xml</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectWrapper01</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; qw = Wrappers.&lt;User&gt;lambdaQuery().like(User::getName, <span class="string">&quot;张&quot;</span>).and(u -&gt; u.lt(User::getAge, <span class="number">40</span>).or().isNotNull(User::getEmail));</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectUserByWrapper(qw);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectPage</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; qw = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">        qw.ge(User::getAge, <span class="number">18</span>);</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        Page&lt;User&gt; iPage = userMapper.selectPage(page, qw);</span><br><span class="line">        System.out.println(<span class="string">&quot;总页数：&quot;</span> + iPage.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;总数：&quot;</span> + iPage.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;页数：&quot;</span> + iPage.getSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;页码：&quot;</span> + iPage.getCurrent());</span><br><span class="line">        List&lt;User&gt; records = iPage.getRecords();</span><br><span class="line">        records.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        <span class="type">Page</span> <span class="variable">page1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        IPage&lt;Map&lt;String, Object&gt;&gt; iPage1 = userMapper.selectMapsPage(page1, qw);</span><br><span class="line">        System.out.println(<span class="string">&quot;总页数：&quot;</span> + iPage1.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;总数：&quot;</span> + iPage1.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;页数：&quot;</span> + iPage1.getSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;页码：&quot;</span> + iPage1.getCurrent());</span><br><span class="line">    &#125;</span><br><span class="line">---------------------------------不查总记录数---------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页不查询总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectPage02</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; qw = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">        qw.ge(User::getAge, <span class="number">20</span>);</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        Page&lt;User&gt; iPage = userMapper.selectPage(page, qw);</span><br><span class="line">        List&lt;User&gt; users = iPage.getRecords();</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改删除"><a href="#修改删除" class="headerlink" title="修改删除"></a>修改删除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// where后参数</span></span><br><span class="line">        UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        userUpdateWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">// set后参数</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">30</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> userMapper.update(user, userUpdateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">        userMapper.deleteByMap(map);</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getId, <span class="number">1L</span>);</span><br><span class="line">        userMapper.delete(qw);</span><br><span class="line">        List&lt;Long&gt; ids = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">        userMapper.deleteBatchIds(ids);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="AR模式"><a href="#AR模式" class="headerlink" title="AR模式"></a>AR模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AR测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;燕双鹰&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">41</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15126789123&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;yanshuangying@163.com&quot;</span>);</span><br><span class="line">        user.setParentId(<span class="number">1L</span>);</span><br><span class="line">        user.setCreateTime(LocalDateTime.now());</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">insert</span> <span class="operator">=</span> user.insert();</span><br><span class="line">        System.out.println(<span class="string">&quot;是否插入：&quot;</span> + insert);</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AR查询01</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arTest01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> user.selectById();</span><br><span class="line">        System.out.println(user1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AR测试02</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arTest02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;zhangsanfeng@163.com&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> user.updateById();</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AR测试03</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arTest03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> user.deleteById();</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="主键策略"><a href="#主键策略" class="headerlink" title="主键策略"></a>主键策略</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AUTO：自增</span><br><span class="line">ID_WORKER：算法</span><br><span class="line">UUID：uuid</span><br></pre></td></tr></table></figure>

<h2 id="通用service"><a href="#通用service" class="headerlink" title="通用service"></a>通用service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置false 默认返回第一条</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">one</span> <span class="operator">=</span> userService.getOne(Wrappers.&lt;User&gt;lambdaQuery().gt(User::getAge, <span class="number">20</span>), <span class="literal">false</span>);</span><br><span class="line">        System.out.println(one);</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setName(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        user1.setAge(<span class="number">31</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setName(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line">        user2.setAge(<span class="number">32</span>);</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(user1, user2);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(users);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="MybatisCodeHelperPro-插件使用简录"><a href="#MybatisCodeHelperPro-插件使用简录" class="headerlink" title="MybatisCodeHelperPro 插件使用简录"></a>MybatisCodeHelperPro 插件使用简录</h1><h2 id="通过Entity建表"><a href="#通过Entity建表" class="headerlink" title="通过Entity建表"></a>通过Entity建表</h2><ul>
<li><strong>Alt + Insert</strong> </li>
<li><strong>generate mybatis file</strong></li>
<li><strong>primary key</strong></li>
</ul>
<h2 id="Mapper中通过方法名直接生成Xml-映射文件"><a href="#Mapper中通过方法名直接生成Xml-映射文件" class="headerlink" title="Mapper中通过方法名直接生成Xml 映射文件"></a>Mapper中通过方法名直接生成Xml 映射文件</h2><ul>
<li><strong>findByTestIdandxxxxx</strong></li>
<li><strong>Alt + enter   可选  if test</strong></li>
</ul>
<blockquote>
<p>Idea的setting中设置数据库为mysql, xml 不会出黄底色</p>
</blockquote>
<h2 id="复杂对象查询也可有提示"><a href="#复杂对象查询也可有提示" class="headerlink" title="复杂对象查询也可有提示"></a>复杂对象查询也可有提示</h2><p>传入的是一个复杂对象</p>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200418231542.jpg" alt="QQ截图20200418231438"></p>
<h2 id="xml中可以直接测试sql-x2F-或者生成testcase"><a href="#xml中可以直接测试sql-x2F-或者生成testcase" class="headerlink" title="xml中可以直接测试sql &#x2F;  或者生成testcase"></a>xml中可以直接测试sql &#x2F;  或者生成testcase</h2>]]></content>
  </entry>
  <entry>
    <title>MySQL索引</title>
    <url>/2020/04/06/MySQL%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h2 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h2><p>数据库索引，是数据库管理系统(DBMS)中一个排序的数据结构，它可以对数据库表中一列或多列的值进行排序，以协助更加快速的访问数据库表中特定的数据。通俗的说，我们可以把数据库索引比做是一本书前面的目录，它能加快数据库的查询速度。</p>
<h2 id="B-Tree和B-Tree和二叉树"><a href="#B-Tree和B-Tree和二叉树" class="headerlink" title="B Tree和B+Tree和二叉树"></a>B Tree和B+Tree和二叉树</h2><p>目前大部分数据库系统及文件系统都采用B Tree或其变种B+Tree作为索引结构</p>
<span id="more"></span>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200406172339.jpg" alt="QQ截图20200406172331"></p>
<h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B Tree"></a>B Tree</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200406172426.jpg" alt="QQ截图20200406172422"></p>
<h2 id="B-Tree-适合做索引"><a href="#B-Tree-适合做索引" class="headerlink" title="B+Tree  适合做索引"></a>B+Tree  适合做索引</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200406172542.jpg" alt="QQ截图20200406172538"></p>
<h4 id="相对B树，B-树做索引的优势"><a href="#相对B树，B-树做索引的优势" class="headerlink" title="相对B树，B+树做索引的优势"></a>相对B树，B+树做索引的优势</h4><ol>
<li>B+树的磁盘IO代价更低： B+树非叶子节点没有指向数据行的指针，所以相同的磁盘容量存储的节点数更多，相应的IO读写次数肯定减少了。</li>
<li>B+树的查询效率更加稳定：由于所有数据都存于叶子节点。所有关键字查询的路径长度相同，每一个数据的查询效率相当。</li>
<li>所有的叶子节点形成了一个有序链表，更加便于查找。</li>
</ol>
<h2 id="MyISAM索引和Innodb索引的区别"><a href="#MyISAM索引和Innodb索引的区别" class="headerlink" title="MyISAM索引和Innodb索引的区别"></a>MyISAM索引和Innodb索引的区别</h2><p>MyISAM使用B+树作为索引结构，叶节点叶节点的data域保存的是存储数据的<strong>地址</strong>，<strong>主键索引</strong>key值唯一，<strong>辅助索引</strong>key可以重复，二者在结构上相同。 因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果要找的Key存在，则取出其data域的值，然后以data域的值为地址，去读取相应数据记录 。因此，索引文件和数据文件是分开的，从索引中检索到的是数据的地址，而不是数据。</p>
<p>Innodb也是用B+树作为索引结构，但具体实现方式却与MyISAM截然不同，首先，数据表本身就是按照b+树组织，所以数据文件本身就是<strong>主键索引</strong>文件。叶节点key值为数据表的主键，data域为<strong>完整的数据记录</strong>，因此InnoDB表数据文件本身就是<strong>主键索引</strong>(这也就是MyISAM可以允许没有主键，但是Innodb必须有主键的原因）。第二个与MyISAM索引的不同是InnoDB的<strong>辅助索引</strong>的data域存储相应数据记录的主键值而不是地址。换句话说，InnoDB的所有<strong>辅助索引</strong>都引用主键作为data域。</p>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p><strong>普通索引</strong>：（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。</p>
<p><strong>唯一索引</strong>： 普通索引允许被索引的数据列包含重复的值，而唯一索引不允许，但是可以为null。所以任务是保证访问速度和避免数据出现重复。</p>
<p><strong>主键索引</strong>：在主键字段创建的索引，一张表只有一个主键索引。</p>
<p><strong>组合索引</strong>：多列值组成一个索引，专门用于组合搜索。</p>
<p><strong>全文索引</strong>：对文本的内容进行分词，进行搜索。（MySQL5.6及以后的版本，MyISAM和InnoDB存储引擎均支持全文索引。）</p>
<h3 id="索引的使用策略及优缺点"><a href="#索引的使用策略及优缺点" class="headerlink" title="索引的使用策略及优缺点"></a>索引的使用策略及优缺点</h3><h4 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h4><p>主键自动建立唯一索引。<br>经常作为查询条件在WHERE或者ORDER BY 语句中出现的列要建立索引。<br>查询中与其他表关联的字段，外键关系建立索引。<br>经常用于聚合函数的列要建立索引，如min()，max()等的聚合函数。</p>
<h4 id="不使用索引"><a href="#不使用索引" class="headerlink" title="不使用索引"></a>不使用索引</h4><p>经常增删改的列不要建立索引。<br>有大量重复的列不建立索引。<br>表记录太少不要建立索引，因为数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果 。</p>
<h4 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h4><p>建立联合索引的时候都会默认从最左边开始，所以索引列的顺序很重要，建立索引的时候就应该把最常用的放在左边，使用select的时候也是这样，从最左边的开始，依次匹配右边的。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>可以保证数据库表中每一行的数据的唯一性。<br>可以大大加快数据的索引速度。<br>加速表与表之间的连接。<br>可以显著的减少查询中分组和排序的时间。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。<br>索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果需要建立聚簇索引，那么需要占用的空间会更大，其实建立索引就是以空间换时间。<br>表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了维护效率。</p>
]]></content>
  </entry>
  <entry>
    <title>MybatisPlus的学习</title>
    <url>/2020/04/15/MybatisPlus%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="新公司新项目看到使用了MyBatisPlus-学习一下吧"><a href="#新公司新项目看到使用了MyBatisPlus-学习一下吧" class="headerlink" title="新公司新项目看到使用了MyBatisPlus,学习一下吧!"></a>新公司新项目看到使用了MyBatisPlus,学习一下吧!</h2><blockquote>
<p>特性</p>
</blockquote>
<ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作<span id="more"></span>
<blockquote>
<p>入门</p>
</blockquote>
</li>
</ul>
<ol>
<li><p>创建数据库  mybatis_plus</p>
</li>
<li><p>创建user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br><span class="line"><span class="comment">-- 真实开发中，version（乐观锁）、deleted（逻辑删除）、gmt_create、gmt_modified</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写项目，初始化项目！使用SpringBoot初始化</p>
</li>
<li><p>导入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 数据库驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mybatis-plus --&gt;</span><br><span class="line">&lt;!-- mybatis-plus 是自己开发，并非官方的！ --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.0</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># mysql <span class="number">5</span> 驱动不同 com.mysql.jdbc.Driver</span><br><span class="line"># mysql <span class="number">8</span> 驱动不同com.mysql.cj.jdbc.Driver、需要增加时区的配置</span><br><span class="line">serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis_plus?</span></span><br><span class="line">useSSL=<span class="literal">false</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用了mybatis-plus</p>
<ul>
<li><p>pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.mapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="comment">// 在对应的Mapper上面继承基本的类 BaseMapper</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">// 代表持久层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">  <span class="comment">// 所有的CRUD操作都已经编写完成了</span></span><br><span class="line">  <span class="comment">// 你不需要像以前的配置一大堆文件了！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意点，我们需要在主启动类上去扫描我们的mapper包下的所有接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.kuang.mapper&quot;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类中测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line">  <span class="comment">// 继承了BaseMapper，所有的方法都来自己父类</span></span><br><span class="line">  <span class="comment">// 我们也可以编写自己的扩展方法！</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 参数是一个 Wrapper ，条件构造器，这里我们先不用 null</span></span><br><span class="line">    <span class="comment">// 查询全部用户</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果会全查出</p>
</li>
</ul>
</li>
</ol>
<h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><blockquote>
<p>我们所有的sql现在是不可见的，我们希望知道它是怎么执行的，所以我们必须要看日志</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 配置日志</span><br><span class="line">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>

<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="Insert-插入"><a href="#Insert-插入" class="headerlink" title="Insert 插入"></a>Insert 插入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试插入</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  user.setName(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">  user.setAge(<span class="number">3</span>);</span><br><span class="line">  user.setEmail(<span class="string">&quot;xxxx@qq.com&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user); <span class="comment">// 帮我们自动生成id</span></span><br><span class="line">  System.out.println(result); <span class="comment">// 受影响的行数</span></span><br><span class="line">  System.out.println(user); <span class="comment">// 发现，id会自动回填</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h4><blockquote>
<p>默认雪花算法：</p>
<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为<br>毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味<br>着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯<br>一！</p>
</blockquote>
<h4 id="配置主键自增"><a href="#配置主键自增" class="headerlink" title="配置主键自增"></a>配置主键自增</h4><ol>
<li><p>实体类字段上      @TableId(type &#x3D; IdType.AUTO)</p>
</li>
<li><p>数据库字段一定要是自增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line">  AUTO(<span class="number">0</span>), <span class="comment">// 数据库id自增</span></span><br><span class="line">  NONE(<span class="number">1</span>), <span class="comment">// 未设置主键</span></span><br><span class="line">  INPUT(<span class="number">2</span>), <span class="comment">// 手动输入</span></span><br><span class="line">  ID_WORKER(<span class="number">3</span>), <span class="comment">// 默认的全局唯一id</span></span><br><span class="line">  UUID(<span class="number">4</span>), <span class="comment">// 全局唯一id uuid</span></span><br><span class="line">  ID_WORKER_STR(<span class="number">5</span>); <span class="comment">//ID_WORKER 字符串表示法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">  <span class="comment">// 通过条件自动拼接动态sql</span></span><br><span class="line">  user.setId(<span class="number">6L</span>);</span><br><span class="line">  user.setName(<span class="string">&quot;Tree&quot;</span>);</span><br><span class="line">  user.setAge(<span class="number">18</span>);</span><br><span class="line">  <span class="comment">// 注意：updateById 但是参数是一个 对象！</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h4><p>创建时间、修改时间！这些个操作一遍都是自动化完成的，我们不希望手动更新！</p>
<ol>
<li><p>删除数据库的默认值、更新操作</p>
</li>
<li><p>实体类字段属性上需要增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字段添加填充内容</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写处理器来处理这个注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 一定不要忘记把处理器加到IOC容器中！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">  <span class="comment">// 插入时的填充策略</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;start insert fill.....&quot;</span>);</span><br><span class="line">    <span class="comment">// setFieldValByName(String fieldName, Object fieldVal, MetaObject metaObject</span></span><br><span class="line">    <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 更新时的填充策略</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;start update fill.....&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="乐观锁-x2F-悲观锁"><a href="#乐观锁-x2F-悲观锁" class="headerlink" title="乐观锁 &#x2F; 悲观锁"></a>乐观锁 &#x2F; 悲观锁</h4><blockquote>
<p>乐观锁 : 故名思意十分乐观，它总是认为不会出现问题，无论干什么不去上锁！如果出现了问题，<br>再次更新值测试<br>悲观锁：故名思意十分悲观，它总是认为总是出现问题，无论干什么都会上锁！再去操作！</p>
</blockquote>
<h5 id="乐观锁实现方式"><a href="#乐观锁实现方式" class="headerlink" title="乐观锁实现方式"></a>乐观锁实现方式</h5><ul>
<li><p>取出记录时，获取当前 version</p>
</li>
<li><p>更新时，带上这个version</p>
</li>
<li><p>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</p>
</li>
<li><p>如果version不对，就更新失败</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">乐观锁：<span class="number">1</span>、先查询，获得版本号 version <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- A</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> &quot;Tree&quot;, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- B 线程抢先完成，这个时候 version = 2，会导致 A 修改失败！</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> &quot;Tree&quot;, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>测试一下MP的乐观锁插件</p>
</blockquote>
<ol>
<li><p>给数据库中增加version字段</p>
</li>
<li><p>我们实体类加对应的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span> <span class="comment">//乐观锁Version注解</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扫描我们的 mapper 文件夹</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.k.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">  <span class="comment">// 注册乐观锁插件</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试乐观锁成功！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLocker</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 1、查询用户信息</span></span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">  <span class="comment">// 2、修改用户信息</span></span><br><span class="line">  user.setName(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">  user.setEmail(<span class="string">&quot;aaa@qq.com&quot;</span>);</span><br><span class="line">  <span class="comment">// 3、执行更新操作</span></span><br><span class="line">  userMapper.updateById(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试乐观锁失败！多线程下</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLocker2</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 线程 1</span></span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">  user.setName(<span class="string">&quot;aaa111&quot;</span>);</span><br><span class="line">  user.setEmail(<span class="string">&quot;aaa222@qq.com&quot;</span>);</span><br><span class="line">  <span class="comment">// 模拟另外一个线程执行了插队操作</span></span><br><span class="line">  <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">  user2.setName(<span class="string">&quot;aaa333&quot;</span>);</span><br><span class="line">  user2.setEmail(<span class="string">&quot;aaa444@qq.com&quot;</span>);</span><br><span class="line">  userMapper.updateById(user2);</span><br><span class="line">  <span class="comment">// 自旋锁来多次尝试提交！</span></span><br><span class="line">  userMapper.updateById(user); <span class="comment">// 如果没有乐观锁就会覆盖插队线程的值！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试批量查询！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByBatchId</span><span class="params">()</span>&#123;</span><br><span class="line">  List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">  users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按条件查询之一使用map操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">  HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// 自定义要查询</span></span><br><span class="line">  map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;名字&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;age&quot;</span>,<span class="number">3</span>);</span><br><span class="line">  List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">  users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul>
<li>原始的 limit 进行分页</li>
<li>pageHelper 第三方插件</li>
<li>MP 其实也内置了分页插件</li>
</ul>
<ol>
<li><p>配置拦截器组件即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页插件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接使用Page对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 参数一：当前页</span></span><br><span class="line">  <span class="comment">// 参数二：页面大小</span></span><br><span class="line">  <span class="comment">// 使用了分页插件之后，所有的分页操作也变得简单的！</span></span><br><span class="line">  Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">  userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">  page.getRecords().forEach(System.out::println);</span><br><span class="line">  System.out.println(page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">  userMapper.deleteById(<span class="number">1240620674645544965L</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过id批量删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchId</span><span class="params">()</span>&#123;</span><br><span class="line"> userMapper.deleteBatchIds(Arrays.asList(<span class="number">1240620674645544961L</span>,<span class="number">124062067464554496</span></span><br><span class="line"><span class="number">2L</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过map删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteMap</span><span class="params">()</span>&#123;</span><br><span class="line">  HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;名字&quot;</span>);</span><br><span class="line">  userMapper.deleteByMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><ol>
<li><p>在数据表中增加一个 deleted</p>
</li>
<li><p>实体类中增加属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span> <span class="comment">//逻辑删除</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 逻辑删除组件！</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ISqlInjector <span class="title function_">sqlInjector</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogicSqlInjector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置逻辑删除</span></span><br><span class="line">mybatis-plus.global-config.db-config.logic-delete-value=1</span><br><span class="line">mybatis-plus.global-config.db-config.logic-not-delete-value=0</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h2><ol>
<li><p>导入插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * SQL执行效率插件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span><span class="comment">// 设置 dev test 环境开启，保证我们的效率</span></span><br><span class="line"><span class="keyword">public</span> PerformanceInterceptor <span class="title function_">performanceInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">PerformanceInterceptor</span> <span class="variable">performanceInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">PerformanceInterceptor</span>();</span><br><span class="line">  performanceInterceptor.setMaxTime(<span class="number">100</span>); <span class="comment">// ms设置sql执行的最大时间，如果超过了则不执行</span></span><br><span class="line">  performanceInterceptor.setFormat(<span class="literal">true</span>); <span class="comment">// 是否格式化代码</span></span><br><span class="line">  <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 参数是一个 Wrapper ，条件构造器，这里我们先不用 null</span></span><br><span class="line">  <span class="comment">// 查询全部用户</span></span><br><span class="line">  List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">  users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="条件构造器-main-Wrapper"><a href="#条件构造器-main-Wrapper" class="headerlink" title="条件构造器(main)        Wrapper"></a>条件构造器(main)        Wrapper</h2><ol>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于12</span></span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  wrapper</span><br><span class="line">   .isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">   .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">   .ge(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>);</span><br><span class="line">  <span class="comment">//和我们刚才学习的map对比一下</span></span><br><span class="line">  userMapper.selectList(wrapper).forEach(System.out::println); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 查询名字xx</span></span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;名字&quot;</span>);</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper); <span class="comment">// 查询一个数据，出现多个结果使用List或者 Map</span></span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 查询年龄在 20 ~ 30 岁之间的用户</span></span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  wrapper.between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>); <span class="comment">// 区间</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(wrapper);<span class="comment">// 查询结果数</span></span><br><span class="line">  System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">// 查询年龄在 20 ~ 30 岁之间的用户</span></span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// 左和右 t%</span></span><br><span class="line">  wrapper</span><br><span class="line">     .notLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;e&quot;</span>)</span><br><span class="line">     .likeRight(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;t&quot;</span>);</span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">  maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// id 在子查询中查出来</span></span><br><span class="line">  wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id&lt;3&quot;</span>);</span><br><span class="line">  List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">  objects.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// 通过id进行排序</span></span><br><span class="line">  wrapper.orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">  List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">  users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h2><p><strong>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、</strong><br><strong>Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratorCode</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 需要构建一个 代码自动生成器 对象</span></span><br><span class="line">    <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();    <span class="comment">// 用到他!!!</span></span><br><span class="line">    <span class="comment">// 配置策略</span></span><br><span class="line">    <span class="comment">// 1、全局配置</span></span><br><span class="line">    <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">    gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">    gc.setAuthor(<span class="string">&quot;me&quot;</span>);</span><br><span class="line">    gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">    gc.setFileOverride(<span class="literal">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">    gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">// 去Service的I前缀</span></span><br><span class="line">    gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">    gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">    gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">    mpg.setGlobalConfig(gc);</span><br><span class="line">    <span class="comment">//2、设置数据源</span></span><br><span class="line">    <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">    dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/xxxx?</span></span><br><span class="line"><span class="string">useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">    dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    dsc.setDbType(DbType.MYSQL);</span><br><span class="line">    mpg.setDataSource(dsc);</span><br><span class="line">    <span class="comment">//3、包的配置</span></span><br><span class="line">    <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">    pc.setModuleName(<span class="string">&quot;blog&quot;</span>);</span><br><span class="line">    pc.setParent(<span class="string">&quot;com.kuang&quot;</span>);</span><br><span class="line">    pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">    pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">    pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">    mpg.setPackageInfo(pc);</span><br><span class="line">    <span class="comment">//4、策略配置</span></span><br><span class="line">    <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">  </span><br><span class="line"> strategy.setInclude(<span class="string">&quot;blog_tags&quot;</span>,<span class="string">&quot;course&quot;</span>,<span class="string">&quot;links&quot;</span>,<span class="string">&quot;sys_settings&quot;</span>,<span class="string">&quot;user_record&quot;</span>,<span class="string">&quot;</span></span><br><span class="line"><span class="string">user_say&quot;</span>); <span class="comment">// 设置要映射的表名</span></span><br><span class="line">    strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">    strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">    strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// 自动lombok；</span></span><br><span class="line">    strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">    <span class="comment">// 自动填充配置</span></span><br><span class="line">    <span class="type">TableFill</span> <span class="variable">gmtCreate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">    <span class="type">TableFill</span> <span class="variable">gmtModified</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;gmt_modified&quot;</span>,</span><br><span class="line">FieldFill.INSERT_UPDATE);</span><br><span class="line">    ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    tableFills.add(gmtCreate);</span><br><span class="line">    tableFills.add(gmtModified);</span><br><span class="line">    strategy.setTableFillList(tableFills);</span><br><span class="line">    <span class="comment">// 乐观锁</span></span><br><span class="line">    strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">    strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">    strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//</span></span><br><span class="line">localhost:<span class="number">8080</span>/hello_id_2</span><br><span class="line">    mpg.setStrategy(strategy);</span><br><span class="line">    mpg.execute(); <span class="comment">//执行</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx常用配置</title>
    <url>/2018/06/20/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/uploads/nginx.jpg" alt="avatar"></p>
<h4 id="Nginx-常用的一些配置-因为不是很常用-记录下"><a href="#Nginx-常用的一些配置-因为不是很常用-记录下" class="headerlink" title="Nginx 常用的一些配置,因为不是很常用,记录下  ^.^"></a>Nginx 常用的一些配置,因为不是很常用,记录下  ^.^</h4><h5 id="ubuntu-服务器安装-路径在-x2F-etc-x2F-nginx"><a href="#ubuntu-服务器安装-路径在-x2F-etc-x2F-nginx" class="headerlink" title="ubuntu 服务器安装,路径在  &#x2F;etc&#x2F;nginx"></a>ubuntu 服务器安装,路径在  &#x2F;etc&#x2F;nginx</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="最常用的命令"><a href="#最常用的命令" class="headerlink" title="最常用的命令"></a>最常用的命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -c /path/to/nginx.conf    </span><br><span class="line">nginx -s stop                //快速停止</span><br><span class="line">nginx -s reload              //重新加载配置文件</span><br><span class="line">nginx -s quit                  // 完整有序的停止</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><hr>
<h5 id="接口使用域名-直接proxy-pass到端口"><a href="#接口使用域名-直接proxy-pass到端口" class="headerlink" title="接口使用域名,直接proxy_pass到端口"></a>接口使用域名,直接proxy_pass到端口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name corp-api.pinzhixin.cn;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/nginx/conf.d/pinzhixin.cn/xxx.pem;</span><br><span class="line">        ssl_certificate_key /etc/nginx/conf.d/pinzhixin.cn/xxx.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:66666/;</span><br><span class="line">                proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="服务器rewite到nginx的配置上"><a href="#服务器rewite到nginx的配置上" class="headerlink" title="服务器rewite到nginx的配置上"></a>服务器rewite到nginx的配置上</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name pinzhixin.cn;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/nginx/conf.d/pinzhixin.cn/214454690340820.pem;</span><br><span class="line">        ssl_certificate_key /etc/nginx/conf.d/pinzhixin.cn/214454690340820.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location /corp.html &#123;</span><br><span class="line">             rewrite /corp.html https://corp.pinzhixin.cn/corp.html permanent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /admin.html &#123;</span><br><span class="line">             rewrite /admin.html https://admin-corp.pinzhixin.cn/corp.html permanent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /&#123;</span><br><span class="line">                index index.html home.html;</span><br><span class="line">                root /var/www/pzx/c/html_cn;      //注意这里是用的c端的静态文件</span><br><span class="line">                try_files $uri $uri/ @router;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location @router&#123;</span><br><span class="line">                rewrite ^.*$ /index.html last;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//再转发到corp.pinzhixin.cn</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name corp.pinzhixin.cn;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/nginx/conf.d/pinzhixin.cn/214454690340820.pem;</span><br><span class="line">        ssl_certificate_key /etc/nginx/conf.d/pinzhixin.cn/214454690340820.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location /&#123;</span><br><span class="line">                index index.html home.html;</span><br><span class="line">                root /var/www/pzx/corp/html_cn;</span><br><span class="line">                try_files $uri $uri/ @router;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location @router&#123;</span><br><span class="line">                rewrite ^.*$ /index.html last;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="永久重定向"><a href="#永久重定向" class="headerlink" title="永久重定向"></a>永久重定向</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 多个次域名：www.a.com  www.b.com www.pinzhixin.cn，我想在访问a,b,www.pinzhixin.cn时都特定跳转到https://pinzhixin.cn/ycjs.html上</span><br><span class="line">server &#123;</span><br><span class="line">        listen   80;</span><br><span class="line">        server_name     www.pinzhixin.cn www.a.com www.b.com;</span><br><span class="line">        return          301 https://pinzhixin.cn/ycjs.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="我服务器的-需要注意的地方"><a href="#我服务器的-需要注意的地方" class="headerlink" title="我服务器的 需要注意的地方"></a>我服务器的 需要注意的地方</h5><blockquote>
<p>sites-available 和 sites-enabled 两个文件夹,enabled中软连接着available中的文件   ln -s ..&#x2F;sites-available&#x2F;napa_site .&#x2F;  </p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth2的一些记录</title>
    <url>/2022/03/24/OAuth2%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="之前按照Oauth2的逻辑实现了相同的功能-记录下Oauth2的场景和功能"><a href="#之前按照Oauth2的逻辑实现了相同的功能-记录下Oauth2的场景和功能" class="headerlink" title="之前按照Oauth2的逻辑实现了相同的功能,记录下Oauth2的场景和功能"></a>之前按照Oauth2的逻辑实现了相同的功能,记录下Oauth2的场景和功能</h4><h2 id="一、OAuth2需求场景"><a href="#一、OAuth2需求场景" class="headerlink" title="一、OAuth2需求场景"></a>一、OAuth2需求场景</h2><p>在说明OAuth2需求及使用场景之前，需要先介绍一下OAuth2授权流程中的各种角色：</p>
<ul>
<li>资源拥有者（User） - 指应用的用户，通常指的是系统的登录用户</li>
<li>认证服务器 （Authorization Server）- 提供登录认证接口的服务器，比如：github登录、QQ登录、微信登录等</li>
<li>资源服务器 （Resources Server） - 提供资源接口及服务的服务器，比如：用户信息接口等。通常和认证服务器是同一个应用。</li>
<li>第三方客户端（Client） - 第三方应用，希望使用资源服务器提供的资源</li>
<li>服务提供商(Provider): 认证服务和资源服务归属于一个机构，该机构就是服务提供商</li>
</ul>
<p>如果您对这些角色承担的作用还不清晰，也请先记住这些角色，继续往下看：<br> <span id="more"></span></p>
<ul>
<li>从资源拥有者，即系统用户的角度：举个例子，用户在X应用上，想使用自己在QQ中的保存的用户信息等资源。所以用户希望QQ开放接口给X应用，从而该用户可以在X应用中使用自己在QQ上的用户信息。即：实现QQ登录效果。</li>
<li>从服务提供商的角度，如QQ：我想让其他厂商的应用都使用我提供的资源，以增强用户对我的的粘性。越多的第三方应用依赖于我开放的接口，就表示会有越多的用户依赖于我。参考：微信平台开放扫码登录功能。</li>
<li>从第三方客户端，即资源申请者的角度：QQ微信是一个大厂开发的，它那里用户量大。微信既然提供了基于OAuth2的接口，我可以获取一些基本用户数据信息，我干嘛不用呢。特别是扫码登录功能接口，给我自己的用户也带来了极大的方便，增强了用户在我的应用上的体验。</li>
</ul>
<h2 id="二、OAuth2授权的流程"><a href="#二、OAuth2授权的流程" class="headerlink" title="二、OAuth2授权的流程"></a>二、OAuth2授权的流程</h2><p>OAuth2授权的流程的授权流程还是有点复杂的，用专业的术语很容易把大家弄糊涂，所以我希望给大家举一个生活中的例子，来帮助理解。</p>
<p>背景：我经营着一个考研自习室，向考研学生出租提供自习室资源。李小明是一位考研学生，自习室资源拥有者，我的用户。</p>
<ul>
<li>资源拥有者 - 考研同学李小明</li>
<li>资源服务器 - 考研自习室及自习室内的资源（书包）</li>
<li>认证服务器 - 我（考研自习室管理员）</li>
<li>第三方客户端 - 考研同学李小明家长，第三方申请者</li>
</ul>
<p><strong>OAuth2</strong>授权的流程：</p>
<ul>
<li>第一步（第三方申请资源）：一个自称是考研学生家长的人给我打电话：“李小明是在你这里自习吧？他的书包放在自习室了，我要帮他取一下。”</li>
<li>第二步（验证资源拥有者）： 我此时将信将疑，于是让家长等一下，同时拨通了李小明视频，李小明向我确认，的确有这回事。</li>
<li>第三步（认证通过发授权码）：我一看这情况，就和小明家长说：李小明的自习室是“XXXX”地址，但是我不在那，你来我这取一下钥匙吧。</li>
<li>第四部（申请token令牌）：小明家长来到我的地址，告诉我说：来取“XXXX”地址自习室的钥匙。哦，我一听就明白了。</li>
<li>第五步（颁发token令牌）：于是我找出自习室的钥匙交给了小明的家长。</li>
</ul>
<p>从上面的例子中我们看到，小明(用户)是明显受益方，他不用跑腿了。我作为自习室经营者（认证服务器），对外提供这种服务的目的是为了增加用户粘性，增强用户体验。小明的家长作为第三方，他获取了资源(自习室书包），是为了增强自己的儿子小明的用户体验。<br>以上的授权模式，就是OAuth2最典型的最常被使用的授权码模式。“XXXX”地址是授权码，钥匙是Access Token。用相对专业的说法再说明一次，大家可以对比学习：</p>
<ol>
<li>第三方应用，向认证服务器请求授权。</li>
<li>用户告知认证服务器同意授权（通常是通过用户扫码或输入“服务提供商”的用户名密码的方式）</li>
<li>认证服务器向第三方应用告知授权码（code）</li>
<li>第三方应用使用授权码（code）申请Access Token</li>
<li>认证服务器验证授权码，颁发Access Token</li>
</ol>
<p>这样第三方应用就可以使用Access Token，访问服务提供商的接口资源了。（小明家长用钥匙去自习室取书包）</p>
<h2 id="三、OAuth2四种授权模式"><a href="#三、OAuth2四种授权模式" class="headerlink" title="三、OAuth2四种授权模式"></a>三、OAuth2四种授权模式</h2><ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>
<p>在第二节中为大家讲述的是授权码模式。密码模式也很简单：</p>
<ul>
<li>用户将用户名密码交给第三方客户端应用</li>
<li>客户端将用户名密码发送给认证服务器，认证服务器验证后颁发AccessToken</li>
<li>客户端请求资源接口携带AccessToken，服务端对AccessToken进行校验。</li>
<li>校验通过，才能获得接口正确的数据结果响应。</li>
</ul>
<p>密码模式与授权码模式最大的区别在于：</p>
<ul>
<li>授权码模式申请授权码的过程是用户直接与认证服务器进行交互，然后授权结果由认证服务器告知第三方客户端，也就是不会向第三方客户端暴露服务提供商的用户密码信息。</li>
<li>密码模式，是用户将用户密码信息交给第三方客户端，然后由第三方向服务提供商进行认证和资源请求。绝大多数的服务提供商都会选择使用授权码模式，避免自己的用户密码暴漏给第三方。所以密码模式只适用于服务提供商对第三方厂商（第三方应用）高度信任的情况下才能使用，或者这个“第三方应用”实际就是服务提供商自己的应用。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Docker安装部署RabbitMQ</title>
    <url>/2018/06/14/RabbitMQ/</url>
    <content><![CDATA[<p><img src="/uploads/docker.jpg" alt="avatar"></p>
<p><img src="/uploads/rabbit.png" alt="avatar"></p>
<h2 id="测试服务器上RabbitMq服务有点小问题-决定自己在docker上run一个"><a href="#测试服务器上RabbitMq服务有点小问题-决定自己在docker上run一个" class="headerlink" title="测试服务器上RabbitMq服务有点小问题,决定自己在docker上run一个"></a>测试服务器上RabbitMq服务有点小问题,决定自己在docker上run一个</h2><hr>
<h4 id="直接pull吧"><a href="#直接pull吧" class="headerlink" title="直接pull吧"></a>直接pull吧</h4><blockquote>
<p>如果docker pull rabbitmq 后面不带management，启动rabbitmq后是无法打开管理界面的</p>
</blockquote>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure>

<h4 id="查看下镜像-接下来就可以启用了"><a href="#查看下镜像-接下来就可以启用了" class="headerlink" title="查看下镜像,接下来就可以启用了"></a>查看下镜像,接下来就可以启用了</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@admin:~# docker images</span><br><span class="line">REPOSITORY                                            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/anke19388/mymongo   2.0                 6b89d82e7fa1        2 days ago          361 MB</span><br><span class="line">rabbitmq                                              management          c51d1c73d028        4 weeks ago         149 MB</span><br><span class="line">redis                                                 latest              bfcb1f6df2db        6 weeks ago         107 MB</span><br><span class="line">ubuntu                                                latest              452a96d81c30        6 weeks ago         79.6 MB</span><br><span class="line">ubuntu                                                &lt;none&gt;              c9d990395902        2 months ago        113 MB</span><br><span class="line">hello-world                                           latest              e38bc07ac18e        2 months ago        1.85 kB</span><br></pre></td></tr></table></figure>

<h4 id="确定好你要开启的端口映射关系"><a href="#确定好你要开启的端口映射关系" class="headerlink" title="确定好你要开启的端口映射关系"></a>确定好你要开启的端口映射关系</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name mq -p 5672:5672 -p 15672:15672 -p 25672:25672 rabbitmq:management</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>-p 可以指定多个端口</p>
</blockquote>
<h4 id="查看容器状态-目前开启一个mongo和一个mq-可以看到占用资源很小"><a href="#查看容器状态-目前开启一个mongo和一个mq-可以看到占用资源很小" class="headerlink" title="查看容器状态,目前开启一个mongo和一个mq,可以看到占用资源很小"></a>查看容器状态,目前开启一个mongo和一个mq,可以看到占用资源很小</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT       MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">b6bf8a5ebc1a        0.33%               87.2 MiB / 3.737 GiB    2.28%               2.82 kB / 578 B     53.2 kB / 463 kB    91</span><br><span class="line">0a0d5dd124ff        0.45%               699.8 MiB / 3.737 GiB   18.28%              390 MB / 129 MB     1.83 GB / 747 MB    27</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="尝试访问rabbitmq-web管理页面"><a href="#尝试访问rabbitmq-web管理页面" class="headerlink" title="尝试访问rabbitmq web管理页面"></a>尝试访问rabbitmq web管理页面</h4><blockquote>
<p>http:&#x2F;&#x2F;宿主机IP:15672，默认创建了一个 guest 用户，密码也是 guest。</p>
</blockquote>
<p><img src="/uploads/rabbitmq_1.png" alt="avatar"></p>
<h4 id="进入容器进行交互"><a href="#进入容器进行交互" class="headerlink" title="进入容器进行交互"></a>进入容器进行交互</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it mq /bin/bash</span><br></pre></td></tr></table></figure>


<h4 id="rabbit-常用命令"><a href="#rabbit-常用命令" class="headerlink" title="rabbit 常用命令"></a>rabbit 常用命令</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><ul>
<li>rabbitmq-server -detached</li>
</ul>
<h5 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h5><ul>
<li>rabbitmaqtl list_users<blockquote>
<p>rabbitmqctl add_user xxx xxx<br>rabbitmqctl set_user_tags dev administrator</p>
</blockquote>
</li>
</ul>
<h5 id="vhost"><a href="#vhost" class="headerlink" title="vhost"></a>vhost</h5><ul>
<li>rabbitemqctl list_vhost<blockquote>
<p>rabbitmqctl add_vhost shop_dev</p>
</blockquote>
</li>
</ul>
<h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><blockquote>
<p>rabbitmqctl set_permissions -p  pzx_dev dev “.<em>“ “.</em>“  “.*”</p>
</blockquote>
<h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><ul>
<li>rabbitmqctl change_password guest xxxx</li>
</ul>
<h4 id="接下来就可以部署你的应用了"><a href="#接下来就可以部署你的应用了" class="headerlink" title="接下来就可以部署你的应用了"></a>接下来就可以部署你的应用了</h4>]]></content>
      <categories>
        <category>docekr</category>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>rabbit</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis你要知道的事情</title>
    <url>/2020/04/01/Redis%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<h2 id="Redis适用的场景"><a href="#Redis适用的场景" class="headerlink" title="Redis适用的场景"></a>Redis适用的场景</h2><ol>
<li>内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务</li>
<li>取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面</li>
<li>模拟类似于HttpSession这种需要设定过期时间的功能</li>
<li>发布、订阅消息系统</li>
<li>定时器、计数器</li>
</ol>
<h2 id="Redis性能测试"><a href="#Redis性能测试" class="headerlink" title="Redis性能测试"></a>Redis性能测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -t <span class="built_in">set</span>,lpush -n 10000 -q</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401165838.jpg" alt="QQ截图20200401165719"></p>
<span id="more"></span>
<h2 id="Redis是单线程的"><a href="#Redis是单线程的" class="headerlink" title="Redis是单线程的"></a>Redis是单线程的</h2><p>因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了</p>
<h2 id="Redis-和-memecache-区别"><a href="#Redis-和-memecache-区别" class="headerlink" title="Redis 和 memecache 区别"></a>Redis 和 memecache 区别</h2><ol>
<li><strong>redis 支持复杂的数据结构</strong>	redis 相比 memcached 来说，拥有更多的数据结构，能支持更丰富的数据操作。如果需要缓存能够支持更复杂的结构和操作， redis 会是不错的选择。</li>
<li><strong>redis 原生支持集群模式</strong></li>
</ol>
<h2 id="Redis-支持的数据结构"><a href="#Redis-支持的数据结构" class="headerlink" title="Redis 支持的数据结构"></a>Redis 支持的数据结构</h2><ul>
<li>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)</li>
<li>另外还支持三种特殊类型geospatial(地理空间),hyperloglog(基数统计),bitmaps(位图)</li>
</ul>
<h2 id="Redis基本事务操作-没有隔离级别概念"><a href="#Redis基本事务操作-没有隔离级别概念" class="headerlink" title="Redis基本事务操作(没有隔离级别概念)"></a>Redis基本事务操作(没有隔离级别概念)</h2><blockquote>
<p>redis事务的本质是一组命令的集合,一个事务中的命令都会被序列化,按顺序执行,一次性,顺序性,排他性,但是不保证原子性</p>
</blockquote>
<ul>
<li>开启事务   (multi)</li>
<li>命令入队   (….)</li>
<li>执行事务   (exec)</li>
<li>放弃事务   (discard)</li>
</ul>
<h2 id="Redis的悲观锁和乐观锁"><a href="#Redis的悲观锁和乐观锁" class="headerlink" title="Redis的悲观锁和乐观锁"></a>Redis的悲观锁和乐观锁</h2><p><strong>悲观锁</strong></p>
<blockquote>
<p>认为什么时候都会出问题 ,做什么都会加锁</p>
</blockquote>
<p><strong>乐观锁</strong> (watch  可以实现乐观锁)</p>
<blockquote>
<p>更新数据的时候去判断下,在此期间是否修改过数据  比较version</p>
</blockquote>
<h2 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h2><ul>
<li>利用Redis的<strong>setnx命令</strong>。此命令同样是原子性操作，只有在key不存在的情况下，才能set成功。</li>
</ul>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401180402.jpg" alt="QQ截图20200401180346"></p>
<ul>
<li>缺陷:容器产生死锁,并且 setnx和expire(设置超时时间)不是原子操作，当setnx后，redis宕掉，则此锁无法释放掉</li>
</ul>
<h2 id="Redis在Springboot2-x之后-原来使用的jedis被替换为了lettuce"><a href="#Redis在Springboot2-x之后-原来使用的jedis被替换为了lettuce" class="headerlink" title="Redis在Springboot2.x之后,原来使用的jedis被替换为了lettuce"></a>Redis在Springboot2.x之后,原来使用的jedis被替换为了lettuce</h2><ul>
<li>jedis:直连,不安全,避免不安全使用连接池,BIO</li>
<li>lettuce:采用的netty,实例多线程中共享,更安全,像NIO</li>
</ul>
<h2 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h2><ul>
<li>RDB持久化（原理是将Reids在内存中的数据库记录定时 dump到磁盘上的RDB持久化）</li>
<li>AOF（append only file）持久化（原理是将Reids的操作日志以追加的方式写入文件）</li>
</ul>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401182754.jpg" alt="QQ截图20200401182741"></p>
<h2 id="AOF与RDB的优缺点"><a href="#AOF与RDB的优缺点" class="headerlink" title="AOF与RDB的优缺点"></a>AOF与RDB的优缺点</h2><ul>
<li>RDB<ul>
<li>优点:全量数据快照,文件小,恢复快</li>
<li>缺点:无法保存最近一次快照之后的数据</li>
</ul>
</li>
<li>AOF<ul>
<li>优点:可读性高,适合保存增量数据,不易丢失</li>
<li>缺点:文件体积大,恢复时间长</li>
</ul>
</li>
</ul>
<h2 id="日志重写解决AOF文件大小不断增加的问题"><a href="#日志重写解决AOF文件大小不断增加的问题" class="headerlink" title="日志重写解决AOF文件大小不断增加的问题"></a>日志重写解决AOF文件大小不断增加的问题</h2><ol>
<li>调用fork(),创建一个子进程</li>
<li>子进程把新的AOF写到临时文件,不依赖原文件</li>
<li>主进程持续将新的变化同时写到内存和原来的AOF中</li>
<li>住进程获取子进程重写AOF的完成信号,往新的AOF同步增量变动</li>
<li>使用新的AOF文件替换旧的AOF</li>
</ol>
<h2 id="自动触发RDB持久化的方法"><a href="#自动触发RDB持久化的方法" class="headerlink" title="自动触发RDB持久化的方法"></a>自动触发RDB持久化的方法</h2><ol>
<li>根据redis.conf配置中的  save m n定时触发(BGSAVE)</li>
<li>主从复制,主节点触发</li>
<li>Debug Reload</li>
<li>Shutdown且没有开启AOF</li>
</ol>
<h2 id="Redis的订阅发布-做异步队列"><a href="#Redis的订阅发布-做异步队列" class="headerlink" title="Redis的订阅发布(做异步队列)"></a>Redis的订阅发布(做异步队列)</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401185051.png" alt="clipboard"></p>
<ul>
<li><p>发送者(pub)发送消息,订阅者(sub)接受消息</p>
</li>
<li><p>可订阅任意数量的频道</p>
</li>
</ul>
<h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><ul>
<li><strong>只配置从库,不配置master</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info replication   <span class="comment">#查看当前库的信息</span></span><br><span class="line"></span><br><span class="line">复制配置文件,修改对应的信息</span><br><span class="line">1.端口</span><br><span class="line">2.pid名称</span><br><span class="line">3.<span class="built_in">log</span>文件名称</span><br><span class="line">4.dump.rdb名称</span><br><span class="line"></span><br><span class="line">SLAVEOF host 6379  <span class="comment"># 命令配置   从节点配置到主节点</span></span><br><span class="line"></span><br><span class="line">修改conf中的配置</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401185635.png" alt="clipboard"></p>
<h2 id="Redis哨兵机制-Redis-Sentinel"><a href="#Redis哨兵机制-Redis-Sentinel" class="headerlink" title="Redis哨兵机制  (Redis Sentinel)"></a>Redis哨兵机制  (Redis Sentinel)</h2><p><strong>解决主从同步Master宕机后的主从切换问题</strong></p>
<ul>
<li>监控:	检查运行状态</li>
<li>提醒:   api通知</li>
<li>自动故障迁移:   主从切换</li>
</ul>
<ol>
<li><p>配置sentinel.conf文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称  host port  1     1代表投票票数</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-sentinel xxx.conf</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Redis缓存穿透-查不到"><a href="#Redis缓存穿透-查不到" class="headerlink" title="Redis缓存穿透(查不到)"></a>Redis缓存穿透(查不到)</h2><p><strong>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击的应用，这就是漏洞.</strong></p>
<ol>
<li><p><strong>布隆过滤器</strong>:  是一种数据结构,对所有肯能查询的参数以hash形式存储,在控制层进行校验,不符合就丢弃,避免了对底层存储系统的压力</p>
</li>
<li><p><strong>缓存空对象</strong>:  数据库查询不到之后,返回空对象,将空对象也缓存起来,设置一个过期时间,之后再访问这个数据将会从缓存中获取</p>
<p>​</p>
</li>
</ol>
<p>	</p>
<h2 id="缓存击穿-量太大"><a href="#缓存击穿-量太大" class="headerlink" title="缓存击穿(量太大)"></a>缓存击穿(量太大)</h2><p><strong>一个key查询并发巨大,当key失效瞬间,击穿了缓存层,直接访问数据库</strong></p>
<ol>
<li>设置热点数据不过期</li>
<li>加互斥锁 :  setnx  分布式锁.保证对于每个key同时只有<strong>一个线程</strong>去查询后端服务,其他线程没有获得分布式锁的权限,因此只能<strong>等待</strong>.</li>
</ol>
<h2 id="缓存雪崩-都崩溃"><a href="#缓存雪崩-都崩溃" class="headerlink" title="缓存雪崩 (都崩溃)"></a>缓存雪崩 (都崩溃)</h2><ol>
<li>redis高可用,异地多活</li>
<li>限流降级   加锁 限制线程 访问</li>
<li>数据预热   缓存数据过期时间差异</li>
</ol>
<h2 id="Redis内存优化"><a href="#Redis内存优化" class="headerlink" title="Redis内存优化"></a>Redis内存优化</h2><ol>
<li><p>关闭 Redis 的虚拟内存[VM]功能，即 redis.conf 中 vm-enabled &#x3D; no</p>
</li>
<li><p>设置 redis.conf 中 maxmemory ，用于告知 Redis 当使用了多少物理内存后拒绝继续写入的请求，可防止 Redis 性能降低甚至崩溃</p>
</li>
<li><p>可为指定的数据类型设置内存使用规则，从而提高对应数据类型的内存使用效率</p>
</li>
<li><p>Hash 在 redis.conf 中有以下两个属性，任意一个超出设定值，则会使用 HashMap 存值</p>
<p>hash-max-zipmap-entires 64 表示当 value 中的 map 数量在 64 个以下时，实际使用 zipmap 存储值</p>
<p>hash-max-zipmap-value 512 表示当 value 中的 map 每个成员值长度小于 512 字节时，实际使用 zipmap 存储值</p>
<p>List 在 redis.conf 中也有以下两个属性</p>
<p>list-max-ziplist-entires 64</p>
<p>list-max-ziplist-value 512</p>
<p>在 Redis 的源代码中有一行宏定义 REDIS-SHARED-INTEGERS &#x3D; 10000 ，修改该值可以改变 Redis 存储数值类型的内存开销</p>
</li>
</ol>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401194147.jpg" alt="QQ截图20200401194120"></p>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200401194215.jpg" alt="QQ截图20200401194131"></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrcpy的一些记录</title>
    <url>/2020/05/08/Scrcpy%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p><a href="https://github.com/Genymobile/scrcpy/releases">https://github.com/Genymobile/scrcpy/releases</a></p>
</blockquote>
<ul>
<li>手机打开USB调试</li>
</ul>
<span id="more"></span>
<h2 id="重要操作"><a href="#重要操作" class="headerlink" title="重要操作"></a>重要操作</h2><ul>
<li>adb kill-server</li>
<li>adb devices</li>
<li>adb usb</li>
</ul>
<h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><blockquote>
<p>打开scrycpy</p>
</blockquote>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th align="center">切换全屏模式</th>
<th align="center">Ctrl+f</th>
</tr>
</thead>
<tbody><tr>
<td align="center">点击手机电源</td>
<td align="center">Ctrl+p</td>
</tr>
<tr>
<td align="center">返回</td>
<td align="center">Ctrl+b</td>
</tr>
<tr>
<td align="center">返回到HOME</td>
<td align="center">Ctrl+h</td>
</tr>
<tr>
<td align="center">多任务</td>
<td align="center">Ctrl+s</td>
</tr>
<tr>
<td align="center">显示最佳窗口</td>
<td align="center">Ctrl+g</td>
</tr>
<tr>
<td align="center">调节音量</td>
<td align="center">Ctrl+上下</td>
</tr>
<tr>
<td align="center">关闭设备屏幕（保持镜像）</td>
<td align="center">Ctrl+o</td>
</tr>
</tbody></table>
<p>#帮助<br>scrcpy –help</p>
<p>#设置码率（默认8M）<br>scrcpy -b 8M</p>
<p>#限制投屏尺寸<br>scrcpy -m 1024</p>
<p>#裁剪投屏屏幕(长:宽:偏移x:偏移y)<br>scrcpy -c 800:800:0:0</p>
<p>#投屏并录屏<br>scrcpy -r file.mp4</p>
<p>#不投屏只录屏<br>scrcpy -Nr file.mp4</p>
<p>#手指触摸的时候显示轨迹球<br>scrcpy -t</p>
<p>#一些快捷键<br>切换全屏模式 Ctrl+f<br>将窗口调整为1：1（完美像素） Ctrl+g<br>调整窗口大小以删除黑色边框 Ctrl+x | 双击黑色背景<br>设备HOME键 Ctrl+h | 鼠标中键<br>设备BACK键 Ctrl+b | 鼠标右键<br>设备任务管理键 Ctrl+s<br>设备 菜单 键 Ctrl+m<br>设备音量+键 Ctrl+↑<br>设备音量-键 Ctrl+↓<br>设备电源键 Ctrl+p<br>点亮手机屏幕 鼠标右键<br>复制内容到设备 Ctrl+v<br>启用&#x2F;禁用FPS计数器（stdout） Ctrl+i<br>安装APK 将apk文件拖入投屏<br>传输文件到设备 将文件拖入投屏（非apk）</p>
]]></content>
  </entry>
  <entry>
    <title>Sonarqube的使用</title>
    <url>/2021/01/11/Sonarqube%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Sonarqube的使用"><a href="#Sonarqube的使用" class="headerlink" title="Sonarqube的使用"></a>Sonarqube的使用</h2><blockquote>
<p>在Sonarqube中安装Java 语言检查的插件 ,顺便安装Chinese</p>
<p>在Idea上安装 SonarLint 插件</p>
</blockquote>
<h5 id="在Sonarqube上"><a href="#在Sonarqube上" class="headerlink" title="在Sonarqube上"></a>在Sonarqube上</h5><ol>
<li>安装Chinese Pack 插件</li>
<li>安装CheckStyle 等对应语言的插件</li>
<li>创建项目,并获得一个令牌,在Idea中配置使用</li>
<li>项目语言 Java -&gt; Maven</li>
<li>使用mvn 命令对代码进行扫描</li>
</ol>
<h5 id="在Idea上"><a href="#在Idea上" class="headerlink" title="在Idea上"></a>在Idea上</h5><ol>
<li>安装插件  SonarLint</li>
<li>配置 SonarLint  General Settings  &#x2F;  ✔  Automatically tigger analysis &#x2F;  配置 sonarqube的地址</li>
<li>配置token</li>
<li>配置 SonarLint  Project Settings   &#x2F;  关联sonarqube服务与项目</li>
<li>执行mvn   命令</li>
</ol>
<h5 id="手动安装插件"><a href="#手动安装插件" class="headerlink" title="手动安装插件"></a>手动安装插件</h5><ol>
<li><p>插件地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://binaries.sonarsource.com/Distribution/</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传到$SONARQUBE-HOME&#x2F;extensions&#x2F;downloads目录中、记得要重启sonarqube服务器</p>
</li>
</ol>
<h5 id="启动检测"><a href="#启动检测" class="headerlink" title="启动检测"></a>启动检测</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- opcua  dev</span><br><span class="line">    </span><br><span class="line">mvn sonar:sonar  -Dsonar.projectKey=opc -Dsonar.host.url=http://xxxx.xxx.com:31006  -Dsonar.login=3e8e4ba567b8b4dd547727cxxxxx3bc3d1404</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- devops_corp  dev</span><br><span class="line"></span><br><span class="line">mvn sonar:sonar -Dsonar.projectKey=devops_crop -Dsonar.host.url=http://xxx.xx.com:31006 -Dsonar.login=304010fd0c77a8a4c9054xxxxxxxx3</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringBoot你应该知道的东西</title>
    <url>/2019/11/09/SpringBoot%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<h3 id="SpringBoot的优点"><a href="#SpringBoot的优点" class="headerlink" title="SpringBoot的优点"></a>SpringBoot的优点</h3><pre><code>1.可独立运行,内部已经拥有tomcat,jetty容器,不需要再打成war包放到容器中运行
2.简化配置,spring-boot-starter-web 容器自动依赖了其他核心组件,提供了starter的pom配置,减少maven配置
3.自动配置,根据当前路径下的类,jar包来自动配置bean
4.不需要代码,xml进行参数配置,与springmvc那样的xml配置不同
5.自身提供了一系列的监控功能
</code></pre>
<h3 id="Spring-Boot-的核心配置文件"><a href="#Spring-Boot-的核心配置文件" class="headerlink" title="Spring Boot 的核心配置文件"></a>Spring Boot 的核心配置文件</h3><span id="more"></span>

<pre><code>bootstrap (.yml/.properties)  springcloud使用
application (.yml/.properties)
Spring Cloud 构建于 Spring Boot 之上，在 Spring Boot 中有两种上下文，一种是 bootstrap,，另外一种是 application,，bootstrap 是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。

因此，对比 application 配置文件，bootstrap 配置文件具有以下几个特性：  
boostrap 由父 ApplicationContext 加载，比 applicaton 优先加载
boostrap 里面的属性不能被覆盖

bootstrap/ application 的应用场景：
application 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。
bootstrap 配置文件有以下几个应用场景：
使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；
一些固定的不能被覆盖的属性
一些加密/解密的场景。  
</code></pre>
<h3 id="spring的核心注解"><a href="#spring的核心注解" class="headerlink" title="spring的核心注解"></a>spring的核心注解</h3><pre><code>@SpringBootConfiguration :组合@Configuration 注解,实现配置文件的功能
@EnableAutoConfiguration: 自动装配注解,也可以在@SpringBootApplication中关闭(excloud)
@ComponentScan: 组件的扫描
@Scope：注解在类上，描述spring容器如何创建Bean实例。  
    （1）singleton： 表示在spring容器中的单例，通过spring容器获得该bean时总是返回唯一的实例
    （2）prototype：表示每次获得bean都会生成一个新的对象
    （3）request：表示在一次http请求内有效（只适用于web应用）
    （4）session：表示在一个用户会话内有效（只适用于web应用）
    （5）globalSession：表示在全局会话内有效（只适用于web应用） 
@SpringBootApplication=@ComponentScan+@Configuration+@EnableAutoConfiguration
    关键功能由@Import提供，其导入的AutoConfigurationImportSelector的selectImports()方法通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有META-INF/spring.factories的jar包
</code></pre>
<h3 id="运行SpringBoot的方式"><a href="#运行SpringBoot的方式" class="headerlink" title="运行SpringBoot的方式"></a>运行SpringBoot的方式</h3><pre><code>1.打包用命令或者放到容器中运行
2.用 Maven/Gradle 插件运行
3.直接执行 main 方法运行
</code></pre>
<h3 id="开启SpringBoot特性的方式"><a href="#开启SpringBoot特性的方式" class="headerlink" title="开启SpringBoot特性的方式"></a>开启SpringBoot特性的方式</h3><pre><code>1.继承spring-boot-starter-parent项目
2.导入spring-boot-dependencies项目依赖
</code></pre>
<h3 id="自动配置的原理"><a href="#自动配置的原理" class="headerlink" title="自动配置的原理"></a>自动配置的原理</h3><pre><code>配置主要通过 @EnableAutoConfiguration, @Conditional, @EnableConfigurationProperties 或者 @ConfigurationProperties 等几个注解来进行自动配置完成的。
@EnableAutoConfiguration 开启自动配置，主要作用就是调用 Spring-Core 包里的 loadFactoryNames()，将 autoconfig 包里的已经写好的自动配置加载进来。
@Conditional 条件注解，通过判断类路径下有没有相应配置的 jar 包来确定是否加载和自动配置这个类。
@EnableConfigurationProperties 的作用就是，给自动配置提供具体的配置参数，只需要写在 application.properties 中，就可以通过映射写入配置类的 POJO 属性中
</code></pre>
<h3 id="在启动时运行代码"><a href="#在启动时运行代码" class="headerlink" title="在启动时运行代码"></a>在启动时运行代码</h3><pre><code>实现接口ApplicationRunner或者CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个run方法。
</code></pre>
<h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><pre><code>@PropertySource     
@Value  参数属性
@Environment  
@ConfigurationPropertier 类
</code></pre>
<h3 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h3><pre><code>默认使用logback, 项目中是slf4j
</code></pre>
<h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><pre><code>Spring Loaded
Spring-boot-devtools
</code></pre>
<h3 id="配置加载顺序"><a href="#配置加载顺序" class="headerlink" title="配置加载顺序"></a>配置加载顺序</h3><pre><code>1、开发者工具 `Devtools` 全局配置参数；
2、单元测试上的 `@TestPropertySource` 注解指定的参数；
3、单元测试上的 `@SpringBootTest` 注解指定的参数；
4、命令行指定的参数，如 `java -jar springboot.jar --name=&quot;Java技术栈&quot;`；
5、命令行中的 `SPRING_APPLICATION_JSON` 指定参数, 如 `java -Dspring.application.json=&#39;&#123;&quot;name&quot;:&quot;Java技术栈&quot;&#125;&#39; -jar springboot.jar`
6、`ServletConfig` 初始化参数；
7、`ServletContext` 初始化参数；
8、JNDI参数（如 `java:comp/env/spring.application.json`）；
9、Java系统参数（来源：`System.getProperties()`）；
10、操作系统环境变量参数；
11、`RandomValuePropertySource` 随机数，仅匹配：`ramdom.*`；
12、JAR包外面的配置文件参数（`application-&#123;profile&#125;.properties（YAML）`）
13、JAR包里面的配置文件参数（`application-&#123;profile&#125;.properties（YAML）`）
14、JAR包外面的配置文件参数（`application.properties（YAML）`）
15、JAR包里面的配置文件参数（`application.properties（YAML）`）
16、`@Configuration`配置文件上 `@PropertySource` 注解加载的参数；
17、默认参数（通过 `SpringApplication.setDefaultProperties` 指定）
</code></pre>
<h3 id="常用starter组件"><a href="#常用starter组件" class="headerlink" title="常用starter组件"></a>常用starter组件</h3><pre><code>Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成Spring及其他技术，而不需要到处找示例代码和依赖包。
如你想使用Spring JPA访问数据库，只要加入spring-boot-starter-data-jpa启动器依赖就能使用了。
Starters包含了许多项目中需要用到的依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。 

spring-boot-starter-parent //boot项目继承的父项目模块.
spring-boot-starter-web //boot项目集成web开发模块.
spring-boot-starter-tomcat //boot项目集成tomcat内嵌服务器.
spring-boot-starter-test //boot项目集成测试模块.
mybatis-spring-boot-starter-mybatis //boot项目集成mybatis框架.
spring-boot-starter-jdbc //boot项目底层集成jdbc实现数据库操作支持.
</code></pre>
<h3 id="JavaBean的创建"><a href="#JavaBean的创建" class="headerlink" title="JavaBean的创建"></a>JavaBean的创建</h3><pre><code>SpringApplication.run(App.class,args) 
refreshContext(context) 
finishBeanFactoryInitialization(beanFactory) 
beanFactory.preInstantiateSingletons() 
getBean(beanName)   //通过名字获取bean
doGetBean() 		//执行getbean 方法
</code></pre>
<h3 id="Spring-bean的五个作用域"><a href="#Spring-bean的五个作用域" class="headerlink" title="Spring bean的五个作用域"></a>Spring bean的五个作用域</h3><pre><code>singleton：单例模式，当spring创建applicationContext容器的时候，spring会欲初始化所有的该作用域实例，加上lazy-init就可以避免预处理；
prototype：原型模式，每次通过getBean获取该bean就会新产生一个实例，创建后spring将不再对其管理；
request：搞web的大家都应该明白request的域了吧，就是每次请求都新产生一个实例，和prototype不同就是创建后，接下来的管理，spring依然在监听；
session：每次会话，同上；
global session：全局的web域，类似于servlet中的application。

单例不用每次都new，当然快
</code></pre>
]]></content>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/2020/04/02/ThreadLocal/</url>
    <content><![CDATA[<p><strong>很多年前面试就遇到过这个问题,实际上用的并不多,以至于对他的了解更不多</strong></p>
<h2 id="ThreadLocal是什么"><a href="#ThreadLocal是什么" class="headerlink" title="ThreadLocal是什么"></a>ThreadLocal是什么</h2><p>是线程的本地存储,一个本地线程副本变量工具类.将私有线程和该线程存放的副本对象做映射,每个线程之间的变量互不影响,高并发状态下,可以实现无状态的调用,特别适用于各个线程依赖不同的变量值完成操作的场景.</p>
<p>实际上在每个线程中都创建了一个ThreadLocalMap对象,每个线程都可以访问自己内部ThreadLocalMap对象中的value.</p>
<p>经典的使用场景是为每个线程分配一个 JDBC 连接 Connection。这样就可以保证每个线程的都在各自的 Connection 上进行数据库的操作，不会出现 A 线程关了 B线程正在使用的 Connection； 还有 Session 管理 等问题。</p>
<p><strong>每个线程都可以向其内保存数据，谁保存了，谁就可以获取到！没有保存，是获取不到的！</strong></p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200402162542.jpg" alt="QQ截图20200402162536"></p>
<span id="more"></span>

<ul>
<li>每个Thread线程内部都有一个Map</li>
<li>Map存储线程本地对象(key)和线程变量副本(value)</li>
<li>Thread内部的Map是由ThreadLocal维护,set &#x2F;  get</li>
<li>实现线程的隔离,互不干扰</li>
</ul>
<h2 id="核心方法API"><a href="#核心方法API" class="headerlink" title="核心方法API"></a>核心方法API</h2><ul>
<li>set() –&gt; 保存数据，底层在操作map，使用Thread.currentThread()</li>
<li>get() –&gt; 获取数据，底层在操作map，使用Thread.currentThread()</li>
<li>remvoe() –&gt; 移除数据，底层在操作map，使用Thread.currentThread()</li>
<li>initialValue()   为当前线程初始副本变量值</li>
</ul>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> (T)e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> T <span class="title function_">setInitialValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> initialValue();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> T <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>获取当前线程的ThreadLocalMap对象threadLocals</li>
<li>从map中获取线程存储的K - V Entry 节点 Map</li>
<li>从map中获取存储的value副本值返回</li>
<li>map为空的话返回初始值null</li>
</ol>
<h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>获取当前线程的成员变量map</li>
<li>map非空,则重新将ThreadLocal和新的value副本放入到map中</li>
<li>map为空,则对想成的成员变量ThreadLocalMap进行初始化创建,并存放到map</li>
</ol>
<h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">ThreadLocalMap</span> <span class="variable">m</span> <span class="operator">=</span> getMap(Thread.currentThread());</span><br><span class="line"> <span class="keyword">if</span> (m != <span class="literal">null</span>)</span><br><span class="line">     m.remove(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><p>ThreadLocal内部类,没有实现map接口,用独立的方式实现了Map的功能,内部的Entry也独立实现</p>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/20200402163806.jpg" alt="QQ截图20200402163801"></p>
<p><strong>在ThreadlocalMap中,也是用Entry来保存K-V结构数据,但是Entry中key只能是ThreadLocal对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&gt; &#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal k, Object v) &#123;</span><br><span class="line">        <span class="built_in">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Entry继承自WeakReference(弱引用,只能活到下次 GC前),但是只有key是弱引用,value不是弱引用</p>
<p><strong>ThreadLocalMap成员变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalMap</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The initial capacity -- MUST be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table, resized as necessary.</span></span><br><span class="line"><span class="comment">     * table.length MUST always be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of entries in the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next size value at which to resize.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocalMap和HashMap"><a href="#ThreadLocalMap和HashMap" class="headerlink" title="ThreadLocalMap和HashMap?"></a>ThreadLocalMap和HashMap?</h2><p>ThreadLocalMap结构非常简单,<strong>没有next引用之类</strong>,也就是说ThreadLocalMap中<strong>解决Hash冲突的方式并不是链表的方式,而是采用线性探测方式</strong>(根据初识key的hashcode值确定元素在table数组中的位置,如果占用,则利用固定算法寻找.</p>
<p><strong>ThreadLocalMap解决Hash冲突的方式就是简单的步长加1或减1，寻找下一个相邻的位置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increment i modulo len.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decrement i modulo len.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">prevIndex</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样出现一个问题,就是线性探测的方式解决冲突的效率很低,如果有大量不同的ThreadLocal对象放入map发生冲突,则效率很低</p>
<p><strong>建议:</strong></p>
<blockquote>
<p>每个线程只存一个变量,这样的话所有的线程存放到map中的Key都是相同的ThreadLocal，如果一个线程要保存多个变量，就需要创建多个ThreadLocal，多个ThreadLocal放入Map中时会极大的增加Hash冲突的可能。</p>
</blockquote>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏?"></a>内存泄漏?</h2><p>由于ThreadLocalMap的key是弱引用,而value是强引用.</p>
<p>当ThreadLocal在没有外部对象强引用时候,发生GC时候key被回收,而value不回收,可能发生内存泄漏</p>
<p><strong>如何避免</strong></p>
<p>key是弱引用,那么在set&#x2F;get时,再调用remove方法,将Entry节点和Map的关系移除,这样整个Entry对象在 GC Roots分析后就变成不可达,下次就会被回收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal&lt;Session&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Session&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    threadLocal.set(<span class="keyword">new</span> <span class="title class_">Session</span>(<span class="number">1</span>, <span class="string">&quot;one Thread Value&quot;</span>));</span><br><span class="line">    <span class="comment">// 其它业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    threadLocal.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>经典的使用场景是为每个线程分配一个 JDBC 连接 Connection。这样就可以保证每个线程的都在各自的 Connection 上进行数据库的操作，不会出现 A 线程关了 B线程正在使用的 Connection； 还有 Session 管理 等问题。</strong> </p>
<p><strong>Hibernate的session获取场景</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Session&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Session&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Session</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title function_">getCurrentSession</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span>  threadLocal.get();</span><br><span class="line">    <span class="comment">//判断Session是否为空，如果为空，将创建一个session，并设置到本地线程变量中</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(session ==<span class="literal">null</span>&amp;&amp;!session.isOpen())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sessionFactory==<span class="literal">null</span>)&#123;</span><br><span class="line">                rbuildSessionFactory();<span class="comment">// 创建Hibernate的SessionFactory</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                session = sessionFactory.openSession();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        threadLocal.set(session);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个线程访问数据库都应当是一个独立的Session会话，如果多个线程共享同一个Session会话，有可能其他线程关闭连接了，当前线程再执行提交时就会出现会话已关闭的异常，导致系统异常。此方式能避免线程争抢Session，提高并发下的安全性。</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMq你要知道的事情</title>
    <url>/2019/11/09/SpringBoot%E6%95%B4%E5%90%88RabbitMq/</url>
    <content><![CDATA[<h3 id="rabbitmq-的使用场景"><a href="#rabbitmq-的使用场景" class="headerlink" title="rabbitmq 的使用场景"></a>rabbitmq 的使用场景</h3><pre><code> ①. 跨系统的异步通信: 所有需要异步交互的地方都可以使用消息队列.

②. 多个应用之间的解耦: 由于消息队列是平台无关和语言无关的,而且语义上也不再是函数调用,因此适合作为多个应用之间的松耦合的接口.

③. 应用内的同步变异步: 比如订单处理,就可以由前端应用将订单信息放到队列,后端应用从队列里依次获得消息处理,高峰时的大量订单可以积压在队列里慢慢处理掉.

④. 消息驱动的架构(EDA): 系统分解为消息队列,消息制造者和消息消费者,一个处理流程可以根据需要拆成多个阶段,阶段之间用队列连接起来,前一个阶段处理的结果放入队列,后一个阶段从队列中获取消息继续处理.

⑤. 跨局域网甚至跨城市的通讯: 比如北京机房与广州机房的应用程序的通信. 
 
</code></pre>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><span id="more"></span>
<pre><code>生产者: 消息的创建者,负责创建和推送数据到消息服务器;
消费者: 消息的接收方,用于处理数据和确认消息;
代理: 就是 RabbitMQ 本身,用于扮演“快递”的角色,本身不生产消息,只是扮演“快递”的角色.
</code></pre>
<h3 id="重要的组件"><a href="#重要的组件" class="headerlink" title="重要的组件"></a>重要的组件</h3><pre><code>ConnectionFactory(连接管理器): 应用程序与Rabbit之间建立连接的管理器,程序代码中使用.
Channel(信道): 消息推送使用的通道.
Exchange(交换器): 用于接受、分配消息.
Queue(队列): 用于存储生产者的消息.
RoutingKey(路由键): 用于把生产者的消息分配到交换器上.
BindingKey(绑定键): 用于把交换器的消息绑定到队列上.  
  
</code></pre>
<h3 id="vhost"><a href="#vhost" class="headerlink" title="vhost"></a>vhost</h3><blockquote>
<p>vhost 可以理解为虚拟 broker,即 mini-RabbitMQ server.其内部均含有独立的 queue、exchange 和 binding 等.但最最重要的是,其拥有独立的权限系统,可以做到 vhost 范围的用户控制.当然,从 RabbitMQ 的全局角度,vhost 可以作为不同权限隔离的手段(一个典型的例子就是不同的应用可以跑在不同的 vhost 中).</p>
</blockquote>
<h3 id="消息是怎么发送"><a href="#消息是怎么发送" class="headerlink" title="消息是怎么发送"></a>消息是怎么发送</h3><blockquote>
<p>首先客户端必须连接到 RabbitMQ 服务器才能发布和消费消息,客户端和 rabbit server 之间会创建一个 tcp 连接,一旦 tcp 打开并通过了认证(认证就是你发送给 rabbit 服务器的用户名和密码),你的客户端和 RabbitMQ 就创建了一条 amqp 信道(channel),信道是创建在“真实” tcp 上的虚拟连接,amqp 命令都是通过信道发送出去的,每个信道都会有一个唯一的 id,不论是发布消息,订阅队列都是通过这个信道完成的.</p>
</blockquote>
<h3 id="稳定性-消息事务-消息确认机制"><a href="#稳定性-消息事务-消息确认机制" class="headerlink" title="稳定性 (消息事务;消息确认机制)"></a>稳定性 (消息事务;消息确认机制)</h3><h3 id="避免消息丢失-消息持久化-ACK确认机制-设置集群镜像模式-消息补偿机制"><a href="#避免消息丢失-消息持久化-ACK确认机制-设置集群镜像模式-消息补偿机制" class="headerlink" title="避免消息丢失(消息持久化;ACK确认机制;设置集群镜像模式;消息补偿机制)"></a>避免消息丢失(消息持久化;ACK确认机制;设置集群镜像模式;消息补偿机制)</h3><h3 id="保证消息持久化成功的条件-使用的是磁盘而非内存存储-从而降低了吞吐量"><a href="#保证消息持久化成功的条件-使用的是磁盘而非内存存储-从而降低了吞吐量" class="headerlink" title="保证消息持久化成功的条件(使用的是磁盘而非内存存储,从而降低了吞吐量)"></a>保证消息持久化成功的条件(使用的是磁盘而非内存存储,从而降低了吞吐量)</h3><pre><code>声明队列必须设置持久化 durable 设置为 true.
消息推送投递模式必须设置持久化,deliveryMode 设置为 2(持久);
消息已经到达持久化交换器;
消息已经到达持久化队列.
</code></pre>
<h3 id="延迟消息队列-通过消息过期后进入死信交换器-再由交换器转发到延迟消费队列-实现延迟功能"><a href="#延迟消息队列-通过消息过期后进入死信交换器-再由交换器转发到延迟消费队列-实现延迟功能" class="headerlink" title="延迟消息队列(通过消息过期后进入死信交换器,再由交换器转发到延迟消费队列,实现延迟功能)"></a>延迟消息队列(通过消息过期后进入死信交换器,再由交换器转发到延迟消费队列,实现延迟功能)</h3><h3 id="保证mq数据不丢失"><a href="#保证mq数据不丢失" class="headerlink" title="保证mq数据不丢失?"></a>保证mq数据不丢失?</h3><pre><code>1.生产者和mq队列之前传输要使用确认机制,生产者发送消息给mq丢列后,mq要进行接口回调告诉生产者这个数据我已经收到了.如果发送失败生产者要有重试机制进行重新发送.
2.mq队列要进行数据的持久化,保证mq挂掉后数据不会丢失.或者保持mq队列的高可用性,防止mq宕机造成数据丢失.
3.消费者和mq队列之间也要加入确认机制,待消费者处理完具体的业务后,注意是处理完业务逻辑后,再回调mq,告诉mq我已经处理完了.
</code></pre>
<h3 id="mq中的消息过期失效的解决办法"><a href="#mq中的消息过期失效的解决办法" class="headerlink" title="mq中的消息过期失效的解决办法"></a>mq中的消息过期失效的解决办法</h3><blockquote>
<p>设置过期时间的,也就是 TTL.如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉,这个数据就没了.<br>这个情况下,就不是说要增加 consumer 消费积压的消息,因为实际上没啥积压,而是丢了大量的消息.我们可以采取一个方案,就是批量重导,就是大量积压的时候,我们当时就直接丢弃数据了,然后等过了高峰期以后,比如大家一起喝咖啡熬夜到晚上12点以后,用户都睡觉了,这个时候我们就开始写程序,将丢失的那批数据,写个临时程序,一点一点的查出来,然后重新灌入 mq 里面去,把白天丢的数据给他补回来,也只能是这样了.<br>假设 1 万个订单积压在 mq 里面,没有处理,其中 1000 个订单都丢了,你只能手动写程序把那 1000 个订单给查出来,手动发到 mq 里去再补一次.</p>
</blockquote>
<h3 id="写一个消息队列-该如何进行架构设计"><a href="#写一个消息队列-该如何进行架构设计" class="headerlink" title="写一个消息队列,该如何进行架构设计"></a>写一个消息队列,该如何进行架构设计</h3><pre><code>设计个分布式的系统,kafaka设计原理broker -&gt; topic -&gt; partition,每个 partition 放一个机器
持久化到磁盘
mq的可用性,多副本
数据丢失性能
</code></pre>
]]></content>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu_docker安装</title>
    <url>/2020/04/22/Ubuntu-docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装成功使用就好"><a href="#安装成功使用就好" class="headerlink" title="安装成功使用就好"></a>安装成功使用就好</h2><ul>
<li><p>首先必然是update了</p>
</li>
<li><p>然后install  docker 和 docker.io</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install  docker</span><br><span class="line"></span><br><span class="line">sudo apt-get install  docker.io</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>
<ul>
<li><p>安装docker 仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install  docker-registry</span><br></pre></td></tr></table></figure>

<p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="拷贝文件到容器"><a href="#拷贝文件到容器" class="headerlink" title="拷贝文件到容器"></a>拷贝文件到容器</h2><h2 id="获取容器name（-heuristic-mccarthy-）"><a href="#获取容器name（-heuristic-mccarthy-）" class="headerlink" title="获取容器name（ heuristic_mccarthy ）"></a>获取容器name（ heuristic_mccarthy ）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>

<h2 id="通过names-拿到Id-全称"><a href="#通过names-拿到Id-全称" class="headerlink" title="通过names 拿到Id 全称"></a>通过names 拿到Id 全称</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect -f &#x27;&#123;&#123;.Id&#125;&#125;&#x27; heuristic_mccarthy</span><br></pre></td></tr></table></figure>

<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><p>docker cp host_path containerID:container_path</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp xxxx 全称:/xxx</span><br><span class="line"></span><br><span class="line">docker cp host_path containerID:container_path</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>Ubuntu安装MongoDB数据库</title>
    <url>/2018/06/11/Ubuntu%E5%AE%89%E8%A3%85MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p><img src="/uploads/mongodb.jpg" alt="avatar"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官网：</p>
<blockquote>
<p><a href="https://www.mongodb.org/">https://www.mongodb.org/</a></p>
</blockquote>
<p>官方教程：</p>
<blockquote>
<p><a href="http://docs.mongodb.org/master/tutorial/install-mongodb-on-red-hat/">http://docs.mongodb.org/master/tutorial/install-mongodb-on-red-hat/</a></p>
</blockquote>
<span id="more"></span>

<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>导入 apt-key</p>
<blockquote>
<p>sudo apt-key adv –keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 –recv 9DA31620334BD75D9DCB49F368818C72E52529D4</p>
</blockquote>
</li>
<li><p>Create a list file for MongoDB.</p>
<blockquote>
<p>echo “deb [ arch&#x3D;amd64,arm64 ] <a href="https://repo.mongodb.org/apt/ubuntu">https://repo.mongodb.org/apt/ubuntu</a> xenial&#x2F;mongodb-org&#x2F;testing multiverse” | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-4.0.list</p>
</blockquote>
</li>
<li><p>update</p>
<blockquote>
<p>sudo apt-get update</p>
</blockquote>
</li>
<li><p>Install </p>
<blockquote>
<p>sudo apt-get install -y mongodb-org</p>
</blockquote>
</li>
</ol>
<h5 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h5><blockquote>
<p>sudo apt-get install -y mongodb-org&#x3D;4.0.0-rc3 mongodb-org-server&#x3D;4.0.0-rc3 mongodb-org-shell&#x3D;4.0.0-rc3 mongodb-org-mongos&#x3D;4.0.0-rc3 mongodb-org-tools&#x3D;4.0.0-rc3</p>
</blockquote>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><blockquote>
<p>sudo service mongod stop　　#停止服务<br>sudo service mongod start　　#启动服务<br>sudo service mongod restart #重新启动服务<br>sudo service mongod status #查看状态</p>
</blockquote>
<h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><blockquote>
<p>mongodump –host&#x3D;ip  –port&#x3D;27717  –username&#x3D;pzx_online  –password&#x3D;    –db&#x3D;pzx_online  –out&#x3D;.&#x2F;</p>
</blockquote>
<h1 id="导入-应先设置好数据库用户名和密码"><a href="#导入-应先设置好数据库用户名和密码" class="headerlink" title="导入(应先设置好数据库用户名和密码)"></a>导入(应先设置好数据库用户名和密码)</h1><blockquote>
<p>mongorestore –host&#x3D;127.0.0.1 –port&#x3D;27717 –username&#x3D;   –password&#x3D;j  –db&#x3D;pzx  –dir&#x3D;pzx_test –authenticationDatabase admin</p>
</blockquote>
<h1 id="如果不加–authenticationDatabase-admin-会出现权限问题"><a href="#如果不加–authenticationDatabase-admin-会出现权限问题" class="headerlink" title="如果不加–authenticationDatabase admin  会出现权限问题"></a>如果不加–authenticationDatabase admin  会出现权限问题</h1><h5 id="关于用户名和密码"><a href="#关于用户名和密码" class="headerlink" title="关于用户名和密码"></a>关于用户名和密码</h5><ol>
<li>先注释 &#x2F;etc&#x2F;mongod.conf 里的：</li>
</ol>
<blockquote>
<p>  security:<br>    authorization: enabled</p>
</blockquote>
<ol start="2">
<li>重启 mongod</li>
</ol>
<blockquote>
<p>service mongod restart 在 Ubunu16.04 ,mongo3.6下不好使,执行完后,没有错误提示,但是没有效果.<br>ps aux | grep mongo<br>kill -9  pid<br>&#x2F;usr&#x2F;bin&#x2F;mongod -f &#x2F;etc&#x2F;mongod.conf &amp;</p>
</blockquote>
<ol start="3">
<li>清除用户</li>
</ol>
<blockquote>
<p>use admin<br>db.system.users.remove({})</p>
</blockquote>
<ol start="4">
<li><p>添加用户：</p>
<ul>
<li>先添加 root 角色</li>
</ul>
<blockquote>
<p>use admin<br>db.createUser( { user: “admin” , pwd:”123”, roles:[ “root” ,  “readWrite” ]   } );</p>
</blockquote>
<ul>
<li>再创建数据库</li>
</ul>
<blockquote>
<p>use pzx<br>db.createUser( { user: “pzx” , pwd:”123”, roles:[ “dbOwner” ,  “readWrite” ]   } );</p>
</blockquote>
</li>
<li><p>连接：</p>
<blockquote>
<p>mongo  数据库 –host ip  -u pzx -p 123<br> 注意，启用用户名密码后， 必须填写 数据库 名字。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>操作记录</category>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu修改密码</title>
    <url>/2018/09/25/Ubuntu%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h4 id="1-开机shift-找到-recovery-mode"><a href="#1-开机shift-找到-recovery-mode" class="headerlink" title="1 开机shift,找到(recovery mode)"></a>1 开机shift,找到(recovery mode)</h4><h4 id="2-e-将“ro-recovery-nomodeset”替换为“quiet-splash-rw-init-x3D-x2F-bin-x2F-bash”，按下-F10-或者-Ctrl-x-重启系统。"><a href="#2-e-将“ro-recovery-nomodeset”替换为“quiet-splash-rw-init-x3D-x2F-bin-x2F-bash”，按下-F10-或者-Ctrl-x-重启系统。" class="headerlink" title="2 e,将“ro recovery nomodeset”替换为“quiet splash rw init&#x3D;&#x2F;bin&#x2F;bash”，按下[F10]或者[Ctrl+x]重启系统。"></a>2 e,将“ro recovery nomodeset”替换为“quiet splash rw init&#x3D;&#x2F;bin&#x2F;bash”，按下[F10]或者[Ctrl+x]重启系统。</h4><h4 id="3-直接使用命令passwd更改root密码，之后重启"><a href="#3-直接使用命令passwd更改root密码，之后重启" class="headerlink" title="3 直接使用命令passwd更改root密码，之后重启"></a>3 直接使用命令passwd更改root密码，之后重启</h4>]]></content>
      <tags>
        <tag>密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中+ElementUI多语言的配置</title>
    <url>/2018/06/28/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD-ElementUI%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/uploads/vue.png" alt="avatar"></p>
<p><img src="/uploads/element.png" alt="avatar"></p>
<h4 id="项目中的国际化差不多快做完了-有一些elementUI中的东西-使用了vue-i18n去实现"><a href="#项目中的国际化差不多快做完了-有一些elementUI中的东西-使用了vue-i18n去实现" class="headerlink" title="项目中的国际化差不多快做完了,有一些elementUI中的东西,使用了vue-i18n去实现"></a>项目中的国际化差不多快做完了,有一些elementUI中的东西,使用了vue-i18n去实现</h4><blockquote>
<p>在package.json 中添加 vue-i18n 的依赖, 版本我用的是”vue-i18n”: “^5.0.3”,使用最新的8.0.0版本有bug</p>
</blockquote>
<span id="more"></span>

<h4 id="ElmentUI-引入方法没有成功"><a href="#ElmentUI-引入方法没有成功" class="headerlink" title="ElmentUI 引入方法没有成功"></a>ElmentUI 引入方法没有成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 完整引入 Element</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import ElementUI from &#x27;element-ui&#x27;</span><br><span class="line">import locale from &#x27;element-ui/lib/locale/lang/en&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI, &#123; locale &#125;)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">// 按需引入 Element</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import &#123; Button, Select &#125; from &#x27;element-ui&#x27;</span><br><span class="line">import lang from &#x27;element-ui/lib/locale/lang/en&#x27;</span><br><span class="line">import locale from &#x27;element-ui/lib/locale&#x27;</span><br><span class="line"></span><br><span class="line">// 设置语言</span><br><span class="line">locale.use(lang)</span><br><span class="line"></span><br><span class="line">// 引入组件</span><br><span class="line">Vue.component(Button.name, Button)</span><br><span class="line">Vue.component(Select.name, Select)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="emmmm-最后其实就判断window-location-动态的设置locale-完全ojbk啊"><a href="#emmmm-最后其实就判断window-location-动态的设置locale-完全ojbk啊" class="headerlink" title="emmmm 最后其实就判断window.location,动态的设置locale,完全ojbk啊"></a>emmmm 最后其实就判断window.location,动态的设置locale,完全ojbk啊</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (window.location.href.indexOf(&quot;en&quot;)&gt;0)&#123;</span><br><span class="line">  Vue.config.lang = &#x27;en&#x27;;</span><br><span class="line">  Vue.locale(&#x27;en&#x27;, enLocale)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  Vue.config.lang = &#x27;cn&#x27;;</span><br><span class="line">  Vue.locale(&#x27;zh-cn&#x27;, zhLocale)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="附官方例子"><a href="#附官方例子" class="headerlink" title="附官方例子"></a>附官方例子</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; $t(&quot;msg&quot;) &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">         &lt;select v-model=&quot;lang&quot; @change=&quot;setLanguage( lang )&quot; id=&quot;slideThree&quot;&gt;</span><br><span class="line">             &lt;option :value=&quot;&#x27;tw&#x27;&quot;&gt;繁體&lt;/option&gt;</span><br><span class="line">             &lt;option :value=&quot;&#x27;cn&#x27;&quot;&gt;简体&lt;/option&gt;</span><br><span class="line">         &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table class=&quot;am-table&quot;&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt; &#123;&#123; $t(&quot;delete&quot;) &#125;&#125;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt; &#123;&#123; $t(&quot;name&quot;) &#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;tr v-for=&quot;(list,index) in msg&quot;&gt;</span><br><span class="line">        &lt;td&gt;&lt;a href=&quot;javascript:;&quot; v-on:click=&quot;deletemsg(index,list)&quot; class=&quot;am-icon-times  am-icon-sm&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;list.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">        name: &#x27;msg&#x27;,</span><br><span class="line">        data () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                lang: this.$store.state.lang,</span><br><span class="line">                msg: [],</span><br><span class="line">                Newmsg: &#123;id: null, name: &#x27;&#x27;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">                this.axios.get(&#x27;/index.php/Welcome/msgapi&#x27;).then(response=&gt; &#123;</span><br><span class="line">                    this.msg = response.data</span><br><span class="line">                    console.log(response.data)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>国际化</category>
        <category>多语言</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>element</tag>
        <tag>多语言</tag>
        <tag>国际化</tag>
      </tags>
  </entry>
  <entry>
    <title>centos上安装微软雅黑字体</title>
    <url>/2020/01/06/centos%E4%B8%8A%E5%AE%89%E8%A3%85%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<h3 id="今天发现一个CentOS字体问题-记录下"><a href="#今天发现一个CentOS字体问题-记录下" class="headerlink" title="今天发现一个CentOS字体问题,记录下"></a>今天发现一个CentOS字体问题,记录下</h3><h5 id="分享到朋友圈图片的生成是由后台生成-但是生成的时候使用的微软雅黑字体"><a href="#分享到朋友圈图片的生成是由后台生成-但是生成的时候使用的微软雅黑字体" class="headerlink" title="分享到朋友圈图片的生成是由后台生成,但是生成的时候使用的微软雅黑字体"></a>分享到朋友圈图片的生成是由后台生成,但是生成的时候使用的微软雅黑字体</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//TODO 注意，这里的字体必须安装在服务器上</span><br><span class="line">g2D.setFont(new Font(&quot;Microsoft YaHei&quot;, Font.BOLD, 40));</span><br></pre></td></tr></table></figure>


<h5 id="本地测试的时候-以及上传到oss-读取的图片都是正常的-但是发布到服务器之后-就不正常了-各种方块-问题就一定出在这里-服务器上没有安装字体"><a href="#本地测试的时候-以及上传到oss-读取的图片都是正常的-但是发布到服务器之后-就不正常了-各种方块-问题就一定出在这里-服务器上没有安装字体" class="headerlink" title="本地测试的时候,以及上传到oss,读取的图片都是正常的,但是发布到服务器之后,就不正常了,各种方块,问题就一定出在这里,服务器上没有安装字体."></a>本地测试的时候,以及上传到oss,读取的图片都是正常的,但是发布到服务器之后,就不正常了,各种方块,问题就一定出在这里,服务器上没有安装字体.</h5><span id="more"></span>

<ul>
<li><input checked="" disabled="" type="checkbox"> 🎉 查看&#x2F;usr&#x2F;share目录下是否有fonts和fontconfig目录,执行命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#yum -y install fontconfig    </span><br><span class="line">生成 fonts和fontconfig目录</span><br></pre></td></tr></table></figure></li>
<li><input checked="" disabled="" type="checkbox"> 🚧  进入字体目录;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#cd /usr/share/fonts/</span><br></pre></td></tr></table></figure></li>
<li><input checked="" disabled="" type="checkbox"> 🛠 创建需要安装的字体目录； 顺便加权限<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mkdir invoice_needed_font</span><br><span class="line">#chmod -R 755 /usr/share/fonts/invoice_needed_font</span><br></pre></td></tr></table></figure></li>
<li><input checked="" disabled="" type="checkbox"> 💃🏻 去win电脑的 C:\Windows\Fonts 目录下,复制微软雅黑到invoice_needed_font目录下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msyhl.ttc</span><br></pre></td></tr></table></figure></li>
<li><input checked="" disabled="" type="checkbox"> 🚑 建立字体缓存<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mkfontscale	// 如果提示 mkfontscale: command not found，需自行安装 #yum install mkfontscale</span><br><span class="line">#mkfontdir</span><br><span class="line">#fc-cache –fv	// 刷新内存中的字体缓存</span><br><span class="line">#source /etc/profile	// 执行以下命令让字体生效 </span><br></pre></td></tr></table></figure></li>
<li><input checked="" disabled="" type="checkbox"> 📝 查看是否安装成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fc-list</span><br></pre></td></tr></table></figure></li>
<li><input checked="" disabled="" type="checkbox"> ✨ 就能看到微软雅黑啦~,如果不行就重启系统<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft YaHei</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>字体</tag>
        <tag>centOs</tag>
      </tags>
  </entry>
  <entry>
    <title>autojs的一些记录</title>
    <url>/2020/05/07/autojs%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="常见单个控件"><a href="#常见单个控件" class="headerlink" title="常见单个控件"></a>常见单个控件</h2><ul>
<li>TextView</li>
<li>ImageView</li>
<li>CheckBox</li>
<li>EditText</li>
<li>View</li>
</ul>
<span id="more"></span>
<h2 id="常见容器控件"><a href="#常见容器控件" class="headerlink" title="常见容器控件"></a>常见容器控件</h2><ul>
<li>LinearLayout		线性布局容器</li>
<li>RelativeLayout		相对布局容器</li>
<li>FrameLayout		帧布局</li>
<li>ListView</li>
<li>RecyclerView		复用容器</li>
<li>ScrollView</li>
</ul>
<h2 id="常见寻找方式"><a href="#常见寻找方式" class="headerlink" title="常见寻找方式"></a>常见寻找方式</h2><ul>
<li>text</li>
<li>desc</li>
<li>id</li>
<li>className</li>
</ul>
<blockquote>
<p>都有的方法   <strong>Contains</strong> . startWith . EndWith . Matches</p>
</blockquote>
<h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><ul>
<li>findOne()  <strong>阻塞</strong>方法   查找不到会一直查找 <strong>不继续执行</strong>,避免使用</li>
<li>findOnce()  <strong>非阻塞</strong>  找不到会继续执行</li>
<li>findOne(timeout)   毫秒值的<strong>timeout</strong>延时查找</li>
<li>find()    列表   可直接使用get()</li>
<li>findOne(id(“xxxx”))  可以返回一个select</li>
<li>scrollDown()</li>
<li>children()</li>
</ul>
<h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><ul>
<li>setScreenMetrics()  实现坐标自动缩放</li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="title function_">requestScreenCapture</span>()   <span class="comment">//请求截图</span></span><br><span class="line"><span class="keyword">let</span> color =  images.<span class="title function_">pixel</span>(img,xxx,xxx)</span><br><span class="line">color.<span class="title function_">isSimilar</span>(<span class="string">&quot;#33333&quot;</span>,<span class="string">&quot;#33333&quot;</span>)   </span><br><span class="line"><span class="comment">//然后就可以执行 操作了</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>docker基础命令</title>
    <url>/2022/06/24/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight plaintext"><figcaption><span>pull [OPTIONS] NAME[:TAG|@DIGEST]</span></figcaption><table><tr><td class="code"><pre><span class="line">查看镜像：docker images</span><br><span class="line">运行镜像：docker run [image]</span><br><span class="line">停止镜像：docker stop [image]</span><br><span class="line">删除镜像：docker image rm [image]</span><br><span class="line"></span><br><span class="line">查看进程：docker ps -a</span><br><span class="line">删除容器：docker rm [container]</span><br><span class="line">查看容器ip：docker inspect -f &#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; \ [container]</span><br><span class="line">（bridge模式下，此ip为docker内网ip，本地主机无法访问）</span><br><span class="line">查看log：docker logs [container]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建volume:$ docker volume create my-vol</span><br><span class="line">查看volume：$ docker volume ls</span><br><span class="line">查询volume:$ docker volume inspect my-vol</span><br><span class="line">删除volume:$ docker volume rm my-vol</span><br><span class="line"></span><br><span class="line">拷贝文件：docker cp 宿主机文件路径 镜像名称:镜像中文件存放路径</span><br><span class="line">拷贝文件夹：$ docker cp docker-offline/. centos:/root/</span><br></pre></td></tr></table></figure>

 <span id="more"></span>
<p>手动保存&#x2F;装载image<br>离线安装镜像，在联网主机上：<br>$ docker pull hello-world<br>$ docker save –output hello-world.tar {your image name or ID}</p>
<h3 id="在离线主机上："><a href="#在离线主机上：" class="headerlink" title="在离线主机上："></a>在离线主机上：</h3><p>$docker load –input hello-world.tar</p>
<h3 id="手动打包镜像："><a href="#手动打包镜像：" class="headerlink" title="手动打包镜像："></a>手动打包镜像：</h3><p>docker image build -t flask_api .</p>
<h2 id="找到docker-日志路径"><a href="#找到docker-日志路径" class="headerlink" title="找到docker 日志路径"></a>找到docker 日志路径</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 容器名字或者 ID | grep -i logpath</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>influxDb + telegraf 的记录</title>
    <url>/2022/05/24/influxDb%20+%20telegraf%20%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Influxdb-1-18-3-版本"><a href="#Influxdb-1-18-3-版本" class="headerlink" title="Influxdb 1.18.3 版本"></a>Influxdb 1.18.3 版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8086:8086 --name=influxdb influxdb:1.18.3</span><br></pre></td></tr></table></figure>

<p>这个版本是有前端ui界面的,所以进入8086进行配置</p>
<h2 id="telegraf"><a href="#telegraf" class="headerlink" title="telegraf"></a>telegraf</h2><ol>
<li><p>loaddata中进入telegraf  </p>
</li>
<li><p>创建config文件</p>
</li>
<li><p>具体配置规则可以去sources搜索,对应的sdk也可以搜索到</p>
</li>
<li><p>将修改后的配置文件 download 放到对应的目录 启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro telegraf</span><br></pre></td></tr></table></figure></li>
</ol>
 <span id="more"></span>
<ol start="5">
<li><p>或者可以直接使用  </p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1. Install the Latest Telegraf</span><br><span class="line">You can install the latest Telegraf by visiting the InfluxData Downloads page. If you already have Telegraf installed on your system, make sure it&#x27;s up to date. You will need version 1.9.2 or higher.</span><br><span class="line"></span><br><span class="line">2. Configure your API Token</span><br><span class="line">Your API token is required for pushing data into InfluxDB. You can copy the following command to your terminal window to set an environment variable with your token.</span><br><span class="line"></span><br><span class="line">export INFLUX<span class="built_in">_</span>TOKEN=&lt;INFLUX<span class="built_in">_</span>TOKEN&gt;</span><br><span class="line"></span><br><span class="line">3. Start Telegraf</span><br><span class="line">Finally, you can run the following command to start the Telegraf agent running on your machine.</span><br><span class="line"></span><br><span class="line">telegraf --config http://192.168.253.128:8086/api/v2/telegrafs/0798710b96e54000</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以在data explorer 中看到数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[agent]</span><br><span class="line">  interval = &quot;10s&quot;</span><br><span class="line">  round_interval = true</span><br><span class="line"></span><br><span class="line">  ## Telegraf will send metrics to outputs in batches of at most</span><br><span class="line">  ## metric_batch_size metrics.</span><br><span class="line">  ## This controls the size of writes that Telegraf sends to output plugins.</span><br><span class="line">  metric_batch_size = 1000</span><br><span class="line"></span><br><span class="line">  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each</span><br><span class="line">  ## output, and will flush this buffer on a successful write. Oldest metrics</span><br><span class="line">  ## are dropped first when this buffer fills.</span><br><span class="line">  ## This buffer only fills when writes fail to output plugin(s).</span><br><span class="line">  metric_buffer_limit = 10000</span><br><span class="line"></span><br><span class="line">  ## Collection jitter is used to jitter the collection by a random amount.</span><br><span class="line">  ## Each plugin will sleep for a random time within jitter before collecting.</span><br><span class="line">  ## This can be used to avoid many plugins querying things like sysfs at the</span><br><span class="line">  ## same time, which can have a measurable effect on the system.</span><br><span class="line">  collection_jitter = &quot;0s&quot;</span><br><span class="line"></span><br><span class="line">  ## Default flushing interval for all outputs. Maximum flush_interval will be</span><br><span class="line">  ## flush_interval + flush_jitter</span><br><span class="line">  flush_interval = &quot;10s&quot;</span><br><span class="line">  ## Jitter the flush interval by a random amount. This is primarily to avoid</span><br><span class="line">  ## large write spikes for users running a large number of telegraf instances.</span><br><span class="line">  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s</span><br><span class="line">  flush_jitter = &quot;0s&quot;</span><br><span class="line"></span><br><span class="line">  ## By default or when set to &quot;0s&quot;, precision will be set to the same</span><br><span class="line">  ## timestamp order as the collection interval, with the maximum being 1s.</span><br><span class="line">  ##   ie, when interval = &quot;10s&quot;, precision will be &quot;1s&quot;</span><br><span class="line">  ##       when interval = &quot;250ms&quot;, precision will be &quot;1ms&quot;</span><br><span class="line">  ## Precision will NOT be used for service inputs. It is up to each individual</span><br><span class="line">  ## service input to set the timestamp at the appropriate precision.</span><br><span class="line">  ## Valid time units are &quot;ns&quot;, &quot;us&quot; (or &quot;µs&quot;), &quot;ms&quot;, &quot;s&quot;.</span><br><span class="line">  precision = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  ## Logging configuration:</span><br><span class="line">  ## Run telegraf with debug log messages.</span><br><span class="line">  debug = false</span><br><span class="line">  ## Run telegraf in quiet mode (error log messages only).</span><br><span class="line">  quiet = false</span><br><span class="line">  ## Specify the log file name. The empty string means to log to stderr.</span><br><span class="line">  logfile = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  ## Override default hostname, if empty use os.Hostname()</span><br><span class="line">  hostname = &quot;&quot;</span><br><span class="line">  ## If set to true, do no set the &quot;host&quot; tag in the telegraf agent.</span><br><span class="line">  omit_hostname = false</span><br><span class="line">[[outputs.influxdb_v2]]	</span><br><span class="line">  urls = [&quot;http://192.168.253.128:8086&quot;]</span><br><span class="line">  token = &quot;YKlTPrHNs7f3JZUPPZHuciEiT0Uub9YcMehKGPlmvCzyd1QGL5sWcW4bwnirhBaaWqPd2WMBtKadCG4GHuBjpQ==&quot;</span><br><span class="line">  organization = &quot;nancal&quot;</span><br><span class="line">  bucket = &quot;n1&quot;</span><br><span class="line">[[inputs.cpu]]</span><br><span class="line">  ## Whether to report per-cpu stats or not</span><br><span class="line">  percpu = true</span><br><span class="line">  ## Whether to report total system cpu stats or not</span><br><span class="line">  totalcpu = true</span><br><span class="line">  ## If true, collect raw CPU time metrics.</span><br><span class="line">  collect_cpu_time = false</span><br><span class="line">  ## If true, compute and report the sum of all non-idle CPU states.</span><br><span class="line">  report_active = false</span><br><span class="line">[[inputs.disk]]</span><br><span class="line">  ## By default stats will be gathered for all mount points.</span><br><span class="line">  ## Set mount_points will restrict the stats to only the specified mount points.</span><br><span class="line">  # mount_points = [&quot;/&quot;]</span><br><span class="line">  ## Ignore mount points by filesystem type.</span><br><span class="line">  ignore_fs = [&quot;tmpfs&quot;, &quot;devtmpfs&quot;, &quot;devfs&quot;, &quot;overlay&quot;, &quot;aufs&quot;, &quot;squashfs&quot;]</span><br><span class="line">[[inputs.diskio]]</span><br><span class="line">[[inputs.mem]]</span><br><span class="line">[[inputs.net]]</span><br><span class="line">[[inputs.processes]]</span><br><span class="line">[[inputs.swap]]</span><br><span class="line">[[inputs.system]]</span><br><span class="line">[[inputs.mysql]]</span><br><span class="line">  servers = [&quot;nancal:nancal.123@tcp(192.168.5.248:3306)/?tls=false&quot;]</span><br><span class="line">  metric_version = 2</span><br><span class="line">[[inputs.redis]]</span><br><span class="line">  servers = [&quot;tcp://39.107.85.115:6376&quot;]</span><br><span class="line">  password = &quot;forever1234&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>java8中的排序</title>
    <url>/2020/04/03/java8%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="一-像SQL中那样排序-在java8中使用"><a href="#一-像SQL中那样排序-在java8中使用" class="headerlink" title="一 . 像SQL中那样排序,在java8中使用"></a>一 . 像SQL中那样排序,在java8中使用</h1><p><strong>下面这段代码如何在java8中去实现</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emplee</span><br><span class="line">order by gender desc,age desc</span><br></pre></td></tr></table></figure>

<h2 id="先来了解下-字符串的list排序"><a href="#先来了解下-字符串的list排序" class="headerlink" title="先来了解下,字符串的list排序"></a>先来了解下,字符串的list排序</h2><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; cities = Arrays.asList(</span><br><span class="line">                <span class="string">&quot;Milan&quot;</span>,</span><br><span class="line">                <span class="string">&quot;london&quot;</span>,</span><br><span class="line">                <span class="string">&quot;San Francisco&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Tokyo&quot;</span>,</span><br><span class="line">                <span class="string">&quot;New Delhi&quot;</span></span><br><span class="line">        );</span><br><span class="line">        System.out.println(cities);</span><br><span class="line">        <span class="comment">//[Milan, london, San Francisco, Tokyo, New Delhi]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入排序器,可以自定义</span></span><br><span class="line">        cities.sort(String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        System.out.println(cities);</span><br><span class="line">        <span class="comment">//[london, Milan, New Delhi, San Francisco, Tokyo]</span></span><br><span class="line"></span><br><span class="line">        cities.sort(Comparator.naturalOrder());</span><br><span class="line">        System.out.println(cities);</span><br><span class="line">        <span class="comment">//[Milan, New Delhi, San Francisco, Tokyo, london]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//同样我们可以把排序器Comparator用在Stream管道流中。    </span></span><br><span class="line"> 		cities.stream().sorted(Comparator.naturalOrder()).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="整数类型List排序"><a href="#整数类型List排序" class="headerlink" title="整数类型List排序"></a>整数类型List排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">System.out.println(numbers); <span class="comment">//[6, 2, 1, 4, 9]</span></span><br><span class="line"></span><br><span class="line">numbers.sort(Comparator.naturalOrder());  <span class="comment">//自然排序</span></span><br><span class="line">System.out.println(numbers); <span class="comment">//[1, 2, 4, 6, 9]</span></span><br><span class="line"></span><br><span class="line">numbers.sort(Comparator.reverseOrder()); <span class="comment">//倒序排序</span></span><br><span class="line">System.out.println(numbers);  <span class="comment">//[9, 6, 4, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h2 id="按对象字段对List排序"><a href="#按对象字段对List排序" class="headerlink" title="按对象字段对List排序"></a>按对象字段对<code>List</code>排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="number">23</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;Rick&quot;</span>,<span class="string">&quot;Beethovan&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="number">13</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;Martina&quot;</span>,<span class="string">&quot;Hengis&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="number">43</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;Ricky&quot;</span>,<span class="string">&quot;Martin&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="number">26</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;Jon&quot;</span>,<span class="string">&quot;Lowman&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="number">19</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;Cristine&quot;</span>,<span class="string">&quot;Maria&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">6</span>,<span class="number">15</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;David&quot;</span>,<span class="string">&quot;Feezor&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">7</span>,<span class="number">68</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;Melissa&quot;</span>,<span class="string">&quot;Roy&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">8</span>,<span class="number">79</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;Gussin&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9</span>,<span class="number">15</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;Neetu&quot;</span>,<span class="string">&quot;Singh&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">10</span>,<span class="number">45</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;Naveen&quot;</span>,<span class="string">&quot;Jain&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Employee&gt; employees = Arrays.asList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);</span><br><span class="line"></span><br><span class="line">employees.sort(Comparator.comparing(Employee::getAge));</span><br><span class="line">employees.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p><strong>倒序使用 reversed()</strong></p>
<h2 id="Comparator链对List排序"><a href="#Comparator链对List排序" class="headerlink" title="Comparator链对List排序"></a>Comparator链对<code>List</code>排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">employees.sort(</span><br><span class="line">        Comparator.comparing(Employee::getGender)</span><br><span class="line">        .thenComparing(Employee::getAge)</span><br><span class="line">        .reversed()</span><br><span class="line">);</span><br><span class="line">employees.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h1 id="二-java8中对map的排序"><a href="#二-java8中对map的排序" class="headerlink" title="二 . java8中对map的排序"></a>二 . java8中对map的排序</h1><ol>
<li>将Map或List等集合类对象转换为Stream对象</li>
<li>使用Streams的<code>sorted()</code>方法对其进行排序   传递的是<strong>排序器</strong></li>
<li>最终将其返回为<code>LinkedHashMap</code>（可以保留排序顺序）</li>
</ol>
<h2 id="先了解下HashMap中的merge-函数"><a href="#先了解下HashMap中的merge-函数" class="headerlink" title="先了解下HashMap中的merge()函数"></a>先了解下HashMap中的merge()函数</h2><blockquote>
<p>应用场景就是当Key重复的时候，如何处理Map的元素值</p>
</blockquote>
<ul>
<li>参数一：向map里面put的键</li>
<li>参数二：向map里面put的值</li>
<li>参数三：如果键发生重复，如何处理值。可以是一个函数，也可以写成lambda表达式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="type">String</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&quot;key&quot;</span>;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;() &#123;&#123;</span><br><span class="line">            put(k, <span class="number">1</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        map.merge(k, <span class="number">2</span>, (oldVal, newVal) -&gt; oldVal + newVal);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果是  一项元素  只有  k:3</span></span><br></pre></td></tr></table></figure>

<h2 id="按Map的键排序"><a href="#按Map的键排序" class="headerlink" title="按Map的键排序"></a>按Map的键排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Map，并填入数据</span></span><br><span class="line">Map&lt;String, Integer&gt; codes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">codes.put(<span class="string">&quot;United States&quot;</span>, <span class="number">1</span>);</span><br><span class="line">codes.put(<span class="string">&quot;Germany&quot;</span>, <span class="number">49</span>);</span><br><span class="line">codes.put(<span class="string">&quot;France&quot;</span>, <span class="number">33</span>);</span><br><span class="line">codes.put(<span class="string">&quot;China&quot;</span>, <span class="number">86</span>);</span><br><span class="line">codes.put(<span class="string">&quot;Pakistan&quot;</span>, <span class="number">92</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照Map的键进行排序</span></span><br><span class="line">Map&lt;String, Integer&gt; sortedMap = codes.entrySet().stream()    </span><br><span class="line">        .sorted(Map.Entry.comparingByKey())</span><br><span class="line">        .collect(</span><br><span class="line">                Collectors.toMap(</span><br><span class="line">                    Map.Entry::getKey, </span><br><span class="line">                    Map.Entry::getValue,</span><br><span class="line">                    (oldVal, newVal) -&gt; oldVal,</span><br><span class="line">                    LinkedHashMap::<span class="keyword">new</span></span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将排序后的Map打印</span></span><br><span class="line">sortedMap.entrySet().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="按Map的值排序"><a href="#按Map的值排序" class="headerlink" title="按Map的值排序"></a>按Map的值排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMap2 = codes.entrySet().stream()</span><br><span class="line">        .sorted(Map.Entry.comparingByValue())</span><br><span class="line">        .collect(Collectors.toMap(</span><br><span class="line">                Map.Entry::getKey,</span><br><span class="line">                Map.Entry::getValue,</span><br><span class="line">                (oldVal, newVal) -&gt; oldVal,</span><br><span class="line">                LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">sortedMap2.entrySet().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="使用TreeMap按键排序"><a href="#使用TreeMap按键排序" class="headerlink" title="使用TreeMap按键排序"></a>使用TreeMap按键排序</h2><p><strong>TreeMap内的元素是有顺序的，所以利用TreeMap排序也是可取的一种方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 `HashMap` 转为 `TreeMap`</span></span><br><span class="line">Map&lt;String, Integer&gt; sorted = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(codes);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>了解java8的stream</title>
    <url>/2020/03/31/java8%E7%9A%84stream/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h5 id="java8中使用最多的就是lambda表达式-而Java-8-API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据"><a href="#java8中使用最多的就是lambda表达式-而Java-8-API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据" class="headerlink" title="java8中使用最多的就是lambda表达式,而Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据"></a>java8中使用最多的就是lambda表达式,而Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据</h5><h5 id="然而自己处理集合数据的时候-使用最多的是forEach-现在是时候了解下Stream了"><a href="#然而自己处理集合数据的时候-使用最多的是forEach-现在是时候了解下Stream了" class="headerlink" title="然而自己处理集合数据的时候,使用最多的是forEach,现在是时候了解下Stream了"></a>然而自己处理集合数据的时候,使用最多的是forEach,现在是时候了解下Stream了</h5><p>流Stream，可以让你以一种声明的方式处理数据。</p>
<p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象,算是链式调用.</p>
<p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p>
<p>元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p>
<span id="more"></span>

<h2 id="什么是-Stream？"><a href="#什么是-Stream？" class="headerlink" title="什么是 Stream？"></a>什么是 Stream？</h2><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p>
<ul>
<li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li>
<li><strong>数据源</strong> 流的来源。 可以是集合，数组，I&#x2F;O channel， 产生器generator 等。</li>
<li><strong>聚合操作</strong> 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li>
</ul>
<p>和以前的Collection操作不同， Stream操作还有两个基础的特征：</p>
<ul>
<li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li>
<li><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。</li>
</ul>
<h2 id="生成流"><a href="#生成流" class="headerlink" title="生成流"></a>生成流</h2><ul>
<li><strong>stream()</strong> − 为集合创建串行流。</li>
<li><strong>parallelStream()</strong> − 为集合创建并行流。</li>
<li><strong>stream.of(T)</strong></li>
</ul>
<h2 id="提供的方法"><a href="#提供的方法" class="headerlink" title="提供的方法"></a>提供的方法</h2><ul>
<li>forEach</li>
<li>map</li>
<li>filter</li>
<li>limit</li>
<li>sorted</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] str = &#123;<span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Dog&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; l = Stream.of(str)</span><br><span class="line">               .filter(it -&gt; it.contains(<span class="string">&quot;L&quot;</span>))</span><br><span class="line">               .map(String::toUpperCase)</span><br><span class="line">               .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">       System.out.println(l.toString());</span><br><span class="line">       </span><br><span class="line">       other();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="读取文件时-也可以使用stream"><a href="#读取文件时-也可以使用stream" class="headerlink" title="读取文件时,也可以使用stream"></a>读取文件时,也可以使用stream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;C:\\Users\\C\\Desktop\\a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Stream&lt;String&gt; lines = Files.lines(path);</span><br><span class="line"></span><br><span class="line">            List&lt;String&gt; list = lines.filter(it -&gt; it.startsWith(<span class="string">&quot;k&quot;</span>))</span><br><span class="line">                    .map(it -&gt; it.toUpperCase())</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="并行（parallel）"><a href="#并行（parallel）" class="headerlink" title="并行（parallel）"></a>并行（parallel）</h2><ul>
<li>parallelStream 是流并行处理程序的代替方法,提高效率</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line"><span class="comment">// 获取空字符串的数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure>

<h2 id="统计-mapToInt"><a href="#统计-mapToInt" class="headerlink" title="统计(mapToInt)"></a>统计(mapToInt)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] str = &#123;<span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Dog&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">other</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        Stream.of(str).mapToInt(it -&gt; it.length())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="map-与-peek"><a href="#map-与-peek" class="headerlink" title="map 与 peek"></a>map 与 peek</h2><ul>
<li><p>peek  可以无需返回    map 需要返回值,return </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//kotlin 定义的一个实体类</span><br><span class="line"></span><br><span class="line">data class Employee(</span><br><span class="line">        var id: Int = 0,</span><br><span class="line">        var age: Int = 0,</span><br><span class="line">        var gender: String = &quot;&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  </span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>, <span class="number">33</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>, <span class="number">44</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>, <span class="number">55</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>, <span class="number">11</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">6</span>, <span class="number">66</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">7</span>, <span class="number">77</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">       <span class="type">Employee</span> <span class="variable">e8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">8</span>, <span class="number">88</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">       </span><br><span class="line">       List&lt;Employee&gt; list = Arrays.asList(e1, e2, e3, e4, e5, e6, e7, e8);</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//peek  可以无需返回    map 需要返回值</span></span><br><span class="line">       List&lt;Employee&gt; employees = list.stream()</span><br><span class="line">               <span class="comment">//.parallel() // 并行 执行  提高效率</span></span><br><span class="line">               .peek(it -&gt; &#123;</span><br><span class="line">                   it.setAge(it.getAge() + <span class="number">1</span>);</span><br><span class="line">                   it.setGender(it.getGender().equals(<span class="string">&quot;M&quot;</span>) ? <span class="string">&quot;F&quot;</span> : <span class="string">&quot;M&quot;</span>);</span><br><span class="line">               &#125;)</span><br><span class="line">               .collect(Collectors.toList());</span><br><span class="line">  </span><br><span class="line">       System.out.println(employees);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ForEach和ForEachOrdered"><a href="#ForEach和ForEachOrdered" class="headerlink" title="ForEach和ForEachOrdered"></a>ForEach和ForEachOrdered</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; nameStrs = Arrays.asList(<span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>,<span class="string">&quot;Lemur&quot;</span>);</span><br><span class="line"></span><br><span class="line">Stream.of(<span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Lion&quot;</span>)</span><br><span class="line">        .parallel()</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">Stream.of(<span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Lion&quot;</span>)</span><br><span class="line">        .parallel()</span><br><span class="line">        .forEachOrdered(System.out::println);</span><br></pre></td></tr></table></figure>

<ul>
<li>parallel()函数表示对管道中的元素进行并行处理，而不是串行处理，这样处理速度更快。但是这样就有可能导致管道流中后面的元素先处理，前面的元素后处理，也就是元素的顺序无法保证</li>
<li>forEachOrdered从名字上看就可以理解，虽然在数据处理顺序上可能无法保障，但是forEachOrdered方法可以在元素输出的顺序上保证与元素进入管道流的顺序一致。也就是下面的样子（forEach方法则无法保证这个顺序）</li>
</ul>
<h2 id="元素的收集collect"><a href="#元素的收集collect" class="headerlink" title="元素的收集collect"></a>元素的收集collect</h2><ul>
<li><p>Set &#x2F; List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; collectToSet = Stream.of(</span><br><span class="line">   <span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Lion&quot;</span></span><br><span class="line">) </span><br><span class="line">.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>
</li>
<li><p>通用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;String&gt; collectToCollection = Stream.of(</span><br><span class="line">   <span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Lion&quot;</span></span><br><span class="line">).collect(Collectors.toCollection(LinkedList::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终collectToCollection中的元素是: [Monkey, Lion, Giraffe, Lemur, Lion]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Array</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] toArray = Stream.of(</span><br><span class="line">   <span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Lion&quot;</span></span><br><span class="line">) .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终toArray字符串数组中的元素是: [Monkey, Lion, Giraffe, Lemur, Lion]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; toMap = Stream.of(</span><br><span class="line">    <span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Lion&quot;</span></span><br><span class="line">)</span><br><span class="line">.distinct()</span><br><span class="line">.collect(Collectors.toMap(</span><br><span class="line">       Function.identity(),   <span class="comment">//元素输入就是输出，作为key</span></span><br><span class="line">       s -&gt; (<span class="type">int</span>) s.chars().distinct().count()<span class="comment">// 输入元素的不同的字母个数，作为value</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终toMap的结果是: &#123;Monkey=6, Lion=4, Lemur=5, Giraffe=6&#125;   </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分组收集groupingBy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Character, List&lt;String&gt;&gt; groupingByList =  Stream.of(</span><br><span class="line">    <span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>, <span class="string">&quot;Lion&quot;</span></span><br><span class="line">)</span><br><span class="line">.collect(Collectors.groupingBy(</span><br><span class="line">       s -&gt; s.charAt(<span class="number">0</span>) ,  <span class="comment">//根据元素首字母分组，相同的在一组</span></span><br><span class="line">       <span class="comment">// counting()        // 加上这一行代码可以实现分组统计</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终groupingByList内的元素: &#123;G=[Giraffe], L=[Lion, Lemur, Lion], M=[Monkey]&#125;</span></span><br><span class="line"><span class="comment">//如果加上counting() ，结果是:  &#123;G=1, L=3, M=1&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">containsTwo</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).anyMatch(i -&gt; i == <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 判断管道中是否包含2，结果是: true</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">nrOfAnimals</span> <span class="operator">=</span> Stream.of(</span><br><span class="line">    <span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span></span><br><span class="line">).count();</span><br><span class="line"><span class="comment">// 管道中元素数据总计结果nrOfAnimals: 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).sum();</span><br><span class="line"><span class="comment">// 管道中元素数据累加结果sum: 6</span></span><br><span class="line"></span><br><span class="line"><span class="type">OptionalDouble</span> <span class="variable">average</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).average();</span><br><span class="line"><span class="comment">//管道中元素数据平均值average: OptionalDouble[2.0]</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).max().orElse(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//管道中元素数据最大值max: 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">statistics</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).summaryStatistics();</span><br><span class="line"><span class="comment">// 全面的统计结果statistics: IntSummaryStatistics&#123;count=3, sum=6, min=1, average=2.000000, max=3&#125;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx以txt方式读取文件</title>
    <url>/2021/01/01/nginx%E4%BB%A5txt%E6%96%B9%E5%BC%8F%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="本意是想直接通过url读取日志文件"><a href="#本意是想直接通过url读取日志文件" class="headerlink" title="本意是想直接通过url读取日志文件"></a>本意是想直接通过url读取日志文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8888;</span><br><span class="line">    server_name  xx.xx.xxx.xx;  </span><br><span class="line">    </span><br><span class="line">    location ~\.(<span class="built_in">log</span>|js|list)&#123;</span><br><span class="line">      	root  /appdata/jd/log/;</span><br><span class="line">		add_header Content-Type text/plain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>mongo原生查询记录优化之路</title>
    <url>/2018/09/16/mongo%E5%8E%9F%E7%94%9F%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><img src="/uploads/mongodb.jpg" alt="avatar"></p>
<h4 id="记录下需要优化的语句，数据库目前在本机256Mb内存的ubuntu虚拟机的docker中跑着"><a href="#记录下需要优化的语句，数据库目前在本机256Mb内存的ubuntu虚拟机的docker中跑着" class="headerlink" title="记录下需要优化的语句，数据库目前在本机256Mb内存的ubuntu虚拟机的docker中跑着"></a>记录下需要优化的语句，数据库目前在本机256Mb内存的ubuntu虚拟机的docker中跑着</h4><ul>
<li><strong>工作日志查询</strong></li>
<li><strong>工作日志查询</strong></li>
</ul>
<span id="more"></span>
<h4 id="直接进入服务器shell-执行操作的命令（因为图形化工具里有很多不方便的地方）"><a href="#直接进入服务器shell-执行操作的命令（因为图形化工具里有很多不方便的地方）" class="headerlink" title="直接进入服务器shell 执行操作的命令（因为图形化工具里有很多不方便的地方）"></a>直接进入服务器shell 执行操作的命令（因为图形化工具里有很多不方便的地方）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.登录mongo  mongo --username --password --authenticationDatabase --hose --port</span><br><span class="line">2.选择数据库  use pzx_online</span><br><span class="line">3.干活</span><br></pre></td></tr></table></figure>


<h5 id="给表中所有的数据添加一个字段来表示更新的时间"><a href="#给表中所有的数据添加一个字段来表示更新的时间" class="headerlink" title="给表中所有的数据添加一个字段来表示更新的时间"></a>给表中所有的数据添加一个字段来表示更新的时间</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.qRBigCodeInfo.update(&#123;&#125;, &#123;$set: &#123;&#x27;modifyAt&#x27;:ISODate(&quot;2010-05-16T09:45:45.356Z&quot;)&#125;&#125;, &#123;multi: true&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="将时间改为对应的userRecords中的正确的时间-由于使用js-执行会很慢"><a href="#将时间改为对应的userRecords中的正确的时间-由于使用js-执行会很慢" class="headerlink" title="将时间改为对应的userRecords中的正确的时间,由于使用js,执行会很慢"></a>将时间改为对应的userRecords中的正确的时间,由于使用js,执行会很慢</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.qRCodeInfo.find(&#123;$where:&quot;this.corpRecords.length&gt;= 1&quot;&#125;).forEach(</span><br><span class="line">   function(item)&#123;      </span><br><span class="line">        var len = item.corpRecords[0].userRecords.length</span><br><span class="line">        db.qRCodeInfo.update(&#123;&quot;_id&quot;:item._id&#125;,&#123;&quot;$set&quot;:&#123;&quot;modifyAt&quot;:item.corpRecords[0].userRecords[len-1].createAt&#125;&#125;,false,true) </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h4 id="此语句是为了查询工作日志"><a href="#此语句是为了查询工作日志" class="headerlink" title="此语句是为了查询工作日志"></a>此语句是为了查询工作日志</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.runCommand(&#123;</span><br><span class="line">   aggregate: &#x27;qRCodeInfo&#x27;,</span><br><span class="line">    pipeline:[</span><br><span class="line">        &#123; $match: &#123;  </span><br><span class="line">            //原来是没有modifyAt 这个时间的，在每次对着些数据进行操作的时候，会更新这个时间</span><br><span class="line">            &quot;modifyAt&quot; : &#123; $gte: ISODate(&quot;2018-09-07T16:00:00.000Z&quot;),$lte: ISODate(&quot;2018-09-08T16:00:00.000Z&quot;),&#125; ,</span><br><span class="line">            &quot;corpRecords&quot; : &#123; $elemMatch : &#123;</span><br><span class="line">            &quot;corp._id&quot; : ObjectId(&quot;5930c15fe13b1f7a1afc9c07&quot;),</span><br><span class="line">            &quot;userRecords&quot; : &#123; $elemMatch :&#123;</span><br><span class="line">                &quot;createAt&quot; : &#123; $gte: ISODate(&quot;2018-09-07T16:00:00.000Z&quot;)&#125; ,</span><br><span class="line">                &quot;action&quot; :  &#123; $in : [ &quot;OutStock&quot; ,&quot;InStock&quot; , &quot;Handling&quot; ] &#125;</span><br><span class="line">             &#125; &#125;</span><br><span class="line">        &#125; &#125; &#125; &#125; ,</span><br><span class="line">        &#123; $project:  &#123;</span><br><span class="line">            corpRecords: &#123; $arrayElemAt: [ &#123; $filter : &#123;</span><br><span class="line">                    input : &quot;$corpRecords&quot;,</span><br><span class="line">                    as: &quot;item&quot;,</span><br><span class="line">                    cond: &#123; $and: [</span><br><span class="line">                        &#123; $eq: [ &quot;$$item.corp._id&quot; ,   ObjectId(&quot;5930c15fe13b1f7a1afc9c07&quot;) ]&#125;</span><br><span class="line">                    ]&#125;</span><br><span class="line">            &#125; &#125; , 0 ] &#125;</span><br><span class="line">        &#125; &#125;,</span><br><span class="line">        &#123; $project:  &#123;</span><br><span class="line">            userRecords: &#123;  $filter : &#123;</span><br><span class="line">                    input : &quot;$corpRecords.userRecords&quot;,</span><br><span class="line">                    as: &quot;item&quot;,</span><br><span class="line">                    cond: &#123; $and: [</span><br><span class="line">                          &#123; $gte: [ &quot;$$item.createAt&quot; ,  ISODate(&quot;2018-09-07T16:00:00.000Z&quot;) ] &#125; ,</span><br><span class="line">                          &#123; $in: [ &quot;$$item.action&quot; ,     [ &quot;OutStock&quot; ,&quot;InStock&quot; ,&quot;Handling&quot; ]  ] &#125;</span><br><span class="line">                    ] &#125;</span><br><span class="line">            &#125; &#125;</span><br><span class="line">        &#125; &#125;</span><br><span class="line">        ,&#123; $project : &#123;</span><br><span class="line">               userRecords : &#123;  $setIntersection: [  &#123; $map:  &#123;</span><br><span class="line">                       input: &quot;$userRecords&quot;,</span><br><span class="line">                       as: &quot;item&quot;,</span><br><span class="line">                       in: &#123;</span><br><span class="line">                           year: &#123;$year: &quot;$$item.createAt&quot; &#125; ,</span><br><span class="line">                           day:  &#123; $dayOfYear : &quot;$$item.createAt&quot; &#125; ,</span><br><span class="line">                           action: &quot;$$item.action&quot;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125; &#125; ] &#125;</span><br><span class="line">        &#125; &#125;</span><br><span class="line">        , &#123; $unwind :  &quot;$userRecords&quot;   &#125;</span><br><span class="line">        , &#123; $group : &#123;</span><br><span class="line">                _id:   &quot;$userRecords&quot;  ,</span><br><span class="line">                count: &#123; $sum: 1&#125;</span><br><span class="line">         &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125; )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>上面的语句耗时10s+,数据量目前为225w（只查一天）</strong></li>
</ul>
<hr>
<h4 id="此语句为工作量统计"><a href="#此语句为工作量统计" class="headerlink" title="此语句为工作量统计"></a>此语句为工作量统计</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">db.runCommand(&#123; aggregate: &quot;qRCodeInfo&quot;,pipeline: [</span><br><span class="line"></span><br><span class="line">     &#123; $match: &#123;</span><br><span class="line">    &quot;product._id&quot;:ObjectId(&quot;5a976c52e13b1f620c371d0c&quot;),</span><br><span class="line">    &quot;corp._id&quot;:ObjectId(&quot;5930c15fe13b1f7a1afc9c07&quot;), &quot;corpRecords.1&quot;:&#123; $exists : 1 &#125;,</span><br><span class="line">    </span><br><span class="line">&#125;&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $group : &#123;</span><br><span class="line">            _id: &#123; $slice: [ &quot;$corpRecords.corp&quot; , 1, 1 ] &#125; ,</span><br><span class="line">            startAt: &#123; $min: &#123; $arrayElemAt: [ &#123; $arrayElemAt: [ &quot;$corpRecords.userRecords.createAt&quot; , 1 ] &#125; , 0 ] &#125;    &#125; ,</span><br><span class="line">            endAt: &#123; $max: &#123; $arrayElemAt: [ &#123; $arrayElemAt: [ &quot;$corpRecords.userRecords.createAt&quot; , 1 ] &#125; , -1 ] &#125;    &#125; ,</span><br><span class="line">            sum:&#123; $sum : 1 &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">] &#125; )</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="库存统计查询"><a href="#库存统计查询" class="headerlink" title="库存统计查询"></a>库存统计查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    aggregate: &quot;qRCodeInfo&quot;,</span><br><span class="line">    pipeline:</span><br><span class="line">[</span><br><span class="line">    &#123; $match: &#123;</span><br><span class="line">           &quot;corp._id&quot; :  ObjectId(&quot;5930c15fe13b1f7a1afc9c07&quot;),</span><br><span class="line">            &quot;product._id&quot;:ObjectId(&quot;5a976c52e13b1f620c371d0c&quot;),</span><br><span class="line">             &quot;corpRecords&quot;:&#123;&quot;$elemMatch&quot;:&#123;</span><br><span class="line">                 &quot;corp._id&quot;: ObjectId(&quot;5930c15fe13b1f7a1afc9c07&quot;),</span><br><span class="line">                 &quot;userRecords.action&quot; : &quot;InStock&quot;</span><br><span class="line">                &#125;  &#125;</span><br><span class="line">     &#125;  &#125;,</span><br><span class="line">     &#123; $project: &#123;</span><br><span class="line">           corpRecord : &#123;  $arrayElemAt : [ &#123; $filter : &#123;</span><br><span class="line">               input : &quot;$corpRecords&quot; ,</span><br><span class="line">               as : &quot;item&quot; ,</span><br><span class="line">               cond: &#123;  $eq: [ &quot;$$item.corp._id&quot; ,ObjectId(&quot;5930c15fe13b1f7a1afc9c07&quot;)]   &#125;</span><br><span class="line">        &#125; &#125;, 0]  &#125;</span><br><span class="line">     &#125; &#125;</span><br><span class="line">      , &#123; $project: &#123; &quot;corpRecord&quot; : 1 ,</span><br><span class="line">           outStockCount : &#123;  $size:&#123;  $filter : &#123;</span><br><span class="line">               input : &quot;$corpRecord.userRecords&quot; ,</span><br><span class="line">               as : &quot;item&quot; ,</span><br><span class="line">               cond: &#123;  $eq: [ &quot;$$item.action&quot; ,&quot;OutStock&quot; ]   &#125;</span><br><span class="line">        &#125; &#125; &#125;</span><br><span class="line">     &#125; &#125;</span><br><span class="line"></span><br><span class="line">     , &#123; $project: &#123; &quot;corpRecord&quot; : 1 ,</span><br><span class="line"></span><br><span class="line">           &quot;outStockCount&quot;: &#123; $cond: [ &#123; $eq:[ &quot;$outStockCount&quot; , 0] &#125; , 0 ,1 ] &#125;</span><br><span class="line">       &#125; &#125;</span><br><span class="line">     , &#123; $group : &#123;</span><br><span class="line">         _id: 1,</span><br><span class="line">         count: &#123; $sum: 1&#125;,</span><br><span class="line">         outCount: &#123; $sum: &quot;$outStockCount&quot; &#125;</span><br><span class="line">     &#125;&#125;</span><br><span class="line">]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>学习记录</tag>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx导致的413错误</title>
    <url>/2018/06/12/nginx%E5%AF%BC%E8%87%B4%E7%9A%84413%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p><img src="/uploads/nginx.jpg" alt="avatar"></p>
<h4 id="之前服务器迁移过一次-项目有些东西没有测试-今天突然发现视频不能上传"><a href="#之前服务器迁移过一次-项目有些东西没有测试-今天突然发现视频不能上传" class="headerlink" title="之前服务器迁移过一次,项目有些东西没有测试,今天突然发现视频不能上传"></a>之前服务器迁移过一次,项目有些东西没有测试,今天突然发现视频不能上传</h4><h4 id="查看-Network-请求-response为-413-突然想起来我们的nginx-是有一点问题的"><a href="#查看-Network-请求-response为-413-突然想起来我们的nginx-是有一点问题的" class="headerlink" title="查看 Network 请求,response为 413,突然想起来我们的nginx 是有一点问题的"></a>查看 Network 请求,response为 413,突然想起来我们的nginx 是有一点问题的</h4><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client_max_body_size 128M;</span><br><span class="line">client_body_buffer_size 512K;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="在-x2F-etc-x2F-nginx-安装目录-下的nginx-conf中添加如上-参数是设置允许的最大body数据大小"><a href="#在-x2F-etc-x2F-nginx-安装目录-下的nginx-conf中添加如上-参数是设置允许的最大body数据大小" class="headerlink" title="在&#x2F;etc&#x2F;nginx  (安装目录)下的nginx.conf中添加如上,参数是设置允许的最大body数据大小"></a>在&#x2F;etc&#x2F;nginx  (安装目录)下的nginx.conf中添加如上,参数是设置允许的最大body数据大小</h4><h4 id="还好我机智"><a href="#还好我机智" class="headerlink" title="还好我机智"></a>还好我机智</h4>]]></content>
      <categories>
        <category>操作记录</category>
        <category>服务器操作</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>openresty清除头信息,使iframe可以显示页面</title>
    <url>/2020/12/21/openresty%E6%B8%85%E9%99%A4%E5%A4%B4%E4%BF%A1%E6%81%AF-%E4%BD%BFiframe%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h4 id="主要是这个"><a href="#主要是这个" class="headerlink" title="主要是这个"></a>主要是这个</h4><blockquote>
<p>more_clear_headers</p>
</blockquote>
<p>这个问题主要是因为集成开源的系统,要做统一登录,剑走偏锋</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># harbor</span></span><br><span class="line">server&#123;</span><br><span class="line">  listen 8202;</span><br><span class="line">  more_clear_headers X-Frame-Options Content-Security-Policy;</span><br><span class="line"></span><br><span class="line">  location /dev &#123;</span><br><span class="line">    <span class="built_in">alias</span>  C:\\Users\\think\\WebstormProjects\\portal\\public\\static\\;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">       proxy_pass   http://101.201.xxx.xxx:8202;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ss</title>
    <url>/2020/04/22/ss/</url>
    <content><![CDATA[<h2 id="ss需要python-环境"><a href="#ss需要python-环境" class="headerlink" title="ss需要python 环境"></a>ss需要python 环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip </span><br><span class="line"></span><br><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="touch一个json文件-放配置"><a href="#touch一个json文件-放配置" class="headerlink" title="touch一个json文件 ,放配置"></a>touch一个json文件 ,放配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>:8888,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;88888888&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ssserver -c /home/ss.json -d start</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>解决openssl升级到1.1.0以上版本，导致shadowsocks2.8.2启动报undefined symbol: EVP_CIPHER_CTX_cleanup错误    </p>
<p>这个问题是由于在openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数</p>
</blockquote>
<ol>
<li>用vim打开文件：vim &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;shadowsocks&#x2F;crypto&#x2F;openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)</li>
<li>跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup）</li>
<li>进入编辑模式</li>
<li>将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes &#x3D; (c_void_p,)<br>改为libcrypto.EVP_CIPHER_CTX_reset.argtypes &#x3D; (c_void_p,)</li>
<li>再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)<br>改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)</li>
<li>保存并退出</li>
<li>启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录</li>
<li>问题解决</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>springcloud中的上下文传递</title>
    <url>/2021/01/20/springcloud%E4%B8%AD%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h4 id="刚刚遇到的问题"><a href="#刚刚遇到的问题" class="headerlink" title="刚刚遇到的问题"></a>刚刚遇到的问题</h4><blockquote>
<ol>
<li>将用户登录拆成一个微服务</li>
<li>因为使用的是JWT,鉴权需要token,而token在请求头中,默认配置会在服务调用时候丢失HttpServletRequest</li>
<li>导致登录不成功,因为没有传递token,肯定也不能使用参数传递,根本原因是上下文丢失</li>
</ol>
</blockquote>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><blockquote>
<p>需要在服务调用方添加拦截器,添加header到 fegin的请求中,这样就可以啦</p>
</blockquote>
<h6 id="建立-FeignRequestInterceptor-并给其添加-Configuration-注解，代码如下"><a href="#建立-FeignRequestInterceptor-并给其添加-Configuration-注解，代码如下" class="headerlink" title="建立 FeignRequestInterceptor 并给其添加@Configuration 注解，代码如下"></a>建立 <code>FeignRequestInterceptor</code> 并给其添加<code>@Configuration</code> 注解，代码如下</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Description:</span><br><span class="line"> * 微服务之间feign调用请求头丢失的问题</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@Slf4j</span><br><span class="line">public class FeignRequestInterceptor implements RequestInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void apply(RequestTemplate template) &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest =   getHttpServletRequest();</span><br><span class="line">        if(httpServletRequest!=null)&#123;</span><br><span class="line">            Map&lt;String, String&gt; headers = getHeaders(httpServletRequest);</span><br><span class="line">            // 传递所有请求头,防止部分丢失</span><br><span class="line">            //此处也可以只传递认证的header</span><br><span class="line">            //requestTemplate.header(&quot;Authorization&quot;, request.getHeader(&quot;Authorization&quot;));</span><br><span class="line">            for (Map.Entry&lt;String, String&gt; entry : headers.entrySet()) &#123;</span><br><span class="line">                template.header(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(&quot;FeignRequestInterceptor:&#123;&#125;&quot;, template.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private HttpServletRequest getHttpServletRequest() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取原请求头</span><br><span class="line">     */</span><br><span class="line">    private Map&lt;String, String&gt; getHeaders(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;String&gt; enumeration = request.getHeaderNames();</span><br><span class="line">        if(enumeration!=null)&#123;</span><br><span class="line">            while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">                String key = enumeration.nextElement();</span><br><span class="line">                String value = request.getHeader(key);</span><br><span class="line">                map.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目使用npm出的小问题</title>
    <url>/2018/06/11/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8npm%E5%87%BA%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>No parser and no filepath given, using ‘babylon’ the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred.</p>
</blockquote>
<p>某一天npm run dev 的时候突然就出现了，参考原issues,居然说不是错误是警告</p>
<blockquote>
<p><a href="https://github.com/nuxt/nuxt.js/issues/3400">https://github.com/nuxt/nuxt.js/issues/3400</a></p>
</blockquote>
<p>不过，大概原因是</p>
<blockquote>
<p>nuxt升级了vue-loader到15，依赖的一个插件没更新<br> 降低vue-loader版本就可以了<br> npm install <a href="mailto:&#118;&#x75;&#101;&#x2d;&#108;&#111;&#x61;&#x64;&#x65;&#x72;&#64;&#x31;&#51;&#x2e;&#x37;&#x2e;&#x32;">&#118;&#x75;&#101;&#x2d;&#108;&#111;&#x61;&#x64;&#x65;&#x72;&#64;&#x31;&#51;&#x2e;&#x37;&#x2e;&#x32;</a> –save-dev  </p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>tar中的参数</title>
    <url>/2020/04/07/tar%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>tar cvf etcbak.tar etc&#x2F;  打包一个tar<br>tar xvf etcbak.tar         解开一个tar<br>tar cvzf etcbak.tar.gz etc&#x2F; 打包压缩一个 tar<br>tar zxvf etcbak.tar.gz  解压一个tar</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>上周总结</title>
    <url>/2020/06/06/%E4%B8%8A%E5%91%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="最近"><a href="#最近" class="headerlink" title="最近"></a>最近</h2><blockquote>
<p>最近一周:用ruoyi开发了web系统, 开发了浏览器插件</p>
</blockquote>
<h2 id="Web版本工具未命名"><a href="#Web版本工具未命名" class="headerlink" title="Web版本工具未命名"></a>Web版本工具未命名</h2><blockquote>
<p>因为用Electron写的客户端在win7 上不是很稳定,所以最后还是开发了web版本,直接使用了开源的ruoyi系统</p>
</blockquote>
<span id="more"></span>

<p>对ruoyi系统的感觉</p>
<ol>
<li>感觉Mybatis用起来没有Mybatis plus方便,特别是我在加字段的时候,虽然有代码生成器,但是还是太麻烦</li>
<li>所以在ruoyi中加入了mongoDB的依赖,使用mongotemplete,用mongo真是舒服多了</li>
<li>本来也想把mybatis 改成 plus ,但是时间有限,试着改了改,发现有报错,就没有然后了</li>
<li>可以当成后台框架模版,后台系统集成挺全</li>
</ol>
<h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><blockquote>
<p>网上资料非常少,原生的居多,在我开发到一半的时候,才找到新的vue框架,不说了 vue牛逼,js无所不能</p>
</blockquote>
<p>开发过程中想使用IndexedDB , 后来发现虽然官方提供很多的扩展版本,但是用了,可能是姿势问题</p>
<p>最后还是使用了WebSQL  ,本来可以不这样的 ,直接请求我后台写好的就可以了..但是还是想看看怎么玩,开发完之后发现坑太多了</p>
<blockquote>
<p>查询完取数据居然最后两个是item 和 length  ,好吧  ,可能姿势又不对了</p>
</blockquote>
<h2 id="总之-学到好多东西-每天也是睡不够"><a href="#总之-学到好多东西-每天也是睡不够" class="headerlink" title="总之,学到好多东西,每天也是睡不够"></a>总之,学到好多东西,每天也是睡不够</h2>]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>【记录】 时光 -旧日时光ktv</title>
    <url>/2022/03/08/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91%20%E6%97%B6%E5%85%89%20-%E6%97%A7%E6%97%A5%E6%97%B6%E5%85%89ktv/</url>
    <content><![CDATA[<h2 id="旧日时光"><a href="#旧日时光" class="headerlink" title="旧日时光"></a>旧日时光</h2><iframe src="//player.bilibili.com/player.html?aid=809522510&bvid=BV1t34y1b7Yx&cid=544321305&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"  width="100%" height="500px"> </iframe>



]]></content>
  </entry>
  <entry>
    <title>&#39;回京小记&#39;</title>
    <url>/2020/03/25/%E5%9B%9E%E4%BA%AC%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>嗯，从3月13号回来的北京到现在,到现在3月25号,已经12天了。</p>
<p>在不怎么长的时间里，我心里上感觉经历了很多。</p>
<p>今年本来是,打算重新换工作的，就是过了年之后辞职，结果呢因为疫情的原因,公司裁员,但还好,工资发到2月底.</p>
<p>所以在2月中旬到月底这段时间都很安心的呆在家里,没什么心里压力,其实也很满意不用上班就能拿工资的效果,心里是一个很散漫的过程,可能在外面呆久了,回家都是一样的吧.</p>
<span id="more"></span>

<p>过了三月之后,心里就开始焦虑,回去找工作肯定不好找,在家舒服,但是心里其实也很烦躁的,有房租的压力,有新房的压力,有对自己前途的迷茫,更有未来的迷茫.</p>
<p>拖着,慢慢的拖着,知道3月10号左右,决定不能待下去了,看不进书,学习不了新知识,后来就想回到北京.</p>
<p>13号到京</p>
<p>旅途的火车吃了第一次火车上的快餐,25,真贵啊</p>
<p>早上的地铁空空荡荡.火车站的入口都直接不安检了,也是难得一见.</p>
<p>行李箱里,全是菜和吃的,大蒜,西葫芦,蒜苔,黄瓜,蒜苗,丸子,一堆水果…父母费心了.</p>
<p>这十几天心理过程其实也很复杂,放松不起来,人也不开心,心理过程很复杂</p>
<p>特别吧，你每天一个人就活动范围只有基本上只有家里和小区，但是我呢也不愿意去想去，就基本闷在家里,闷在家里呢又只能用电脑，用的多了，很多时候都觉得索然无味，我根本不知道自己要干嘛,就只能学习点东西</p>
<p>很烦躁。</p>
<p>刚刚接到一个电话，这个电话前天面试的一个电话，是于老大介绍的一个公司，但是面试水的很，很多东西都没拿出来，所以呢刚刚打电话意思就是给1x工资,有些心灰意冷,又考虑到现在的情况,实在有点不知道怎么办。</p>
<hr>
<p>好了 现在知道了 不怎么办  继续学习 招工作</p>
<p>于工说得对  既然没看到你的发光点,说明也是不合适,也就是没缘分</p>
]]></content>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/04/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="创建线程的方法"><a href="#创建线程的方法" class="headerlink" title="创建线程的方法"></a>创建线程的方法</h2><ol>
<li><p>继承Tread类,重写run方法</p>
</li>
<li><p>实现Runnable接口</p>
</li>
<li><p>实现Callable接口</p>
</li>
</ol>
<h2 id="Thread和Runnable的关系"><a href="#Thread和Runnable的关系" class="headerlink" title="Thread和Runnable的关系"></a>Thread和Runnable的关系</h2><ol>
<li>Thread是实现了Runnable接口的类,使run支持多线程</li>
<li>类的单一继承原则,推荐多使用Runnable接口</li>
</ol>
<span id="more"></span>

<h2 id="Runnable和Callable的区别"><a href="#Runnable和Callable的区别" class="headerlink" title="Runnable和Callable的区别"></a>Runnable和Callable的区别</h2><ol>
<li>最大的不同点是实现Callable的接口的任务线程能返回执行结果,而Runnable不能</li>
<li>Callable的接口的call()方法允许抛出异常,而Runnable的run()方法异常只能在内部处理,不能向上抛出</li>
</ol>
<h2 id="获取处理线程的返回值"><a href="#获取处理线程的返回值" class="headerlink" title="获取处理线程的返回值"></a>获取处理线程的返回值</h2><ol>
<li>主线程等待法</li>
<li>使用Thread类的join()阻塞当前线程以等待子线程处理完毕</li>
<li>通过Callable接口实现 : FutureTask  or 线程池获取</li>
</ol>
<h2 id="线程的六个状态"><a href="#线程的六个状态" class="headerlink" title="线程的六个状态"></a>线程的六个状态</h2><ol>
<li>New 	创建后尚未启动线程</li>
<li>Runnable    包含Running  和 Ready</li>
<li>Waiting    无限期等待,需要被唤醒</li>
<li>Timed Wating       一定时间后系统自己唤醒</li>
<li>Blocked      等待获取排他锁</li>
<li>Terminated      已经终止的线程状态,线程已结束执行</li>
</ol>
<h2 id="sleep和wait的区别"><a href="#sleep和wait的区别" class="headerlink" title="sleep和wait的区别"></a>sleep和wait的区别</h2><ol>
<li>sleep只会让出cpu,不会让出锁</li>
<li>wait  会让出cpu,也会释放已经占用的同步资源锁</li>
</ol>
<h2 id="notify-和-notifyAll"><a href="#notify-和-notifyAll" class="headerlink" title="notify()和 notifyAll()"></a>notify()和 notifyAll()</h2><blockquote>
<p>等待池：假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁后，进入到了该对象的等待池，等待池中的线程不会去竞争该对象的锁。</p>
<p>锁池：只有获取了对象的锁，线程才能执行对象的 synchronized 代码，对象的锁每次只有一个线程可以获得，其他线程只能在锁池中等待 </p>
</blockquote>
<p><strong>当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程）</strong></p>
<p><strong>被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争</strong> </p>
<h2 id="线程的-run-和-start"><a href="#线程的-run-和-start" class="headerlink" title="线程的 run()和 start()"></a>线程的 run()和 start()</h2><ul>
<li>start()方法是启动线程的,启动时候会自动调用run()方法</li>
<li>直接调用run()方法,无法起到多线程的目的,相当于主线程线性执行 Thread 对象的 run() 方法</li>
<li>一个线程对象的 start() 方法只能调用一次，多次调用会抛出 java.lang.IllegalThreadStateException 异常；run() 方法没有限制。</li>
</ul>
<h2 id="创建线程池方式"><a href="#创建线程池方式" class="headerlink" title="创建线程池方式"></a>创建线程池方式</h2><ol>
<li><strong>newFixedThreadPool</strong> : <strong>定长线程池</strong>每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程数量不再变化，当线程发生错误结束时，线程池会补充一个新的线程</li>
<li><strong>newCachedThreadPool:可缓存的线程池</strong>,如果线程池的容量超过了任务数，自动回收空闲线程，任务增加时可以自动添加新线程，线程池的容量不限制</li>
<li><strong>newScheduledThreadPool:定长线程池，可执行周期性的任务</strong></li>
<li><strong>newSingleThreadExecutor:单线程的线程池</strong>，线程异常结束，会创建一个新的线程，能确保任务按提交顺序执行</li>
<li><strong>newSingleThreadScheduledExecutor</strong></li>
<li><strong>newWorkStealingPool:任务窃取线程池</strong>，不保证执行顺序，适合任务耗时差异较大</li>
</ol>
<h3 id="线程池中-submit-和-execute-方法"><a href="#线程池中-submit-和-execute-方法" class="headerlink" title="线程池中 submit()和 execute()方法"></a>线程池中 submit()和 execute()方法</h3><blockquote>
<p>submit(Callable<T> task)、submit(Runnable task, T result)、submit(Runnable task)归属于ExecutorService接口。</p>
<p>execute(Runnable command)归属于Executor接口。ExecutorService继承了Executor。</p>
</blockquote>
<ul>
<li>submit有返回值。<strong>submit()方便做异常处理。通过Future.get()可捕获异常。</strong></li>
<li>execute没有返回值。</li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote>
<p>线程死锁就是两个或者多个线程互相持有对方所需要的资源,导致这些线程处于等待状态,无法前往执行.当线程进入对象的synchronized代码块时,占有了资源,直到它退出该代码块或者调用wait()方法,才释放资源,在此期间,其他线程将不能进入该代码块.当线程互相持有对方所需要的资源,会陷入等待中.产生死锁状态</p>
</blockquote>
<p><strong>解决:</strong></p>
<ul>
<li>加锁顺序(线程按照一定的顺序加锁)</li>
<li>加锁时限</li>
<li>死锁检测</li>
</ul>
<h2 id="如何中断线程"><a href="#如何中断线程" class="headerlink" title="如何中断线程"></a>如何中断线程</h2><ol>
<li>调用<strong>interrupt</strong>,通知线程中断<ol>
<li>如果该线程处于被阻塞的状态,那么线程会立即退出被阻塞状态,抛出异常    interruptException</li>
<li>如果是正常状态,那么会将该线程的<strong>中断标志状态</strong>设置为true</li>
</ol>
</li>
<li>需要被调用的线程配合中断<ol>
<li>在正常运行任务时,经常检查本线程的中断标志位,如果有就中断</li>
</ol>
</li>
</ol>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><ul>
<li><strong>互斥</strong>:  在同一时间只允许一个线程持有某个对象锁,通过这种特性来实现多线程的协调机制,这样在同一时间只有一个线程对需要同步的代码块(符合操作)进行访问, <strong>也叫操作的原子性</strong></li>
<li>**可见性: ** 必须确保在锁被释放前,对共享变量所做的修改,对于随后获得该锁的另一个线程是可见的(在获得锁时候,应该获得最新的共享变量的值),否则另一个线程可能是在本地缓存的某个副本上继续操作,从而引起的不一致</li>
</ul>
<h2 id="获取对象锁"><a href="#获取对象锁" class="headerlink" title="获取对象锁"></a>获取对象锁</h2><ol>
<li>同步代码块:   <strong>synchronized(this)</strong></li>
<li><strong>同步非静态方法</strong></li>
</ol>
<h2 id="获取类锁"><a href="#获取类锁" class="headerlink" title="获取类锁"></a>获取类锁</h2><ol>
<li>同步代码块   :   <strong>synchronized(类.Class)</strong></li>
<li><strong>同步静态方法</strong></li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>对k3s的了解和记录</title>
    <url>/2022/07/24/%E5%AF%B9k3s%E7%9A%84%E4%BA%86%E8%A7%A3%E5%92%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="k3s的主节点安装"><a href="#k3s的主节点安装" class="headerlink" title="k3s的主节点安装"></a>k3s的主节点安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br></pre></td></tr></table></figure>

<p>查看节点信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k3s kubectl get node</span><br></pre></td></tr></table></figure>
 <span id="more"></span>
<p>从节点安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看主节点的 token  </span></span><br><span class="line"><span class="built_in">cat</span> /var/lib/rancher/k3s/server/node-token</span><br><span class="line">K10befcf20fa107431d40098c78f4cef72e490dac2119aadb2c46551429665d9d9c::server:fd46d89280984904bc6eeb9eb50c3e9e</span><br><span class="line"><span class="comment"># 添加host 的映射</span></span><br><span class="line"><span class="comment"># 在work节点上 将token添加</span></span><br><span class="line">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn K3S_URL=https://k3sm.com:6443 K3S_TOKEN=K10befcf20fa107431d40098c78f4cef72e490dac2119aadb2c46551429665d9d9c::server:fd46d89280984904bc6eeb9eb50c3e9e sh -</span><br></pre></td></tr></table></figure>

<p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看pods</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">kubectl logs postgresql-0</span><br></pre></td></tr></table></figure>

<h3 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash /usr/local/bin/k3s-uninstall.sh</span><br></pre></td></tr></table></figure>

<p>postgresql.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">postgresql</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">postgresql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hostpath</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/home/data/pgdata</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">postgres:11-alpine</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">postgres11</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/lib/postgresql/data</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">hostpath</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_PASSWORD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">123456987</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_USER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">c1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_DB</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">p1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">postgresql</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>控制面板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GITHUB_URL=https://github.com/kubernetes/dashboard/releases</span><br><span class="line">VERSION_KUBE_DASHBOARD=$(curl -w &#x27;%&#123;url_effective&#125;&#x27; -I -L -s -S $&#123;GITHUB_URL&#125;/latest -o /dev/null | sed -e &#x27;s|.*/||&#x27;)</span><br><span class="line">sudo k3s kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>

<p>删除控制面板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo k3s kubectl delete ns kubernetes-dashboard</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>总是应该写点什么</title>
    <url>/2019/10/15/%E6%80%BB%E6%98%AF%E5%BA%94%E8%AF%A5%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<!--<div style="text-align: center;font-size: 40px;font-weight: bolder">总是应该写点什么</div>-->
<p><img src="/uploads/title.jpg" alt="avatar"></p>
<h3 id="本来就是题外话"><a href="#本来就是题外话" class="headerlink" title="本来就是题外话"></a>本来就是题外话</h3><p>&amp;emsp;&amp;emsp;好像习惯就是这样的,每一个拥有博客的人都应该在写下一些东西,内容就应该是为什么自己要建一个技术博客.这个习惯就好像,每一个新语言都在开篇告诉你,怎么使用Hello world,以表尊重.</p>
<p>&amp;emsp;&amp;emsp;我是在哪一天,哪个时候,怀着怎样的心情,坐下来去研究一个博客网站是如何建立的,早已忘记,到现在隔了一年多了,才去写一个开篇,看起来有点自己嘲讽自己的味道.技术内容也没多少,自己也没坚持下来写技术相关,更不要说关于自己心情的东西了,可能自己心里还是一个比较封闭的一个人,不太会或者说不太想表达自己内心的想法,可能自己给自己压力太大了吧.</p>
<span id="more"></span>

<p>&amp;emsp;&amp;emsp;先聊聊最近的事情吧,关于最近公司的事情实在是繁多,也不知道从何说起,不是自己技术工作,是公司的情况,公司目前已经搬离北辰,冻结活动,只剩我维护系统和小程序还有一些其他的琐碎的事务,再简单点说,公司就这样了.</p>
<h3 id="我的小时代"><a href="#我的小时代" class="headerlink" title="我的小时代"></a>我的小时代</h3><p>&amp;emsp;&amp;emsp;2017年3月的某一天，我接到一个面试电话，通知我去公司面试。那个时候我正在参加另外一个公司的上机测试。然后我收到了一封邮件，那封邮件上只有短短的三行面试邀请。署名马建军。到了面试的那天，我在公司的门口，怎么说呢，因为是一个商住两用的地方，所以还在犹豫要不要进去。但是最后想了，想来都来了，还是进去吧.然后就是做一份卷子。那上面。我记得清楚的是，最后一道题是让我设计一个非常大访问量的一个网站是怎么设计的，这道题明显已经超出了我所应该当时的我应该知道的内容范围。那个时候就想要不就这样不做了吧,说实话,题目弄的我感觉什么都不会.再后来就是我和于老大面试。面试应该还算不错吧。再后来，硬着头皮写了卷子，然后就去和于老大面试,两个人的沟通很顺畅，然后我就回去等通知，那天还有一个电话面试，那个电话面试也还可以，都说等消息。在后来的某一天，两个公司都给我打了电话。因为现在的公司比较近，所以就到这里.</p>
<p>&amp;emsp;&amp;emsp;2017年3月28日，我第一天来公司上班。3天之后清明节休息了三天,那个时候，整个系统只有荣娟写的一个前端页面，后端的数据库都还没有建立.梁总去配合我们的工作,一年.那个时候我们基本天天加班。于老大，每天都写到晚上12点,那个时候大家都激情满满.再然后就是李晋京的离开,我过了实习转正,再过了半年,荣娟离开,波波到来,我涨了工资.再然后,子一到来,十月,娜姐到来,君姐到来,子一到来.再然后,娜姐离开,子一被迫离开,波波离开,系统成型.2018年五月,余老大离开公司,我又涨了工资,剩我一人负责系统,有困难但不难,那段时间是我提升最快的阶段,什么都要去了解,学习,每天非常充实,但对公司而言,没有业务收入,只有技术支出,所以,我也只能更努力的做好自己做的事情.</p>
<p>&amp;emsp;&amp;emsp;再后来,业务需要,想招人,才发现那时的我可能也不是最差的,面试别人面试一两个月,然后招来一个前端,技术不行,基本所有的前端的事情我都是告诉怎么写,然后一步三拌的才能替我写完,那个时候也是很崩溃.好像那个时候,我学的前端的东西更多了…在后来,她也走了,又剩我一个人,这个时候就很轻松了,有工作量也可以轻松应对,感谢这一路,在公司遇到的任何人.</p>
<p>&amp;emsp;&amp;emsp;18年底,春节放假前,我,黄黄,明强,马君小姐姐,还有黎总,一共五个人金鼎轩聚餐,那个时候公司已经挺难,但是黎总还是坚持到了现在,实属不易,现在想想,黎总付出的够多,值得佩服两字.</p>
<p>&amp;emsp;&amp;emsp;19年5月续签合同,因为投资人关系,没有再涨工资.<del>大环境不好,中美贸易,HK的问题,巧的是,投资人都是这两个地方的,加上市场开拓不起来,对公司更是雪上加霜.</del></p>
<p>&amp;emsp;&amp;emsp;9月底,黎总告知,投资人已经收回U盾,意味着,我们拿不到钱了,工资需要投资人考核后发放,实际上,变相的阻止黎总继续走下去.其实也好,在我看来,大家都需要换个环境.国庆前的最后一天,黎总给每个人发了一瓶最贵的酒,卡美尼,我留着等它再陈酿一段时间.</p>
<p>&amp;emsp;&amp;emsp;到现在,我上一份合同结束,拿着另一份公司的劳务合同,继续维护系统,于公司而言么,算是还在等候机会吧,于我而言,结束了我的一个小时代,我需要去寻找下一个方向,至于在哪里,什么时候,都需要我自己去寻找.</p>
<p><img src="/uploads/hz.jpg" alt="avatar"><br><img src="/uploads/jc1.jpg" alt="avatar"><br><img src="/uploads/jc2.jpg" alt="avatar"><br><img src="/uploads/jc3.jpg" alt="avatar"></p>
<h3 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a>搬家</h3><p>&amp;emsp;&amp;emsp;其实也不叫搬家,叫般公司.国庆回来,基本都在忙着,怎么说,说是善后的事情么,繁杂而心迷茫,自己不敢闲下来也没有时间闲下来,空空的感觉不怎么样.</p>
<p>&amp;emsp;&amp;emsp;10月11日,搬回来两台主机,两个显示器,维护系统用,macmini自己研究苹果用,iphone7测试用.</p>
<p>&amp;emsp;&amp;emsp;10月12日,从公司搬东西到顺义莱蒙湖,一个厢货装了满满一箱,还有很多都没拿走.卖了两次废纸和五个铁皮小柜,共120.</p>
<p>&amp;emsp;&amp;emsp;10月13日,物业休息,没有办结账手续.14日,处理最后的东西.黄黄坐的4人办公桌,最后收废品的都不要,留在了601,黎总的办公桌和其他的家居最后处理了70,还真是,什么都不值钱啊.</p>
<p>&amp;emsp;&amp;emsp;这些天清理出了不少大家的痕迹,余老大的笔记我都收起来了,于我而言,师傅的存在.我留下了几瓶展示红酒,小酒桶.对了,黄黄国庆结婚了,送上祝福吧.</p>
<p><img src="/uploads/ditieshang.jpg" alt="地铁"><br><img src="/uploads/pz.jpg" alt="盆栽"><br><img src="/uploads/mjk.jpg" alt="门禁卡"></p>
<div style="text-align: center;font-weight: bolder">门禁卡磨损到很薄</div>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>&amp;emsp;&amp;emsp;其实今天才闲下来,闲下来也不知道该做什么.手机都扔在一边,想了想,还是先写个blog,记录下来才对,也算是对自己的总结吧,也没说什么,其实就是不知道说什么.</p>
<p>&amp;emsp;&amp;emsp;打算先休息到月底,好好休息下,对自己的身体也有个交代.然后去规划自己的路.</p>
<p><img src="/uploads/xiaban.jpg" alt="下班"></p>
<h3 id="祝大家前程似锦-万事如意"><a href="#祝大家前程似锦-万事如意" class="headerlink" title="祝大家前程似锦,万事如意"></a>祝大家前程似锦,万事如意</h3>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>个人随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>开发环境配置</title>
    <url>/2020/04/14/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol>
<li><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></li>
<li>环境变量<ol>
<li>在 “系统变量” 中设置 3 项属性，JAVA_HOME、PATH、CLASSPATH</li>
<li><strong>JAVA_HOME</strong>     <strong>C:\Program Files (x86)\Java\jdk1.8.0_91</strong></li>
<li><strong>CLASSPATH</strong>     <strong>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</strong></li>
<li><strong>Path</strong>        <strong>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</strong>          (win10分开添加)</li>
</ol>
</li>
<li>javac -version</li>
</ol>
<span id="more"></span>
<h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><ol>
<li><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></li>
<li>环境变量<ol>
<li><strong>MAVEN_HOME</strong>        <strong>C:\xxxx\apache-maven-3.3.9</strong></li>
<li><strong>Path</strong>      <strong>;%MAVEN_HOME%\bin</strong></li>
</ol>
</li>
<li>mvn -v</li>
</ol>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol>
<li><p><a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p>
</li>
<li><p>&#96;&#96;&#96;bash<br>git config –global user.name “anke1938”<br>git config –global user.email <a href="mailto:&#97;&#110;&#x6b;&#x65;&#49;&#57;&#x33;&#x38;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#97;&#110;&#x6b;&#x65;&#49;&#57;&#x33;&#x38;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. ```</span><br><span class="line">   git config --list</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ol>
<li><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li>
<li>node -version</li>
</ol>
<h2 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h2><p><del><a href="https://defcon.cn/513.html">https://defcon.cn/513.html</a></del><br><a href="https://www.52pojie.cn/thread-1098683-1-1.html">https://www.52pojie.cn/thread-1098683-1-1.html</a></p>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><ol>
<li><a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a></li>
<li><strong>path</strong>      <strong>c:\xxxx\Python32</strong></li>
</ol>
<h2 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h2><p><a href="http://idea.medeming.com/jet/">http://idea.medeming.com/jet/</a></p>
]]></content>
  </entry>
  <entry>
    <title>恢复hexo的一些记录</title>
    <url>/2019/10/15/%E6%81%A2%E5%A4%8Dhexo%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="重新部署hexo博客的一丢丢记录"><a href="#重新部署hexo博客的一丢丢记录" class="headerlink" title="重新部署hexo博客的一丢丢记录."></a>重新部署hexo博客的一丢丢记录.</h4><ul>
<li>国庆期间在腾讯云重新<strong>申请了域名</strong> anke1938.xyz , 然后还要实名认证,拖到国庆之后才认证完毕</li>
<li>先去做了<strong>域名解析</strong>,指向了我HK的主机,这个主机自从上次收到警告之后就关闭了…惨,然后顺便申请了https证书</li>
<li><strong>coding</strong>,关掉了coding的pages服务,gitee的没有关掉,其实也不影响了</li>
<li><strong>nginx服务指向</strong>,刚开始做80端口,后来一想,不对啊,直接做301,指向https的443,访问直接转到https</li>
<li><strong>site-enabled</strong>中软连接<strong>site-available</strong>文件,这样做现在想想就是为了方便管理多网站,有点多此一举的意思?</li>
<li><strong>ln软连接</strong>的问题,ln必须要用绝对路径,不然在ssh下看到的是红色的,正常的是蓝色的. 移除错误的软连接(rm -rf .&#x2F;xxx)</li>
</ul>
<h4 id="Hexo的Valine-文章回复-服务一直是正常的-这倒是出乎意料的好-加油"><a href="#Hexo的Valine-文章回复-服务一直是正常的-这倒是出乎意料的好-加油" class="headerlink" title="Hexo的Valine(文章回复)服务一直是正常的,这倒是出乎意料的好,加油"></a>Hexo的Valine(文章回复)服务一直是正常的,这倒是出乎意料的好,加油</h4><h4 id="不蒜子服务因为2018年9月七牛云的问题换了域名-之前的不能用-更换"><a href="#不蒜子服务因为2018年9月七牛云的问题换了域名-之前的不能用-更换" class="headerlink" title="不蒜子服务因为2018年9月七牛云的问题换了域名,之前的不能用,更换"></a><strong>不蒜子</strong>服务因为2018年9月七牛云的问题换了域名,之前的不能用,更换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="以上-看起来不多的内容-我也不知道写了点什么-以此记录-接下来需要写一段自动发布文章-直接编译上传的那种特别简单的脚本-目前暂时用webstorm的sftp功能"><a href="#以上-看起来不多的内容-我也不知道写了点什么-以此记录-接下来需要写一段自动发布文章-直接编译上传的那种特别简单的脚本-目前暂时用webstorm的sftp功能" class="headerlink" title="以上,看起来不多的内容,我也不知道写了点什么,以此记录,接下来需要写一段自动发布文章,直接编译上传的那种特别简单的脚本(目前暂时用webstorm的sftp功能)"></a>以上,看起来不多的内容,我也不知道写了点什么,以此记录,接下来需要写一段自动发布文章,直接编译上传的那种特别简单的脚本(目前暂时用webstorm的sftp功能)</h4>]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>推送docker镜像到阿里云仓库</title>
    <url>/2020/04/22/%E6%8E%A8%E9%80%81docker%E9%95%9C%E5%83%8F%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="1-阿里云帐号登录"><a href="#1-阿里云帐号登录" class="headerlink" title="1.阿里云帐号登录"></a>1.阿里云帐号登录</h2><p><a href="https://cr.console.aliyun.com/#/imageList">https://cr.console.aliyun.com/#/imageList</a></p>
<h2 id="2-创建自己的命名空间和仓库名称，这里仓库地址选本地仓库"><a href="#2-创建自己的命名空间和仓库名称，这里仓库地址选本地仓库" class="headerlink" title="2.创建自己的命名空间和仓库名称，这里仓库地址选本地仓库"></a>2.创建自己的命名空间和仓库名称，这里仓库地址选本地仓库</h2><h2 id="3-点击管理，可以看到看到仓库地址等信息"><a href="#3-点击管理，可以看到看到仓库地址等信息" class="headerlink" title="3.点击管理，可以看到看到仓库地址等信息"></a>3.点击管理，可以看到看到仓库地址等信息</h2><h2 id="4-在docker-中登录阿里云镜像中心-要求输入密码"><a href="#4-在docker-中登录阿里云镜像中心-要求输入密码" class="headerlink" title="4.在docker 中登录阿里云镜像中心,要求输入密码"></a>4.在docker 中登录阿里云镜像中心,要求输入密码</h2><span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login --username=406285395@qq.com registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure>

<h2 id="5-推送镜像"><a href="#5-推送镜像" class="headerlink" title="5.推送镜像"></a>5.推送镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a <span class="string">&quot;anke1938&quot;</span> xxxxxx myversion:1.0     //提交一个镜像到本地  tag</span><br><span class="line"></span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/anke19388/mybcdn:[镜像版本号]</span><br><span class="line"></span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/anke19388/mybcdn:[镜像版本号]</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>搬瓦工VPS上安装ss</title>
    <url>/2018/06/11/%E6%90%AC%E7%93%A6%E5%B7%A5VPS%E4%B8%8A%E5%AE%89%E8%A3%85ss/</url>
    <content><![CDATA[<p><img src="/uploads/vps.png" alt="avatar"></p>
<h4 id="最近需要服务器搭测试环境-又不能在公司生产环境进行操作"><a href="#最近需要服务器搭测试环境-又不能在公司生产环境进行操作" class="headerlink" title="最近需要服务器搭测试环境,又不能在公司生产环境进行操作"></a>最近需要服务器搭测试环境,又不能在公司生产环境进行操作</h4><h4 id="正好搬瓦工VPS1C1G的套餐还有货-19-9-x2F-年-够用超值"><a href="#正好搬瓦工VPS1C1G的套餐还有货-19-9-x2F-年-够用超值" class="headerlink" title="正好搬瓦工VPS1C1G的套餐还有货   19.9$&#x2F;年  够用超值"></a>正好搬瓦工VPS1C1G的套餐还有货   19.9$&#x2F;年  够用超值</h4><span id="more"></span>

<blockquote>
<p>默认系统是centos ,因为公司生产环境是ubuntu 16.04  所以自己重新安装了系统</p>
</blockquote>
<h4 id="ss需要python-环境"><a href="#ss需要python-环境" class="headerlink" title="ss需要python 环境"></a>ss需要python 环境</h4><ul>
<li><blockquote>
<p>sudo apt-get install python-pip </p>
</blockquote>
</li>
<li><blockquote>
<p>sudo pip install shadowsocks</p>
</blockquote>
</li>
</ul>
<h4 id="touch一个json文件-放配置"><a href="#touch一个json文件-放配置" class="headerlink" title="touch一个json文件 ,放配置"></a>touch一个json文件 ,放配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;server_port&quot;:8888,</span><br><span class="line">    </span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    </span><br><span class="line">    &quot;password&quot;:&quot;88888888&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    </span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><blockquote>
<p>sudo ssserver -c &#x2F;home&#x2F;ss.json -d start</p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>最近哦:一如既往,又期待改变</title>
    <url>/2020/06/27/%E6%9C%80%E8%BF%91%E5%93%A6-%E4%B8%80%E5%A6%82%E6%97%A2%E5%BE%80-%E5%8F%88%E6%9C%9F%E5%BE%85%E6%94%B9%E5%8F%98/</url>
    <content><![CDATA[<h3 id="最近听这个歌很好听"><a href="#最近听这个歌很好听" class="headerlink" title="最近听这个歌很好听"></a>最近听这个歌很好听</h3><span id="more"></span>
<p><a href="http://music.163.com/song/media/outer/url?id=417250673">http://music.163.com/song/media/outer/url?id=417250673</a></p>
<h3 id="最近于老大又给我找了个活"><a href="#最近于老大又给我找了个活" class="headerlink" title="最近于老大又给我找了个活"></a>最近于老大又给我找了个活</h3><blockquote>
<p>给1个,不难,也没啥压力.</p>
<p>但是,我明明是一个后端啊~~</p>
</blockquote>
<h3 id="最近翻看以前的代码提交记录"><a href="#最近翻看以前的代码提交记录" class="headerlink" title="最近翻看以前的代码提交记录"></a>最近翻看以前的代码提交记录</h3><p><img src="https://gitee.com/anke1938/image/raw/master/2017.png" alt="2017"></p>
<p><img src="https://gitee.com/anke1938/image/raw/master/QQ%E6%88%AA%E5%9B%BE20200628000931.png"></p>
<blockquote>
<p>2019-2020 的一段时间,用错了帐号提交,记录没有了</p>
</blockquote>
<p><img src="https://gitee.com/anke1938/image/raw/master/2019.png"></p>
<p><img src="https://gitee.com/anke1938/image/raw/master/2020.png"></p>
<h3 id="来北京已经好久了啊"><a href="#来北京已经好久了啊" class="headerlink" title="来北京已经好久了啊"></a>来北京已经好久了啊</h3><blockquote>
<p>最近感觉很难过 :  我好难过啊,那么爱你….</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>服务器中匪夷所思的java.net.UnknownHostException</title>
    <url>/2018/06/27/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E5%8C%AA%E5%A4%B7%E6%89%80%E6%80%9D%E7%9A%84java-net-UnknownHostException/</url>
    <content><![CDATA[<p><img src="/uploads/netException.png" alt="avatar"></p>
<h4 id="刚刚上去服务器看了一眼-amp-什么鬼"><a href="#刚刚上去服务器看了一眼-amp-什么鬼" class="headerlink" title="刚刚上去服务器看了一眼,!@#!%%$^&amp;%$,什么鬼!!"></a>刚刚上去服务器看了一眼,!@#!%%$^&amp;%$,什么鬼!!</h4><span id="more"></span>

<h5 id="问题原因貌似找到了就是在host文件里面主机名没有找到-我也是醉了"><a href="#问题原因貌似找到了就是在host文件里面主机名没有找到-我也是醉了" class="headerlink" title="问题原因貌似找到了就是在host文件里面主机名没有找到,我也是醉了."></a>问题原因貌似找到了就是在host文件里面主机名没有找到,我也是醉了.</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">修改/etc/hosts文件</span><br><span class="line"></span><br><span class="line">127.0.0.1 主机名 localhost.localdomain localhost</span><br><span class="line"></span><br><span class="line">或是再添加一条 </span><br><span class="line"></span><br><span class="line">127.0.0.1 主机名 </span><br></pre></td></tr></table></figure>


<h4 id="主机名是新加的，原来没有，保存，问题解决"><a href="#主机名是新加的，原来没有，保存，问题解决" class="headerlink" title="主机名是新加的，原来没有，保存，问题解决"></a>主机名是新加的，原来没有，保存，问题解决</h4>]]></content>
      <categories>
        <category>服务器操作</category>
        <category>host</category>
        <category>exception</category>
      </categories>
      <tags>
        <tag>exception</tag>
        <tag>host</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器硬盘异常满</title>
    <url>/2019/11/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E7%9B%98%E5%BC%82%E5%B8%B8%E6%BB%A1/</url>
    <content><![CDATA[<h3 id="这几天sftp老是upload不上去文件-一看磁盘已满"><a href="#这几天sftp老是upload不上去文件-一看磁盘已满" class="headerlink" title="这几天sftp老是upload不上去文件,一看磁盘已满"></a>这几天sftp老是upload不上去文件,一看磁盘已满</h3><p>但是就我个人使用也没有占用硬盘的应用,只能挨着找了 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure>

<p>命令查看到底哪个文件占用,最后找到果然是因为docker.</p>
<p>之前使用home assistantd是使用docker镜像直接创建,当时就发现日志内容出奇的多,只是因为懒就没有在意,没想到现在导致问题大大的.</p>
<p>于是尝试docker stop, 居然是自启动的.</p>
<p>docker rm -f xxx 也无用</p>
<p>docker 中目前运行的mysql,mongo,都已经不用了,在另一台服务器上,所以我就直接暴力删</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f `docker ps -a -q` # 删除所有容器</span><br><span class="line">docker rmi -f `docker images -q` # 删除所有的镜像</span><br></pre></td></tr></table></figure>

<p>得,一了百了.</p>
]]></content>
  </entry>
  <entry>
    <title>树莓派上的Homeassistant简单使用</title>
    <url>/2018/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E7%9A%84Homeassistant%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/uploads/home1.png" alt="avatar">  <img src="/uploads/hom2.jpg" alt="avatar"></p>
<p><img src="/uploads/home3.png" alt="avatar">  <img src="/uploads/home4.png" alt="avatar"></p>
<h4 id="1python3-环境-python3-–version"><a href="#1python3-环境-python3-–version" class="headerlink" title="1	python3 环境     python3  –version"></a>1	python3 环境     python3  –version</h4><h4 id="2pip3环境-–version"><a href="#2pip3环境-–version" class="headerlink" title="2	pip3环境    –version"></a>2	pip3环境    –version</h4><h4 id="3如果需要可以设置国内源"><a href="#3如果需要可以设置国内源" class="headerlink" title="3	如果需要可以设置国内源"></a>3	如果需要可以设置国内源</h4><span id="more"></span>

<ul>
<li>我从本地拷贝了一份redis.conf,因为需要设置密码,密码配置在conf中</li>
</ul>
<h4 id="4安装-home-assistant-sudo-pip3-install-homeassistant"><a href="#4安装-home-assistant-sudo-pip3-install-homeassistant" class="headerlink" title="4	安装  home assistant             sudo pip3 install homeassistant"></a>4	安装  home assistant             sudo pip3 install homeassistant</h4><h4 id="5启动前可以提前补一下所需要的组件"><a href="#5启动前可以提前补一下所需要的组件" class="headerlink" title="5	启动前可以提前补一下所需要的组件"></a>5	启动前可以提前补一下所需要的组件</h4><pre><code>sudo pip3 install sqlalchemy  /  aiohttp_cors /home-assistant-frontend  /  mutagen  /distro /fuzzywuzzy /netdisco /xmltodict
</code></pre>
<h4 id="6-启动-hass"><a href="#6-启动-hass" class="headerlink" title="6       启动    hass"></a>6       启动    hass</h4><h4 id="7-天气"><a href="#7-天气" class="headerlink" title="7 	天气"></a>7 	天气</h4><pre><code>    sensor:
      - platform: yr
        name: Weather
        forecast: 24
        monitored_conditions:
          - temperature
          - symbol
          - precipitation
          - windSpeed
          - pressure
          - windDirection
          - humidity
          - fog
          - cloudiness
          - lowClouds
          - mediumClouds
          - highClouds
          - dewpointTemperature
</code></pre>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Homeassistant</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>Homeassistant</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>百度空间的那些文字Part2</title>
    <url>/2020/05/01/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E9%82%A3%E4%BA%9B%E6%96%87%E5%AD%97Part2/</url>
    <content><![CDATA[<h2 id="白白的"><a href="#白白的" class="headerlink" title="白白的"></a>白白的</h2><blockquote>
<p>收藏于 2009-11-11</p>
</blockquote>
<p>白白的</p>
<p>今天下午放假，因为明天是光棍节，所以会有人问我是不是因为这个原因放假，当然，不是。</p>
<p>天气是突然变冷的，我其实不喜欢突然这个意向。</p>
<p>早上洋洋洒洒的飘着一些冰水混合物，风很大。 下午在车上的时候，是雨夹雪，打在车窗上时很脆的响声，雪，就是这个时候开始下的。</p>
<p>回来家的时候，我就是一直在窗户上看外面，我在期望一场大雪，根本原因是同志们那里都是雪啊雪的满天飞，qq空间里出奇的一致，都是雪啊雪的，最后我也变成了雪啊雪。</p>
<p>吃完饭，我就将两只耳朵塞上，去雪啊雪了。 天气预报这两天是特积极，上午还是暴雪黄色预警，下午就成了暴雪红色预警，结果啊，全是白白的了。</p>
<p>雪是有声音的，我听到了。</p>
<p>簌簌的响，簌簌的落，你真是一个精灵。</p>
<p>你刚来的时候我开始抱怨你的弱，你的不肯施舍，而你就像是嘲笑我一样，越来越大，你已经把我淹没好机回了。</p>
<span id="more"></span>
<p>空，白白的。</p>
<p>我和老妈老爸在大街上走，我拿着老爸的手机，放着绮贞的旅行的意义。</p>
<p>梦，白白的。</p>
<p>老妈教我在雪地里压拖拉机的印，就是学鸭子走路，这是小时候经常在田地里做的事情。</p>
<p>雪，白白的。</p>
<p>路灯是暖黄色的，我喜欢这个颜色。我的那个精灵，还是经不住这暖黄的诱惑，越下越大。</p>
<p>灯，暖黄的。</p>
<p>暖黄色的力量是巨大的，因为雪，让漫天都是暖黄的，如此温柔，如此让我感到安心。</p>
<p>现在你，不是柳絮因风起，是撒盐空中，是毫无顾忌。</p>
<p>在很多人事已非，莫名悲凉的日子里，暖黄，白，冷，我最喜欢你。</p>
<p>我终究还是，逃不过，对你的赞美。</p>
<p>耳边传来老妈轻缓的鼻息，睡熟了吧。</p>
<p>我，还在看一场，你华丽的冒险。</p>
<p>我多想，让你，静静的躺在我的衣柜。</p>
<p>所有人，晚安。 。</p>
<h2 id="情"><a href="#情" class="headerlink" title="情"></a>情</h2><blockquote>
<p>收藏于 2009-11-11</p>
</blockquote>
<p>你是一卷诘屈聱牙的经书，</p>
<p>我是一个执念佛理的苦行僧。</p>
<p>我遇到佛祖，</p>
<p>佛祖让我把你参透，</p>
<p>我便不敢停留。</p>
<p>我看着你，</p>
<p>日夜把你诵读。</p>
<p>在阳光的温暖，</p>
<p>在海洋的清凉，</p>
<p>在前朝的尘埃，</p>
<p>在未时的迷雾。</p>
<p>只是，早以一语成谶。</p>
<p>我是一个苦行僧。</p>
<h2 id="约翰-多恩"><a href="#约翰-多恩" class="headerlink" title="约翰 多恩"></a>约翰 多恩</h2><blockquote>
<p>收藏于 2009-11-11</p>
</blockquote>
<p>Such wilt thou be to me,</p>
<p>who must,</p>
<p>Like th’ other foot,</p>
<p>obliquely run,</p>
<p>Thy firmness makes my circle just,</p>
<p>And makes me end where I begun.</p>
<h2 id="夜晚-亲爱的朋友-海子"><a href="#夜晚-亲爱的朋友-海子" class="headerlink" title="夜晚 亲爱的朋友 海子"></a>夜晚 亲爱的朋友 海子</h2><blockquote>
<p>收藏于 2009-11-11</p>
</blockquote>
<p>夜晚 亲爱的朋友</p>
<p>在什么树林，你酒瓶倒倾</p>
<p>你和泪饮酒，在什么树林，把亲人埋葬</p>
<p>在什么河岸，你最寂寞</p>
<p>搬进了空荡的房屋，你最寂寞，点亮灯火</p>
<p>什么季节，你最惆怅</p>
<p>放下了忙乱的箩筐</p>
<p>大地茫茫，河水流淌</p>
<p>是什么人掌灯，把你照亮</p>
<p>哪辆马车，载你而去，奔向远方</p>
<p>奔向远方，你去而不返，是哪辆马车</p>
<h2 id=""><a href="#" class="headerlink" title="~~"></a>~~</h2><blockquote>
<p>收藏于 2009-11-22</p>
</blockquote>
<p>最近天是约来越热了。昨天最高温度叫做零度，今天的叫做十度。</p>
<p>崩溃中</p>
<p>更崩溃的在下面</p>
<p>今天班里来了个四补的，就是第四年补习</p>
<p>我想到那个四，我就崩溃了-</p>
<h2 id="他。"><a href="#他。" class="headerlink" title="他。"></a>他。</h2><blockquote>
<p>收藏于 2009-12-12</p>
</blockquote>
<p>他应该是一个孩子，尚且这么定义。</p>
<p>而于他，其实也没什么好定义的界限。无非是和谁在一起，做什么样的人。</p>
<p>他内里大概是成熟的，会在人群散场后，认真反思每一个自己，无端多出好多领悟。</p>
<p>他向来对自己的领悟感到好笑，觉得那些事应该是年长的人以严肃的表情告诫的，又觉的自己想法太多，总归不是什么好的事情。</p>
<p>他也喜欢一个人的感觉，且，不认为自己属于忧郁的那种。</p>
<p>他不喜欢文森特，不喜欢那些黑暗又颓废的人。他时常会读一些佛理，便觉内心似有所悟，这些不同于自己的思考，是另一种透彻的悟，便欣然接受。</p>
<p>他觉得他懂得人不一定要懂他。他觉得这是再正常不过事情。一个女孩子对他说，无需懂我。若非你想守护我。他觉得这是带了些执拗的，也就不深究。还有一个女子对他说，一生之中，遇见一个懂自己的人是多么不易。他觉的，是对的。</p>
<p>他想要遇见一个女子，十七岁之前像孟克柔，之后像张悬，之后像陈绮贞。他希望和这样一个女子，走在熟悉的公路上，两边都是梧桐树。牵手或不牵手，相爱或不相爱。</p>
<p>他时常艳羡那些去过很多地方的人，他们拥有很多传奇，会有更凝实的生命，不焦躁，心思平坦，相处随和。</p>
<p>他常看那些旅行杂志，家里存有厚厚一沓，是他抓住每一个机会所得。他也对自己的收获感到自豪，但也觉的没人分享是件落魄的事情，也就收了自豪，进了平坦的路途，去细细看。</p>
<p>里面震撼他的是一幅叫做蓝的图片，来自西藏。他无法形容那种蓝，想来想去，就觉得只有一个字来的好，就是蓝。</p>
<p>这就是他喜欢蓝的根源。</p>
<p>他想去西藏，一个人，却又觉得一个人显得落寞。他知道，总会有几个女子愿意同他同行。想来想去，觉得好笑。况且没有一个人旅行的经历，却又想的那么远，竟然连人也将要选好，就真是好笑。</p>
<p>他想去旅行，这个冷暖自知的年代，应该去外收获一些自然。</p>
<p>他喜欢一个人散步，觉得这是一种简单的旅行，总会见到熟悉陌生的声音。不会陷入其中，又可随时逃脱，又有安静的地方供他欣赏。这些让他觉得安心。</p>
<p>这就像，一个男孩子，因为一个电话或一个短信同一个女孩子建立更深刻的关系，在路灯下欣赏一切的心情。</p>
<p>Anke遇见他的时候，尚不知年纪。</p>
<p>故事就说到这里，其他应该是秘密。</p>
<p>后来，他一个人去了西藏。</p>
<p>后来，他遇到一个女子。</p>
<p>结婚。生子。是再正常不过的事情。</p>
<h2 id="Love-In-December-club-8"><a href="#Love-In-December-club-8" class="headerlink" title="Love In December club 8"></a>Love In December club 8</h2><blockquote>
<p>收藏于 2009-12-12</p>
</blockquote>
<p>《Love In December》其实很适合在夏天听，道理就如天热饮冰这么简单。在一些电台DJ那儿，《Love In December》是他们作配乐的首选。它有最简单的好听公式：清新的女声加飘忽的合成旋律，但音乐又不是这么简单，有点Trip-Hop的阴冷，又有更多法式电子的温情。卡罗琳娜的（Karolina Komstedt），除了唱歌，她的职业还是老师。</p>
<h2 id="海"><a href="#海" class="headerlink" title="海"></a>海</h2><blockquote>
<p>收藏于 2009-12-13</p>
</blockquote>
<p>我是一只鱼。谁会是我的海。</p>
<h2 id="写。"><a href="#写。" class="headerlink" title="写。"></a>写。</h2><blockquote>
<p>收藏于 2009-12-19</p>
</blockquote>
<p>写，一种略带忧伤的美好回忆。</p>
<p>一种过于世俗的人生，或许，那不是生命里所拥有的传奇。</p>
<p>或许，因为，不是江湖里的孩子，没有一路同行的习惯。</p>
<p>要冷暖自知。</p>
<p>他说，世界是一个没有繁华上演的悲剧。或许，醉生梦死，便是那一场悲剧里的传奇。</p>
<p>他说，要做记忆的旁观者。</p>
<p>要做用手掌托住太阳的大海，摇曳曙光的那支温暖漂亮的笔杆。用孩子的笔体写下：相信未来。</p>
<p>十指微凉。</p>
<p>谁，是一座回旋的迷宫，兜兜转转，春夏秋冬，依旧在这里。</p>
<p>他抬头仰望，习惯于四十五度，一道白的弧线静静的把天空裂成两半。低头，是六十度的地面，一地繁华散尽的狼藉。</p>
<p>他和谁处在不同的纬度，仰望同一片天空，走在不同的道路，却始终不遇见。</p>
<p>他。</p>
<p>幸福是一个遥远的美丽，生生不息却又难以触及。一个人在黑暗中行走，那种孤独的感觉，即使在深切的热爱里面，也是刻骨的痛楚。</p>
<p>幸福只是瞬间的空白，若即若离，若隐若现，繁华落尽，似水无痕。</p>
<p>他说，他从此不再怀念，怀念只是用过去的记忆覆盖现在寂寞时光的无聊行为。但是在他的大脑里，永远会有这么一些人，鲜活如初。</p>
<p>他无法确定永远的距离，我只知道他不会遗忘。</p>
<p>他曾想着，很久很久以后，坐在时间的荒野里，看漫天殷红的云霞照羞土地的每一寸，看鸟儿拍打这翅膀驼着夕阳飞到山的那一边。</p>
<p>那时，他的心情一定会如水底的石头，洗濯千年的感叹。</p>
<h2 id="两部广播剧"><a href="#两部广播剧" class="headerlink" title="两部广播剧"></a>两部广播剧</h2><blockquote>
<p>收藏于 2009-12-19</p>
</blockquote>
<p>两部广播剧，一部叫做让青春继续，一部叫做此间的少年。</p>
<p>第一次听的是让青春继续，在长治交通文艺广播。</p>
<p>我一直以为没人像我一样，会无聊到听广播，后来有一天，不经意间和李梭梭说起，才知道一样在听。</p>
<p>怀念听广播的日子，记得这个真实的故事。</p>
<p>我喜欢这个故事的真实。</p>
<p>你们一定要听。</p>
<p>有机会，一定要听。</p>
<h2 id="无标题"><a href="#无标题" class="headerlink" title="无标题"></a>无标题</h2><blockquote>
<p>收藏于 2009-12-31</p>
</blockquote>
<p>给我一点时间，让我想想我要写什么.</p>
<p>浮世若不扰攘，恩恩怨怨就荡不开了。这句话是属于简桢的。</p>
<p>1.梦见一个人，以一种信仰的姿态。</p>
<p>闭着眼。告诉我，她是谁。</p>
<p>我知道一个模糊的名字。</p>
<p>我记得一张模糊的脸孔。</p>
<p>她模糊，只有轮廓。</p>
<p>只有她信仰的姿态，清晰。深刻。</p>
<p>2.有人问，什么变了。</p>
<p>我默默的听着他们争论，最后知道。</p>
<p>时间变了。</p>
<p>时间，有一种消耗一切的能力。</p>
<p>3.我想要一种力量</p>
<p>你要给我。</p>
<p>我有一种深入骨髓的疼痛，它剧烈。</p>
<p>让我觉得残忍。</p>
<p>我觉得就像是一个流浪的孩子。</p>
<p>4.有人问我，回忆是什么。</p>
<p>回忆，眼泪成诗。</p>
<ol start="5">
<li></li>
</ol>
<p>我想你。</p>
<p>可你是谁？</p>
<h2 id="家的轨迹"><a href="#家的轨迹" class="headerlink" title="家的轨迹"></a>家的轨迹</h2><blockquote>
<p>收藏于 2010-01-08</p>
</blockquote>
<p>我看到晕黄的光亮，桌上的灯光柔和的轻抚着每一件看得到的家具。 一套轻型的沙发上，坐垫不经意的摆着。 木条的地板掉了一些深褐色的漆，闻起来有一股例行清洁的淡淡木头味。 桌子上的每一个棱角依然整齐，茶杯放在那里，像在等人随时取用。 墙还挺挺的拥抱住整个内部的温暖。 床静悄悄的卧在那里，所有的椅子规规矩矩的并坐或对坐着，窗子半合了眼帘。 门，仍然坚定的挡在那里。 这里的确发生过一些事情。 许多年前有一对年轻男女，相爱而结婚，他们开始慢慢经营出一点空间，属于自己的空间。 他们开始抚养自己的儿女，小心整理每一道射入室内的光线，使它们在四壁反射出一种熟悉的，带有情感的光泽。 后来屋内的情绪变化开始频繁，有时炙热，有时清冷。 门，就这么开开关关个不停。整个内部变成一片生命的流动体，即使没有人在时亦然。 家具都是知道的。 后来，有人终于陆续留下了背影在门口消失，而且不再回头。 它开始慢慢维持住起码的余温，保持尚称的上柔和的昏黄的光泽，即使外人根本感觉不出来。 这里的确发生过一些事情，但也只有那昏暗而柔和的光所照着的全家福相片能证明它曾经那么确确实实的发生过。 你可以在空气中略略闻到一股淡淡的气息，优雅而庄重。 这是人类故事的轨迹，这是我想的家。</p>
<h2 id="浮世"><a href="#浮世" class="headerlink" title="浮世"></a>浮世</h2><blockquote>
<p>收藏于 2010-01-11</p>
</blockquote>
<p>浮在记忆与遗忘边缘的，总是琐事。 人，趴在时间的背上往前赶路，也不知是一路颠颠荡荡把人晃傻了，还是尝过的故事翻来覆去就那么几味把人弄腻，到了某个年纪，特别喜欢偷偷回头想几绺细节，连小事都够不上，只是细得不得了的一种感觉。＝＝＝＝＝＝＝＝＝＝＝＝＝＝树林传来揉叶子的声音，那是秋天的手指。阳光把墙壁刷暖和了，夜将它吹凉。 宁谧的小城仿佛不受世事干扰，顶多冬日飘一场银雪，在打盹的小舟上。然而，岁月是个撕书人，把故事章节塞入每一扇窗户，开几朵微笑的，流几滴泪的，浮世如倒影。 所以，飘着风信子与熏衣草的春日，总有素衣老妇撩开窗帘，看石桥上少男少女互道日安；总有婚礼的钟声在绿草如茵的暮日上空响亮；总有迷路的鸽子，停在异乡人的肩膀上。 秋天把旧叶子揉掉了，你要听新故事吗？静静的河水睁着眼睛，笑着说：总有回家的人，总有离岸的船。＝＝＝＝＝＝＝＝＝＝＝＝＝＝时间证明了世间无情，可是，人为何又一代一代地将多情托付在不可托付的情事上？为之痛不欲生，为之哀哀欲绝！ 如果，人世是一出永不谢幕的悲剧，那是因为每个人都知其不可而为，把多情勇敢地托付了出去。 人并非不知道江山易改的道理，也熟读沧海桑田的故事；然而，面对繁华似锦的世间，忍不住要去争取、去唱和，人仍然有一丝憧憬，以为江山已改了千万次，不会恰恰好在我身上改动，沧海已换了千万回面目，怎会恰恰好在我身上变成桑田？ 人完全浸润在自己的多情里，以至于认为其多情可以更改亘古不变的律则，人信任了自己的多情，忽略时间正在无情地冷眼相看。＝＝＝＝＝＝＝＝＝＝＝＝＝＝当你满头大汗地去追逐一个愈来愈远的背影时，或是有人力竭声嘶地呼唤你，而你不想回应他时，那都是极不愉快的经验。但当你终于知道，在路的那一端有一个多么亲切的人正向你走来，而你也几乎要跑着去迎接他时，你会突然觉得，世界待你这么好，你会领会出一份“颠踬”的快乐，在崎岖的路上。＝＝＝＝＝＝＝＝＝＝＝＝＝＝最感动的是那些，明知无法烘暖天空仍以身代薪的人。</p>
<h2 id="疯狂"><a href="#疯狂" class="headerlink" title="疯狂"></a>疯狂</h2><blockquote>
<p>收藏于 2010-01-11</p>
</blockquote>
<p>完全空白的TXT页面。完全黑色的屏幕背景。亮度调到最暗。杯里煮着茶。弱小的电磁炉化不开白萝卜的水。要去KTV把嗓子废掉。用淘宝去疯狂订单。往肚子里装满泡面。拿起羽毛球拍疯狂挥摆。把耳机音量摆到弱不可闻。格式化N次手机。等着下一次格式化。吃无味的蜡。呼吸三流含大量杂质的气体。用循环N次的水混合茶。吃一种声称非常有营养的东西，挂面。看显像管后面的人无耻的跳跃。最爱听陈绮贞的歌。在雪地里喝一杯加冰的可乐。在暖气旁喝热烈的开水。在人群喧闹处沉默。放肆的沉默。让电视看着我睡觉。做一个逼真的演员。＝＝＝＝＝＝＝＝＝＝如此看来我已经疯掉了。＝＝＝＝＝＝＝＝＝＝事实上，我还很好。</p>
<h2 id="想"><a href="#想" class="headerlink" title="想"></a>想</h2><blockquote>
<p>收藏于 2010-01-22</p>
</blockquote>
<p>快跑的小猪，C。我看到你的短信很是有种特殊感觉…… 一句我很好，就让我有种想哭的冲动。哈哈，不说了，小猪C。C，安。</p>
<h2 id="夜星"><a href="#夜星" class="headerlink" title="夜星"></a>夜星</h2><blockquote>
<p>收藏于 2010-01-23</p>
</blockquote>
<p>夜空，三星成线。 月亮，是夜的瞳孔，深邃，平和。月半，明晰的光亮倾倒而来，像墨色干涸后的质地，散发着些味道。味道，淡的。没有谁能闻出。 空气冷的剧烈，像浓重的想念，刻入骨髓。呼吸冰冷，一种畅快的欢喜过来，越冷，越畅快，带有想的味道。 寒冬，巨大而空旷的陆地，像独自游走的夜行人。静谧，安详。让夜月抚慰，折射另一段光辉。 我的身体温热，会呼出白色的水汽。白色的水汽会立刻消散，带走我身体的温度。 抬头，还是夜色浓重的月。没有闪烁着灯的飞机，没有鸟儿飞过。有的，是满天安详的星星，它们闪烁的光芒，那么亮。 三星成线，整齐的排列，在夜空。那么长久的在着。 知道，就算外面再冷，也带不走自己的温度。 安。</p>
<h2 id="一些小无聊"><a href="#一些小无聊" class="headerlink" title="一些小无聊"></a>一些小无聊</h2><blockquote>
<p>收藏于 2010-02-05</p>
</blockquote>
<p>我想写一些东西，来表达一些感情。 不过，悲剧的是，什么也说不出。 什么时候开始的呢？什么时候不想说话了呢………应该是什么时候不知道说什么了呢？ 这种问题，好像永远也未有答案。 我发现把耳朵塞住是件很不错的事情。原因大概很多，总之，多的有点不知道怎么说。 屁股坐的疼，坐了那么多年。结果是那个地方已经有点平了，多可怕啊。时间。 听燕姿的我的爱，听了很长时间。记得让写同学录的时候，有一项是你最喜欢的歌手，我向来是乱写一气的，一回写的是斯坦福妮。问我是谁，额，是燕姿。 好长时间没有面向阳光行走了，这是很悲剧的事情。大概阳光注意到我没有注意它了，所以这几天都很温暖。其实，阳光也要扮演一个两面人，我原谅它。 身边摆着一堆垃圾，这就是生活的产物。 我一直喜欢喝水，有时候就在喝饮料的时候也要喝水。所以，很多人都认为我有病，其实，我也不知道为什么会有这样的行为。估计，专家知道。 要是我能够会一种乐器，大概也能抒发我心情……我有学习小提琴的机会，有学习萨克斯的机会，还有学习钢琴的机会，但后来都让它们跑掉了。因为我觉的那种活计，无非就是在别人面前表现表现而已。 有时候突然有多错觉，一种很久之前有过的感觉，久违的。这是近乎在恍惚之间的事情，就是有一瞬间的感觉，强烈，然后，就消失无踪。 真的就是快过年了，好像真的没什么感觉了。这句话说的太矫情了，自己才多大。可是，这种感觉总是有的。 天气突然有些凉了，薄雾之后的光，不明确，却刺眼。我在想过年能做些什么，好像也没什么可做。大概也就是几个朋友在一起吃饭聊天，然后度过一段时间。没有那么好的心情去写一篇文章，只能用最直接的话来表达。加湿气的水雾慢腾腾的泻出，凉。我又开始想，想很多人。小酒，K，还有C。小酒的代号挺多，我会叫她T，白，窝，瓜女儿。然后，还是觉得，过年了，没感觉。</p>
<h2 id="强烈的地震"><a href="#强烈的地震" class="headerlink" title="强烈的地震"></a>强烈的地震</h2><blockquote>
<p>收藏于 2010-02-21</p>
</blockquote>
<p>早上四点半被窗子的猛烈的敲击声惊醒，第一反应是，迟到了。然后就是地震的传言，于是我穿衣服在外面，结果震惊啊，满大街的同志……︶︿︶。然后就一个想法，回去睡觉吧。当然当然，地震是没有的。</p>
<h2 id="我想你"><a href="#我想你" class="headerlink" title="我想你"></a>我想你</h2><blockquote>
<p>收藏于 2010-03-17</p>
</blockquote>
<p>想你时，你在哪里。想你时，我在这里。这应该是最好的对白，却是最坏的独白。外面下着雪，就更想那个粉红色的你。</p>
<h2 id="To-T"><a href="#To-T" class="headerlink" title="To T"></a>To T</h2><blockquote>
<p>收藏于 2010-05-01</p>
</blockquote>
<p>T</p>
<p>忘了这个称呼是什么时候开始出现的，也忘了什么时候我被你叫做大嘴。</p>
<p>昨天凌晨收到的短信，说来好笑，是因为半夜肚子痛才看到的。</p>
<p>短信提示，发信人，夏安。</p>
<p>T，你的代号又一次被我扩充。</p>
<h2 id="没有如果-只有结果"><a href="#没有如果-只有结果" class="headerlink" title="没有如果 只有结果"></a>没有如果 只有结果</h2><blockquote>
<p>收藏于 2010-06-19</p>
</blockquote>
<p>小楠说，这个世界没有如果，只有结果。</p>
<p>我想了想，没有说话。</p>
<p>现在的时间是晚上，很晚了。我一个人。坐在这里。打字。听电流的声音。闻着蚊香的味道。</p>
<p>我是真的迷茫着的，我真的感觉我已经不是我了，我像个没有思想的动物。。。我都已经不信任我了 ，我又为什么让你们这么累。</p>
<p>还是黑色的背景，从一开始就没有再换过，一直喜欢着。</p>
<p>已经很久没有再更新这个空间了。不是没有时间，只是，没有那个心情。</p>
<p>时间是不是很快啊，我看不到过去，就到了现在。没有什么改变，只是时间变了而已，只是这样而已。我们谁都没有错。到底是谁错了。</p>
<p>小酒，你在厦大啊，厦大，是一个怎样的地方，是不是有很高的梦想，很美的你。</p>
<p>每次你在和我说你的事情的时候，我在心里就深深的羡慕，你的一切，是让我仰视的存在。小酒。</p>
<p>小酒，我开始做一些我都不明白的事情，我是怎么了，我不想这样，我不想这样。</p>
<p>小酒，你承认吗。没有如果，只有结果。</p>
<p>小酒，你说你想念，你怀念。我，更想。</p>
<p>深入骨髓的疼痛，我比你更深刻。我的难过，要怎么说。</p>
<p>小酒，借你的话：</p>
<p>我知道自己离难过，却不知道为什么难过。 </p>
<p>我知道自己有满怀的想念，却不知道该诉与何人。 </p>
<p>我知道我在强颜欢笑，却不知道对这样的伪装何去何从。 </p>
<p>我知道我并不独立，却不知道该依赖谁。 </p>
<p>我知道也许没谁可以依赖，却不知道把想念试着收回来。 </p>
<p>我知道自己不是个冷漠的人，却不知道如何把真诚显露。 </p>
<p>我知道我的存在对于这个世界不合理，却不知道究竟错在哪里。 </p>
<p>我知道我的难过只是一时的心情，却不知道这个一时有多久。</p>
<p>小酒，你的难过，是不是因为你的寂寞。是因为你心里。没有人可以真正的住进去。</p>
<p>小酒，这个夜晚，你应该酣然入睡的，你应该做一个美丽的梦。</p>
<p>我把输入法的皮肤改成了世界杯的样子。</p>
<p>小酒，是不是应该好好找回我自己。</p>
<p>对不起。</p>
<p>我不想让你们失望。</p>
<p>天亮。说晚安。</p>
<h2 id="从vista-到-win-7-的坎坷经历"><a href="#从vista-到-win-7-的坎坷经历" class="headerlink" title="从vista 到 win 7 的坎坷经历"></a>从vista 到 win 7 的坎坷经历</h2><blockquote>
<p>收藏于 2010-07-28</p>
</blockquote>
<p> 话说 考试之前联系好了朋友  要回家把电脑上的vista 系统换掉 在Vista下的诸</p>
<p>多问题让我真的郁闷无比  </p>
<p>​     终于 今天 其实应该是昨天下午四点整  开始安装win7  我选的方法是 朋友的</p>
<p>u盘中将 安装文件放到本地硬盘里 </p>
<p>​    然后就鬼使神差的 直接点击安装程序 因为之前看论坛里说的方法都是 光盘</p>
<p>刻录 或者  u盘安装</p>
<p>​     我就不知道我怎么点开的  还好没出问题  不过应该出不来问题 安装的时候会</p>
<p>出来对话框  是升级还是xxx的 （忘了） 朋友说 升级不行的  我一不小心就 摁下</p>
<p>去了 </p>
<p>​    我之前在学电脑上看到过 微软是不允许vista直接升级到7的 所以迷茫了一会 </p>
<p>继续看电脑如何折磨我。。</p>
<p>​     很快的，两个小时过去了</p>
<p>​     无聊的安装过程结束，朋友去用激活软件的时候  问题出来了</p>
<p>​     居然在重启之后   还是显示30天试用期  我无语 就去百度大大那查啊 查</p>
<p>​     ok  搜到  结果是一大堆  全是这样滴情况</p>
<p>​     然后西风大大说  刷SLIC  blos我傻眼。</p>
<p>​     于是花了一个小时了解过程   我把文章直接复制下了 放进了我的p4  以便刷的时候参照一下</p>
<p>​     西风大大说的很清楚了  所以我用SLIC_Dump_ToolKit 工具查看我小y的 slic</p>
<p>​     一看 又傻了  说是提取成功 但是oem  xxxx的一堆话  总之是显示不出来slic是2.0还是2.1   我想不行？ 那我只能用终极武器了  eveast   第一遍没找见 后来细细看了一遍 终于发现 是2.0  至于为啥显示不出来  现在也没有弄明白。。</p>
<p>​     ok  我看准备工作就绪  该下的都下了  开始吧  </p>
<p>​     BLOS刷的时候很顺利  把17CN22WW  刷到了17CN28WW  但是后面依旧没有显示是啥版本  郁闷  不过  后来发现  没关系的</p>
<p>​     该刷SLIC的时候出问题了   进入dos的时候 按照步骤一步一步来  重启计算机，进入到mousedos的dos命令行</p>
<p>  输入dir查看当前可以运行的文件，会出现CLRMAR<del>1和SETMAR</del>1，输入CLRMAR<del>1，回车，再输入SETMAR</del>1，回车</p>
<p>  然后出现 error  我又傻眼</p>
<p>  明明对的呀  自己仔细的检查了一遍 </p>
<p>  汗  居然没有吧y450的mark文件  没有复制到u盘根目录下</p>
<p>  因此  两个小时就这样过去了  悲愤。。</p>
<p>  重新修改过后  在我的不断祈祷声中  yes  成功。</p>
<p>  重启之后  用Everest看了一下  SLIC2.1  再怀着忐忑的心看了计算机的属性  yes  已经成功激活win7。</p>
<p>  所以 现在半夜  我激动的写下  以此 纪念我流失的时间。。。</p>
<p>  也希望能帮助你们  有问题可以留言。</p>
<h2 id="想让你听听-背景音乐"><a href="#想让你听听-背景音乐" class="headerlink" title="想让你听听 背景音乐"></a>想让你听听 背景音乐</h2><blockquote>
<p>收藏于 2010-09-19</p>
</blockquote>
<p>好久不见。。。</p>
<h2 id="ouch"><a href="#ouch" class="headerlink" title="ouch"></a>ouch</h2><blockquote>
<p>收藏于 2010-10-17</p>
</blockquote>
<p>我很难过。。。我贪图暂时逃离的气氛</p>
<h2 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h2><blockquote>
<p>收藏于 2010-10-24</p>
</blockquote>
<p>逃离了一场盛大华丽的话剧，<br>又在不自觉中陷入另一场幻觉，<br>这一年，我的世界寂静出一种薄凉的状态，<br>以为，新的场景是一场救赎，<br>却不想不过是一场留给自己的独白。<br>自认为，这一年，已是如何的坚忍，<br>然也会无形间，因触及一些景，<br>内心的怯懦也在某一刻被放大到清晰，<br>再坚忍的人，亦会如此吧。<br>也正因了时而不时的自省，<br>终是懂得了如何将淡漠放肆成一种状态<br>在身上深度弥散开来，<br>淡漠，源于阴影里强大的力量，<br>夹带着隐形的穿透力和深沉的信仰，<br>不是固执亦不偏执。<br>记得简桢的话么，<br>我的固执不是因为对任何一桩现实的责难<br>而是对自己个我生命忠贞不贰的守信。<br>我知道，这便是我的信仰，以后的状态，自卫的姿态。</p>
<p>最终——不卑不亢 不悲不伤</p>
<p>收藏于 2010-10-24</p>
<h2 id="最好的爱情-安妮·宝贝"><a href="#最好的爱情-安妮·宝贝" class="headerlink" title="最好的爱情 安妮·宝贝"></a>最好的爱情 安妮·宝贝</h2><blockquote>
<p>收藏于 2011-01-01</p>
</blockquote>
<p>在路途上想起爱情来，觉得最好的爱情是两个人彼此做个伴。<br>不要束缚，不要缠绕，不要占有，不要渴望从对方身上挖掘到意义，那是注定要落空的东西。而应该是我们两个人并排站在一起，看看这个落寞的人间。</p>
<p>有两个独立的房间，各自在房间里学习,工作。<br>一起找小餐馆吃晚饭 ，<br>散步的时候，能够有很多话说。</p>
<p>拥抱在一起的时候，觉得安全。不干涉对方的任何自由，哪怕她还在和旧日男友联络。</p>
<p>不对彼此表白，表白是变相的索取。<br>很平淡，很熟悉，好像她的气味就是你自己身上的气味。</p>
<p>不管何时何地，都要留给彼此距离<br>随时可以离开<br>想安静的时候，即使她在身边，也像是自己一个人。</p>
<p>有一致的生活品味，包括衣服，唱片，香水，食物等等<br>不太会想起对方，但累得时候，知道他就是家.。</p>
<p>我们很容易碰到的，都是自私或愚蠢的人。<br>她们爱别人，只是为了证明别人能够爱自己。<br>或者抓在手里不肯放，直到手里的东西死去。</p>
<p>成熟的感情都需要付出时间去等待它的果实。<br>但是我们一直欠缺耐心，<br>有谁会用十年的时间去等一个远行的人？<br>有谁会在十年远行之后，仍然想回头找到那个人？</p>
<h2 id="Today"><a href="#Today" class="headerlink" title="Today"></a>Today</h2><blockquote>
<p>收藏于 2011-02-07</p>
</blockquote>
<p>明和慧慧  一个从屯留来了  一个从石圪节来</p>
<p>来到我和丫的地方  - - </p>
<p>然后丫没来 </p>
<p>我陪明和慧慧  在ktv   听了两个小时的歌</p>
<p>我在仔细听歌   他们在尽情的亲热</p>
<p>好吧   我杯具了</p>
<p>晚上   </p>
<p>和小酒   在图书馆聊天</p>
<p>从八点   到十点半</p>
<p>我徇私   把图书馆的后门开了   本来今天是不上班的</p>
<p>小酒   穿着靴子黑色的   穿着厚厚的裤袜黑色的   厚厚的羽绒衣 暗红色的 </p>
<p>我看着小酒    啊哈  小酒快结婚了哈   当然   开玩笑</p>
<p>时间好短</p>
<p>小酒拿着一摞  GRE的书   这代表什么   我不想明说</p>
<p>我们一直在聊天   从小时候的她  到现在的她  </p>
<p>和一些   很隐秘的事情   有很多事情我根本不会想到会发生的事情</p>
<p>家庭  爱情  出国  暧昧  生活  学习  难过  快乐  还有好多</p>
<p>然后十点半</p>
<p>锁门  </p>
<p>回家 </p>
<p>小酒  你还是  小酒</p>
<h2 id="Today-初五"><a href="#Today-初五" class="headerlink" title="Today 初五"></a>Today 初五</h2><blockquote>
<p>收藏于 2011-02-07</p>
</blockquote>
<p>今天初五   那么明天初六</p>
<p>大年</p>
<p>早上八点闹钟响了    然后才发现鞭炮早就响的累了</p>
<p>然后八点十分起床</p>
<p>八点半在小酒家楼下出现</p>
<p>然后我先去图书馆   在图书馆  意外的  偷拍了一张小酒的照片</p>
<p>然后    一起看书到十点半  不同的是</p>
<p>她看GRE   我看的不是雅思</p>
<p>十点半坐车  然后去长治</p>
<p>十一点四十五   我在桥北  </p>
<p>看见了木南</p>
<p>然后   我们开始慢慢走路</p>
<p>来回打转</p>
<p>然后在华诺  德克士  吃午餐</p>
<p>然后  在德克士聊天</p>
<p>三个小时</p>
<p>知道服务员  看我的眼神不对了 </p>
<p>我们走了</p>
<p>然后不知觉的  就去了新华书店   然后 </p>
<p>才发觉</p>
<p>已经离一中很近了哈</p>
<p>然后  就去了  那里  </p>
<p>我呆过三年的地方</p>
<p>我和小南   慢慢的走过</p>
<p>然后  发现很多东西没有变  </p>
<p>比如  凌云书社  三味书屋</p>
<p>很多东西变了  </p>
<p>比如  六府塔  教学楼</p>
<p>然后六点坐车回家  </p>
<p>从一中走到商厦</p>
<p>然后从商厦走回三路车站</p>
<p>然后  来了十路  我没走 </p>
<p>来了三路   我没走</p>
<p>来了20路   我让南先走了</p>
<p>后来我居然各种莫名其妙的坐了最后一趟车</p>
<p>后来  我给小南发了一条短信</p>
<p>她说  最后一句话  让我红了眼睛</p>
<p>然后  七点半   回家</p>
<p>吃饭  八点半</p>
<p>来图书馆   陪一个脆弱  寂寞  可爱的女孩子</p>
<p>小酒</p>
<p>亲们</p>
<p>晚安</p>
<h1 id="我"><a href="#我" class="headerlink" title="我"></a>我</h1><blockquote>
<p>收藏于 2011-03-07</p>
</blockquote>
<p>可是我却觉得那么悲伤。岁月带给我更深的迷惘。</p>
<h2 id="好吧-写篇新的"><a href="#好吧-写篇新的" class="headerlink" title="好吧 写篇新的"></a>好吧 写篇新的</h2><blockquote>
<p>收藏于 2011-06-22</p>
</blockquote>
<p>新的什么呢 </p>
<p>好长时间没有写了，百度发表文章的模版都变了。白花花一片，亮的我心里怪怪的。</p>
<p>电脑屏幕上，一只绿色的小虫，趴在一个字的上面，开始横向移动，然后跟着我的光标开始走。然后，他就离开了我的眼前。</p>
<p>好吧 让我想几个月，想想该写什么。</p>
<p>好吧  晚安  你们</p>
<h2 id="we-are-one"><a href="#we-are-one" class="headerlink" title="we are one"></a>we are one</h2><blockquote>
<p>收藏于 2011-07-11</p>
</blockquote>
<p>想在田间的小路上。闭着眼。看。灯火辉煌。</p>
<p>我想写一个小说。说些和我相关的离奇故事。觉的离奇的事情好像没什么离奇的。矛盾的故事。</p>
<p>一直听一首歌。we are one。</p>
<p>。</p>
<p>。</p>
<p>。</p>
<p>I am you。You are me 。 We are one.</p>
<p>…</p>
<p>我觉的我应该来一次长途旅行。想感受一下。旅途。</p>
<p>这是长久以来的想法。根深蒂固。</p>
<p>Take me in your arms</p>
<p>好像这种事情只是想想。经常想想。</p>
<p>fallow me</p>
<p>外面下大雨。下午。</p>
<p>看下大雨。看的出神。</p>
<p>。</p>
<p>。</p>
<p>。</p>
<p>学会炒菜。看外国电影。说几句饶舌法语。</p>
<p>看裸婚的人都神经。</p>
<p>和一个朋友聊天。和一杯茶。闻着香味。</p>
<p>今天。算个开头。明天继续写。</p>
<p>晚安</p>
<h2 id="我还是喜欢以前的写作背景-黑色的，不刺眼。"><a href="#我还是喜欢以前的写作背景-黑色的，不刺眼。" class="headerlink" title="我还是喜欢以前的写作背景~~~~~~黑色的，不刺眼。"></a>我还是喜欢以前的写作背景~~~~~~黑色的，不刺眼。</h2><blockquote>
<p>收藏于 2011-07-20</p>
</blockquote>
<p>人人网，日志，小酒。</p>
<p>  满地的纸箱，凌乱的书桌，刚发下来的临时通行证、纸箱标签，还有那”最后一顿“的餐券——赫然印着”欢送2009级学生“。</p>
<p>​    晚饭过后和玲玲一起逛校园，在学生活动中心看对岸的芙蓉楼，倒影在湖中的一块块灯光拼接起来还真是奇妙。一路走一路聊，我俩都觉得凌云三栋楼的灯光像三颗大大的心，然后讨论了下旁边少掉的那两间究竟是储藏室还是卫生间；我一直都认为田径场的星星很多很漂亮，虽然每次这么讲都会遭到家住半山的玲玲姐鄙视；草坪上的橡胶颗粒散落得到处都是，一个不小心就跳进鞋子里；然后我们就很默契的开始唱赵薇那首《雨季的故事》：“你黯然，你转身，我呼唤，你回头，我上前，刹那间雨滴都闪烁如光圈……”</p>
<p>   生命中的任何事物，突然被剥离时，不管爱或者不爱，一时都会无法接受。我留恋，不仅仅是因为这里的绿树红花，而是因为这里的每一寸土地，有我足迹的地方就有我的心情。</p>
<p>​    两年来安逸地成长，在一片小天地里经历喜怒哀乐，初尝人生疾苦，初品人生百态。迷茫，辗转，豁然开朗交替更迭，笑过，哭过，无限感激过也愤世嫉俗过，在热闹的世界孜孜不倦着，寻找一个合适的位置，一种优雅的生活姿态。</p>
<p>​    时光是生活的总导演，像一台巨大的车轮，当它行进到目的地时，动情的戏便要按时谢幕，新的一幕如期开演。</p>
<p>​    为过去的时光做个标记，然后开启崭新的一程。</p>
<p>。。。</p>
<p>。。。</p>
<p>。。。</p>
<p>I  See</p>
<p>New  way，new life、</p>
<p>两年的时光，荏苒，我还记得我和小酒为涟漪的读音争执的脸庞，下雨天一起喝热橙汁的天空。我还说过很多事情，小酒，这些大概都是她忘记的。</p>
<p>这不是一个怀念的季节，没有飘落的树叶，没有喧嚣的离别，没有苦情的诗词，小酒，你总是以一种优雅的姿态，走过一段。</p>
<p>在热闹的世界</p>
<p>你还是不早睡</p>
<p>我还是无法释怀的是，你还是在那里，离我们越来越远。我想再看一遍龙猫。</p>
<p>I Will miss。</p>
<p>小酒</p>
<h2 id="-1"><a href="#-1" class="headerlink" title="."></a>.</h2><blockquote>
<p>收藏于 2012-02-08</p>
</blockquote>
<p>到底为什么。心里总是某个时候。漏了一拍。</p>
<h2 id="夜-浮夸-微冷-淡-想"><a href="#夜-浮夸-微冷-淡-想" class="headerlink" title="夜 浮夸 微冷 淡 想"></a>夜 浮夸 微冷 淡 想</h2><blockquote>
<p>收藏于 2012-03-12</p>
</blockquote>
<p>我的脑海里  有点小杂乱的思绪。   </p>
<p>宿舍熄灯了。    渐渐的都会睡去。  想在这样的一个时间里。 想念一些事情。 </p>
<p>上人人  。 然后看到一些小消息。    好吧 。。  酒 的  人人注销了</p>
<p>然后我看到她写的一副字。</p>
<p>隶书 。</p>
<p>很好看 。  大气的。  恍惚。</p>
<p>我与你好远。</p>
<p>亲   离我最近的那个 我想你</p>
<h2 id="我想"><a href="#我想" class="headerlink" title="我想"></a>我想</h2><blockquote>
<p>收藏于 2012-03-13</p>
</blockquote>
<p>我想现在就给你一个拥抱，让你感受到我的存在。</p>
<p>可是我写不出真正的拥抱。</p>
<p>亲   冷暖自知 我想你</p>
<h2 id="旅行者"><a href="#旅行者" class="headerlink" title="旅行者"></a>旅行者</h2><blockquote>
<p>收藏于 2012-06-22</p>
</blockquote>
<p>2012.4.27<br>  旅行者</p>
<p>  我隔着一米远的距离抛一根烟与你同享<br>  你以接纳作为对我的回敬<br>  我们便是旅行途中的朋友<br>  下一场雨吧<br>  我好奇你帽檐下原本的发色<br>  不<br>  艳阳高照吧<br>  现在的就是你的<br>  也许那是一座我未曾攀过的山峦的颜色<br>  皮囊下<br>  你是清白的旅行者</p>
<p>  袄子口袋里的一副扑克<br>  看上去旧了一些<br>  陆陆续续的四五个饮料瓶<br>  你精挑细选<br>  手起牌落<br>  是你会赢还是他？<br>  他定是说了些什么<br>  你在回答<br>  太远 我听不见<br>  那记忆 那伙计<br>  那口袋 那瓶子<br>  灵魂处<br>  你是寂寞的旅行者</p>
<p>  城市在走<br>  你同行<br>  用自己的调子跟随他的脚步<br>  旁人的眼光<br>  何以增加你背囊的重量<br>  世俗中<br>  你是孤傲的旅行者</p>
<h2 id="眼中人"><a href="#眼中人" class="headerlink" title="眼中人"></a>眼中人</h2><blockquote>
<p>收藏于 2012-06-22</p>
</blockquote>
<p>时光，重叠在一棵树上。 </p>
<p>旧枝叶团团如盖，新条从其上引申。时光在树上写史，上古的颜色才读毕，忽然看到当代 </p>
<p>旧与新，往昔与现在，并不是敌对状态，它们在时光行程中互相辨认，以美为最后依归 </p>
<p>—-简桢《眼中人》 </p>
<h2 id="想哭"><a href="#想哭" class="headerlink" title="想哭"></a>想哭</h2><blockquote>
<p>收藏于 2012-06-23</p>
</blockquote>
<p>想约在一个适合聊天的下午<br>分开很多年满以为没有包袱<br>我还打算回顾我们为何结束<br>还想问你是不是一个人住<br>当你的笑容给我礼貌的招呼<br>当我想诉说这些年来的感触<br>你却点了满桌我最爱的食物<br>介绍我看一本天文学的书<br>我<em>想哭</em>不敢哭<br>难道这种相处<br>不像我们梦寐以求的幸福<br>走下去这一步<br>是宽容还是痛苦<br>我<em>想哭</em>怎么哭<br>完成爱情旅途<br>谈天说地是最理想的出路<br>谈音乐谈时事不说爱<br>若无其事原来是最狠的报复<br>当我想坦白我们的乐多于苦<br>你说水星它没有卫星好孤独<br>我才明白时间较分手还残酷<br>老朋友了再没资格不满足</p>
<p>收藏于 2012-06-23</p>
]]></content>
  </entry>
  <entry>
    <title>百度空间的那些文字Part1</title>
    <url>/2020/05/01/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E9%82%A3%E4%BA%9B%E6%96%87%E5%AD%97Part1/</url>
    <content><![CDATA[<h2 id="雨天"><a href="#雨天" class="headerlink" title="雨天"></a>雨天</h2><blockquote>
<p>收藏于 2009-08-21</p>
</blockquote>
<p>雨，不听话，下的没有节奏，没有味道。</p>
<p>今天不写Cheer，写点其它。</p>
<p>嗯，说说朋友。 自然同志说：不诉离殤。是写给347的，记忆中可以肯定的一点是，自然同志的话一直很经典。</p>
<p>在她说了这句话之后，像个找不到方向的孩子，开始沉默。</p>
<p>然后我说，不诉离殤，因为不会分离。心不会分离……</p>
<p>再然后，就又是沉默。</p>
<p>自然同志，寒，李梭梭，小齐，耗子，刺猬，还有很多人，告诉我，他们就要走了，就像T说的，顺着他们自己生命的线，走了。</p>
<p>今天晚上，有雨，没有夜半听雨的心情，就把这样的期望给一个有雨的人，替我怀念。</p>
<p>雨，要来了，同志们，走。</p>
<p>不诉离殤，因为，心，不会分离。</p>
<p>时间说，不早了，孩子该回家了。</p>
<span id="more"></span>
<h2 id="华丽的冒险"><a href="#华丽的冒险" class="headerlink" title="华丽的冒险"></a>华丽的冒险</h2><blockquote>
<p>收藏于 2009-08-22</p>
</blockquote>
<p>疯狂的梦没有了你，还有什么用。 突然就想到了老师的这句歌词……</p>
<p>有位企鹅说，来世要做个大熊猫，如果不幸，还是要做人的话，就做Cheer。</p>
<p>今天还是有雨下，还是稀稀落落，我还是没有感觉。</p>
<p>我开习惯性的低头，在任何时候，专注于眼睛斜向下类四十五度方向的事情。</p>
<p>然，这种习惯不知从何而来。</p>
<p>我又有了高考前的那种症状，我开始中午睡不着觉，午休时心跳开始没来由的加快。这不是一个好事情，我记得那时，我是在阿桑的Angle或是保管中慢慢睡去，不知道现在还管不管用……</p>
<p>我想要一个拥抱……</p>
<h2 id="Forget-me-nots"><a href="#Forget-me-nots" class="headerlink" title="Forget-me-nots"></a>Forget-me-nots</h2><blockquote>
<p>收藏于 2009-08-23</p>
</blockquote>
<p>Forget-me-nots，英语老师上课写的，说是勿忘草的意思。——————– 我没有时间进行光合作用，尽管，今天没有雨，天气也还算灿烂。阳光是不会直射入教室的，但是我的位置很有意思，在第四个窗户打开的时候，阳光会反射向我，有那么几秒钟的眩晕，然后等待反射阳光的离开。我似乎是唯一可以坐在教室享受阳光的孩子，但也许，这根本不算是什么阳光。我看见一个同志站在所谓的操场上，上肢自然下垂，手心打开向着太阳（应该是进行光合作用），脸上是满足的表情，“我开始惊讶的崇拜他”———————今天中午是在王菲的声音中睡去的，隔壁的孩子太爱说话，我只能塞住耳朵了。P4里放满了歌，王菲，阿桑，Cheer的最多，还有多年之前淘出来的经典，这些就是我渡过寂寞时光的东西，当然，还有几张关于亲们的相片，不过不常看。———————我想我是享受不了夏末秋初这个季节了，因为天气刚刚好一些，我的鼻子又开始难受。————嗯，对了，和T.K在一起的时候鼻子不会那么敏感，这真是一个奇怪的事情。…后来事实证明，一切一如往常。后来事实证明，一切一如往常。</p>
<h2 id="我做梦了"><a href="#我做梦了" class="headerlink" title="我做梦了"></a>我做梦了</h2><blockquote>
<p>收藏于 2009-08-24</p>
</blockquote>
<p>昨天晚上做梦了，是一部微型连续剧，梦牵扯到了很多人。其实我已经很久没有做过梦了，不知道这算不算是一种失败。我在五点半醒来，被梦惊醒，然后强迫自己睡去，结果是第二部。—————-中午爸妈开车来看我，给了我一个惊喜，的确是惊喜，因为中午没睡着。中午在饭店吃饭，花的钱不多，但足够我在这里吃十几天。还有许多水果————我从不喜欢吃水果，这就像是一种怪癖一样，事实是，我真的不喜欢吃。———— 我常穿着一件蓝色的格子衬衫，标准的中华立领，重要的是，老妈做的。——————同志们这几天都沉浸在离别的情绪中，小齐开始说他爱347，小5QQ签名改成我爱你们，李梭梭认识的小红小白离开，寒的牛儿走掉……更多的人是什么都没说，就无声无息的走掉。—————风筝飞，叶落下，线缠绕，树长大。</p>
<h2 id="梨"><a href="#梨" class="headerlink" title="梨"></a>梨</h2><blockquote>
<p>收藏于 2009-08-25</p>
</blockquote>
<p>为什么说到梨，情况是，我现在在吃梨。嗯，大家不要分梨。———— 明天是七夕，中国情人节。恩，怎么说，我总觉得七夕情人节不是那么好，不管怎么样，祝大家节日快乐。 ————今天有点热，似乎同桌没有受到影响，依然在看笛安的西决，郭敬明说是有关父辈伦理的小说，我没有深究，不过却惊讶于最小说会有非青春文学的出现。——————妈妈昨天晚上发短信给，我说她忘了金山打字通的速度测试怎么弄，我又又说了一遍，其实，我已经说过很多遍。—————今天收到一封QQ邮件，通知我说给T的超大邮件过期，将被删除。—————我又忽然想起一首叫做心愿的歌，如果我记得没错，是T在初二的时候推荐的。—————嗯，安~</p>
<h2 id="手的预言"><a href="#手的预言" class="headerlink" title="手的预言"></a>手的预言</h2><blockquote>
<p>收藏于 2009-08-26</p>
</blockquote>
<p>风筝飞，叶落下，线缠绕，树长大。 我的手掌握住了风，握不住一粒沙。 我想，Cheer说的是留下了回忆，却留不下关于真实的一点一滴。—————-今天，阴天，确切的说是上午阴天，因为中午的时候太阳开始忽隐忽现，下午的时候阳光照射在旁边房子上的热水器上，然后，我享受了一会阳光。—————- 。教室里坏了灯棍，我旁边的窗户玻璃也被一只鸽子撞坏，在一阵惊呼声之后，鸽子坠毁，嗯，坠毁。————-老妈发短信给我，让我洗头，老妈以为我还是孩子。—————-欢欢也决定要复习了，有人要走，就有人留—————- 今天七夕，有意思的是楠给我留言说，为什么不想她。—————-下了一场过云雨。这个世界，到处都是暧昧</p>
<h2 id="自娱自乐-诗"><a href="#自娱自乐-诗" class="headerlink" title="自娱自乐 诗"></a>自娱自乐 诗</h2><blockquote>
<p>收藏于 2009-08-27</p>
</blockquote>
<p>你 在哪里””</p>
<p>是否 有足够””</p>
<p>幸福的””</p>
<p>阳光 空气和水”” “”</p>
<p>如果 我找不到你””</p>
<p>就背上行李”” 去往南极””</p>
<p>在南极的极点”” 迈出一步””</p>
<p>无论你在哪里””</p>
<p>这一步 都注定””</p>
<p>迈向你””</p>
<p>————————–这是一首关于思念的诗，诗的开头，透露出强烈的思念，作者想知道对方的生活是否快乐，阳光是心情，空气是自由，水是陪伴。而后作者转向了寻找，用一种别样的方式，从侧面写出作者极为强烈的思念。这首诗其实可以写给很多不同的事物，从前的自己，未来的公主，或是最想念的朋友。————————– 今天阳光灿烂，于是鼻子又开始难受，我只能塞住我的鼻子，不让它接受自然，这个样子的我狼狈不堪。————-情况似乎有些糟糕，我的眼睛涩的难受，眼药水只能支持那么一会，我只能无语的对这个季节说，真无聊，说到这个季节，就想到T，貌似丫头天天在聚会————-班长很神奇，他今天晚上把一个坏的灯棍和一个好的灯棍换了一下，结果两个都亮了。————————–开头的那首诗是我写的，很明显，自娱自乐————————–思念之后，早点回家。</p>
<h2 id="明天回家"><a href="#明天回家" class="headerlink" title="明天回家"></a>明天回家</h2><blockquote>
<p>收藏于 2009-08-28</p>
</blockquote>
<p>澜本嫁衣，被窝是青春的坟墓，大地之灯，须臾，不朽，尘埃星球 我们去哪，remenber（七堇年，落落，本杰明）。写这么多书的名字，是因为朋友推荐，事实是我一本也没看过，世杰兄特别推荐“我们去哪”。—————————-天堂电影院，海上钢琴师，西西里的美丽传说，毕业生，阳光灿烂的日子，英雄本色，穿越橄榄树林，阿甘正传，坏孩子的天空，洛奇，当阳光穿过雨滴，雏菊，蓝色大门，这些是我一直想看的，也请你们看看。—————————-在看语文资料的时候，看到马云说：有一点点成功，就用自己的左手温暖自己的右手。—————————-还有一句广告词：人生就像一场旅行，不必在意目的地，在乎的是沿途的风景和看风景的心情。—————————-中午给T发短信，结果在下午乌云密布的时候才回短信，最让我郁闷的是，这里信号还不稳定—————————- 嗯，明天回家，安~</p>
<h2 id="雨夜之后"><a href="#雨夜之后" class="headerlink" title="雨夜之后"></a>雨夜之后</h2><blockquote>
<p>收藏于 2009-08-30</p>
</blockquote>
<p>雨夜之后 雨后的城市，寂寞又狼狈。郁结的空气，冰凉又清晰。———————-雨，从昨天晚自习下到中午，就让这个小城变的更寂寞，更清醒。———————-教室里一如往常的温热。玻璃上可以看到淡淡的水雾，很迷幻的样子。我用手贴在上面，是冰冷的触感，但随即也绽放一种迷幻，手掌周围渐起水雾，包围了我的纹路，这让我想起那首Joliy的心形圈。———————-今天的温度适合我，因为鼻子不会难受，眼睛不会很涩，但问题是，这是没有太阳的天气。———————-回来的路上，听着Cheer的歌，然后又切换到了王菲。换到睡着了。</p>
<h2 id="怀念磁带的时代"><a href="#怀念磁带的时代" class="headerlink" title="怀念磁带的时代"></a>怀念磁带的时代</h2><blockquote>
<p>收藏于 2009-08-30</p>
</blockquote>
<p>怀念磁带的时代<br>前两天整理了自己的屋子。<br>人闲下来就会想到一些曾经久置一直没有用的东西，从自己的床下的箱子里翻出许多中学时期买的磁带，足有一大箱子，如果把它们摞起来，有书柜那么高，可能这对那些收藏音乐唱片的人来说真的只是一小部分，但是对于一个平凡中学生来一个说，那真是“伟大”的收藏。<br>我从那些磁带里拿出一盘放进我的复读机里，磁头摩擦着磁带的声音那么熟悉，那种怀念的声音像是与一个长久不见的老朋友相聚一样，等待着空白过后的声音，但是好像很长时间没有用过了，从磁带里发出的声音，像是跳了针的老黑胶唱片一样，变了声调，很是难听，把磁带拿了出来，换上另外的一盘，终于从复读机那里听到了等待着的声音，于是很安心，享受着旧旧的声音。<br>复读机的磁头摩擦着磁带的声音，还有磁带转动的声音，复读机里播放出的磁带浑厚，低沉的声音，那些从前的记忆似乎都记录在这一张张的磁带上边。听着过去自己很怀念的音乐，很怀念的声音，就像是重新找到了曾经快乐的源泉，但却有一种说不出来的寂寞围绕到了自己身边。<br>在这个科技发达的城市里，没有了很多磁带，却有了很多MP3，MP4。我的磁带们，我其实没有把你们忘记。<br>以此纪念我的磁带。</p>
<h2 id="In-the-dream-the-youth-has-come-back"><a href="#In-the-dream-the-youth-has-come-back" class="headerlink" title="In the dream ,the youth has come back."></a>In the dream ,the youth has come back.</h2><blockquote>
<p>收藏于 2009-08-30</p>
</blockquote>
<p>In the dream ,the youth has come back.<br>我不知道对于一个人来说，有什么东西是对他影响最大的。<br>也许很多，可能是一个人，一张专辑，一本书或者一部电影，也许没有或者只是一时想不起来，但是当你在某一个不经意的瞬间，重新看到或听到那些曾经在你生命中留下深深印迹并且在那个时刻为之感动的一个影像，一段旋律，几句歌词或某个情节的时候，你一定不会无动于衷，因为他们带给你的不仅仅是回忆，也许还是一份温馨，一种感动，一段你曾经走过却无法回去的年轻岁月。<br>这些也许久远的痕迹，通过他们成为了许多人那个时代走过的人们的回忆，他们就像一只巨大的沙漏，时间越久，沉淀的就越多。他们也像一个标志，标志着一个时代的结束和另一个时代的开始。<br>我们陡然回到我们曾经喜爱的地方，我们绝不可能重睹他们，因为他们不是位于空间中的，而是处在一个时间里，因为旧地重游的人不再是那个曾经以自己热情装点那个地方的儿童或少年。”–[追忆似水年华]或许，简单来说，就是物是人非。<br>有人说，当你开始回忆的时候，证明你已经老了，还有人说沉浸于回忆中是因为不满现实，也许他们说的都有道理，但是我们所有的回忆是却都是我们生命中无法忘记的。我们，虽然无时无刻处于现实中，但我们无时无刻期盼着能够回到记忆中，回到那个等待长大的金色童年，回到那个张扬的自由岁月。<br> 梦里青春回来过。</p>
<h2 id="失明前我想记得的四十七件事-陈绮贞"><a href="#失明前我想记得的四十七件事-陈绮贞" class="headerlink" title="失明前我想记得的四十七件事 陈绮贞"></a>失明前我想记得的四十七件事 陈绮贞</h2><blockquote>
<p>收藏于 2009-08-30</p>
</blockquote>
<p>首先，这是一首歌，它属于陈绮贞，关于失明的事情。<br>还有，这是一部歌剧，是几米的漫画改编，名叫 地下铁 。<br>她有亲自演出，一个小盲女，这是那首歌</p>
<p>我想记得夏日午后的暴雨 雨的形状<br>我想记得黄昏的光 光里的灰尘在飞扬<br>我想记得爱人如何亲吻 如何拥抱<br>我想记得你 烦躁不耐的模样<br>我会想念十岁时我看到的那只象 象的死亡<br>我会想念卡夫卡 照片里他那么倔强<br>我会想念所有读过的书 认得的字<br>我会记得时间像旋转木马 消失<br>对半切开的奇异的奇异果以及<br>一颗苹果吃到最后剩下的苹果核<br>一条发光的公路两边都是梧桐树<br>地图上打过记号的城市和<br>一颗泪般清澈的湖<br>睡觉以前瞥见的那只蟑螂以及<br>早上睁开眼睛就看到的那张蜘蛛网<br>我七岁时的照片 第一次迷路穿的鞋<br>还有到底是谁随手关掉整座星空让我流下眼泪</p>
<p>蜻蜓飞行的速度<br>狂风卷起沙扬起雾<br>一张空白的画布<br>我看见过被地震摇晃的屋子<br>在一个非常美好的晴日<br>旅行纪念品掉下来了 引起惊呼<br>一颗螺丝钉如何慢慢松动 然后出现一个洞<br>我不讨厌沙滩而且<br>我看过有一个人在沙滩上大声咳嗽<br>柠檬 霓虹 果冻<br>光脚穿过一堆烂泥的时候<br>滑翔机一跃而出<br>我怀疑我也看过一对翅膀<br>一顶帽子被一个复杂的脑袋戴过的形状<br>我的手握紧的一张车票<br>上面有四个字叫做目的地让我好笑<br>我亲眼见过那四个字的样子<br>像黑色雕花栏干<br>圈住一个黄昏的露台<br>有一个男人在下面示爱</p>
<p>我必须全部记得<br>因为我害怕有一天有人会大声质问我<br>对着我看不见的眼睛<br>我会轻轻地说<br>我看不见 但是我全部记得</p>
<h2 id="后青春时代"><a href="#后青春时代" class="headerlink" title="后青春时代"></a>后青春时代</h2><blockquote>
<p>收藏于 2009-08-30</p>
</blockquote>
<p>℡今天一口气弄了好多东西在这里，好多好多。 ℡这种一气呵成的感觉是有点不舒服，不过我喜欢七堇年的那篇关于cheer的文章。 ℡昨天和T.k出去吃饭，我请客，请的是我自己的客。 ℡好长时间了，真的好长时间了，我和T K没有再在一起这么畅快的聊天了，我都不知道这是种这么感觉了，是怀念，还是不敢怀念。 ℡我在六点三十八的时候收到T的短信，当时我刚洗完澡，我没想到你会去的那么早，嗯，也许，是你有心事吧. ℡然后我到了三楼，你一身黑色的，给我一种奇怪的感觉，包括黑头发，披在肩上。在k没有到来之前，我们在聊天天，T的状态因为T自己的太受欢迎而显得很不好，我们开始聊天，聊她的为什么。 ℡k是在七点多一点的时候来的，是蓝色的衣服，然后我们开始吃饭，然后点了四个菜，很好，吃的不错，不过，我和k吃掉了水煮肉，是鸡肉，狠辣，但是k还是很顽强的吃掉，我好像看到k辣的连眼泪都出来了，是因为这是K点的菜。你拍了一张诡异的照片，三个人的手拿着筷子在夹着水煮肉，这是定格了三十秒的图片。 ℡然后我们喝啤酒，我是对酒过敏的，症状是脸红，心跳加快。好处是，我会很清晰的感觉到自己的存在，因为心跳真的很快。是T说要喝啤酒的，她的心情因为很奇怪的事情，低沉。 ℡我们聊了好多，好久，有多少，记不得了。多久没有享受过这样的气氛了，记不清了。然后我们又是最后一桌走掉。 ℡再然后我们去外面压马路，转了cg，转了xq两个来回，我们吹着微凉的风，感受着特殊的气氛，用很怀念的语气说着，然后我和T送k回家，再然后，我和T在cg，送T回家，T说T不喜欢回来这里，回来是因为一些朋友。 ℡好了，说了好多，好多，然后回家。</p>
<h2 id="突然好想你"><a href="#突然好想你" class="headerlink" title="突然好想你"></a>突然好想你</h2><blockquote>
<p>收藏于 2009-08-31</p>
</blockquote>
<p>累了，照惯例努力清醒着，也照惯例想你了，好怕一放心睡了，心跳在梦中不听话的，就停止了。听着，呼吸像浪潮拍动着，越美丽越让我忐忑，我还能再珍惜什么，如果我连我自己脉搏，都难掌握。 快乐，什么时候会结束呢，哪一刻是最后一刻，想把你紧紧抱着，可知你是我生命中的最舍不得。 ———————-最怕空气突然安静，最怕朋友突然的关心，最怕回忆突然绞痛着不平息，最怕突然听到你的消息。 突然好想你，你会在哪里，过得快乐或委屈。———————-我在想，很多年以后，会不会留下一种遗憾，叫做：曾经我们没有相爱过。</p>
<h2 id="雾"><a href="#雾" class="headerlink" title="雾"></a>雾</h2><blockquote>
<p>收藏于 2009-08-31</p>
</blockquote>
<p>早上出门，才发觉有雾环绕。昨夜的温度不高，让我感到了冷意，这似乎该算做是雾起的前兆。在雾气迷蒙之后，阳光就突然闪现。——————–我又突然想到前天晚上T说的，我的小白鲸她一直带着，这是很有意思的事情。——————–然后是青年文摘上得：当你找到真正的朋友，维系他们，珍惜他们，花时间和他们在一起，善待他们，爱他们。——————– 爱的必修课，包括如何始终如一的保持自我的光芒。这是今天的领会。今天有点累，安~</p>
<h2 id="谁会第一个看，我想知道"><a href="#谁会第一个看，我想知道" class="headerlink" title="谁会第一个看，我想知道"></a>谁会第一个看，我想知道</h2><blockquote>
<p>收藏于 2009-09-01</p>
</blockquote>
<p>Cheer&amp;张悬 知道张悬，是因为刚才的那本青年文摘，一篇叫小众歌手的春天的文章。绮贞和张悬，被放在一起，但是两人的经历却差很多，一点，张悬出自名门。我佩服的是绮贞可以贷款来做她的专辑“华丽的冒险” ，只是在热烈背后，Cheer和张悬都要面对孤独和寂寞，因为她们的音乐太淡然，淡然到仿佛雁渡寒潭，雁去潭无影。这句话很对。</p>
<p>不同时候是有不同心情的，比如说今天早上又出现的雾，的确给了我一个惊喜，没想到会这么执着的出现。再比如说同志们的个性签名都改成了关于新生活的事情。究竟是时间改变我们，还是我们留不住时间。</p>
<p>楠已经到QX了，祝我们明年都一样的，梦想可以不再叫梦想。</p>
<p>驻足，回望，影子，背面，太阳，方向。</p>
<h2 id="关于奋斗"><a href="#关于奋斗" class="headerlink" title="关于奋斗"></a>关于奋斗</h2><blockquote>
<p>收藏于 2009-09-02</p>
</blockquote>
<p>陈健老师说，奋斗里只有一个华子在瞎奋斗。对此，我深信不疑。奋斗里，究竟谁在奋斗，是在片尾的时候，才开始奋斗的吧。</p>
<p>“我是一个悲剧演员”，诚然，我写不出这么有深度的话，这是星爷说的。我们都是演员，在一个个场景的更迭中，迷失，寻找，然后再回归，这似乎就如宿命般无聊。-</p>
<p>现在忽然想看家乡的星星，这里大部分时间是看不见星星的，即使有，也是浑浊的不会眨眼，我有过这样的日子：在贫瘠的土地上，闻着浓重的土腥气味，以一种四仰八叉的姿态，同星星们一起眨眼。</p>
<p>唔这是一个奇怪的想法。</p>
<h2 id="既不回头-何必不忘"><a href="#既不回头-何必不忘" class="headerlink" title="既不回头 何必不忘"></a>既不回头 何必不忘</h2><blockquote>
<p>收藏于 2009-09-03</p>
</blockquote>
<p>既不回头，何必不忘。若是无缘，何须誓言。今日种种，似水无痕。明日何夕，卿已陌路。</p>
<p>98仙剑，值得怀念。下面的是我多年之前写的。</p>
<p>缘是缘非，雨雾茫茫。错既无妨，对又何尝。来缘天堂，无缘陌殇。往事如风，似水萦萦。</p>
<p>老妈发短信说明天要去内蒙古，艳羡啊，问我回来要带什么，我无语的只能说：饿…带点草回来……其实我和干姐家今年夏天就打算去海南的，唉……-</p>
<p>传说，今天晚上要下雨，安~</p>
<h2 id="醉清风"><a href="#醉清风" class="headerlink" title="醉清风"></a>醉清风</h2><blockquote>
<p>收藏于 2009-09-05</p>
</blockquote>
<p>嗯，早晨，外面在飘着雨，昨夜的清风，又把雨带来。</p>
<p>昨天晚上耗子发短信，损了我一顿。怎么说，耗子算是我高中很谈的来的朋友，十二号，他走。小牛今天走。</p>
<p>昨天晚上QQ，T在，于是发过去信息，问T什么时候走，我原以为她今天要走的，来个类似的不辞而别。原来没有走掉，九号，T就要离开这里，去厦门。然后，和T有一通电话。</p>
<p>现在又下雨了，终于不再是沉闷，这样的雨，终于有了舒服的感觉。雨落窗台，没有声音的，就像是一种叫做思念的东西。</p>
<p>红豆生南国，春来发几枝。愿君多采撷，此物最相思。似乎是王维的句子，记不清了。可是，让我真正使我映像深刻的，是在改动之后的“愿君莫采撷，此物最相思”，这个“莫”，似乎更有味道。</p>
<p>我在很久之前亲自中下过红豆，看着它们生根发芽，但终究，这里不是南国，只是一个不南不北的小城，留下的只是两片青绿的子叶。不过，我想这样的事情，你一定没有做过。</p>
<p>唔，雨下的大了。</p>
<h2 id="T-安静"><a href="#T-安静" class="headerlink" title="T 安静"></a>T 安静</h2><blockquote>
<p>收藏于 2009-09-05</p>
</blockquote>
<p>昨晚，和T通话，我以为只说了一会，事实是时间记录：21分04秒。和T说话，总是有种很安静的感觉，唔，是不是我老了。和T说到了蚊子，说到了天气，说了如何如何如何……总之，很安静。 看来，我是真的老了。T说，好好学习！</p>
<h2 id="天气预报"><a href="#天气预报" class="headerlink" title="天气预报"></a>天气预报</h2><blockquote>
<p>收藏于 2009-09-05</p>
</blockquote>
<p>您好：长治地区今天夜间小雨，微风，最低气温16度；明天白天小到中雨，微风，最高气温19度。山西省气象台提供！</p>
<p>—好天气。</p>
<p>谁说的，小时缺钙，长大缺爱。学历史的一定不知道，我骨折过三回，同一条胳膊。</p>
<p>今晚有雨，注意保暖。安~</p>
<h2 id="是什么在脑海挥之不去"><a href="#是什么在脑海挥之不去" class="headerlink" title="是什么在脑海挥之不去"></a>是什么在脑海挥之不去</h2><blockquote>
<p>收藏于 2009-09-06</p>
</blockquote>
<p>是什么在脑海挥之不去，是什么在黑夜扑朔迷离。</p>
<p>气温骤降，是不是秋天到了。今天的风很冷。外面都是湿的泥土，软软的感觉到是不错，可是后果很严重。</p>
<p>老师居然要我们作文都要上48分，郁闷了，我只打了45，结果是重写……不过是三十分钟搞完的，也凑合，可怜的我还得重写一遍。</p>
<p>下自习了，现在外面飘着雨，对，是飘。就是站在喷泉旁边的感觉，很舒服。“吹着微微的风，想微微的你”</p>
<p>MAMA说那里很冷，刚看了成吉思汗陵。</p>
<p>天冷了，到月球吧，“123，向前走，456，抬起头，789，我们一起私奔到月球”</p>
<p>大家，注意保暖。安~</p>
<h2 id="作文和一些事情"><a href="#作文和一些事情" class="headerlink" title="作文和一些事情"></a>作文和一些事情</h2><blockquote>
<p>收藏于 2009-09-07</p>
</blockquote>
<p>不需要流泪，只要抬起头，抬起头看满天的流光飞舞，那些稚气的眼眸，那些白衣飘飘的岁月，三月的碧桃六月的银杏十月的丁香，那些奔跑的足迹，那些汗水，那些童年的约定，那些风里的歌，歌里的梦，都在此刻交错纷呈。甜甜的迷惘，酸酸的释放，像一部无人放映的电影，拉长，拉远，最后消失不见。 唔，那些曾经温暖了我心灵的日子，无处告别。 是的，我们无处告别，也不需要告别。只要朝前看，紧握手中的分分秒秒，童年的列车渐行渐远，而属于我们的光明前程才刚刚开始。 现在，我想好好的睡去，在梦里流完眼泪。等到醒来的时候，我又可以看见前方的阳光远远的照射进来，身旁是一树树的沉香花开…… 然后，淡定的微笑，嘴角弯成美好的月牙，伸出双臂，踮起脚尖，拥抱未来</p>
<p>o∩_∩o同志写的很好</p>
<p>天气预报说北方降温十度，然后外面现在又在飘着雨。</p>
<p>一瞬间，从黑夜到白天，是很不舒服的感觉…放假从上个礼拜推到教师节，就在今天上午放学时居然又说推迟到国庆节…唔，谢谢MGD开眼，欧巴桑终于输掉——-明天放假。</p>
<p>-晚自习的时候，有个某家的孩子在外面毫无顾忌的唱着自己编的歌曲，很大声，于是整个教室的人都停下来听……</p>
<h2 id="无题的阳光"><a href="#无题的阳光" class="headerlink" title="无题的阳光"></a>无题的阳光</h2><blockquote>
<p>收藏于 2009-09-09</p>
</blockquote>
<p>​    ℡昨天上午十一点回到家了，外面还是在飘着雨，也许这样的天气适合在外面到处走走，适合一种事情的发生。</p>
<p>​    ℡其实该感谢这个放假不正常的学校，因为在距离教师节还有两天的时候，放了假。MGD看来还是存在的。</p>
<p>​    ℡中午在姥姥家吃了饭，拉面，一种北方的面食，不知道是不是山西的最正宗。不过，最近总是吃的不多，也就在这个问题上没有纠缠。</p>
<p>​     ℡然后，下午down了好多东西，有宫崎骏大师的龙猫和千与千寻，更多的是天堂映画的短片.———-    ℡给T发短信，结果吵醒了她。T说去拿照片，于是无聊的我和T出现在湿漉漉的大街上，做着很奇怪事情。和T先在照相店门口见面，然后就是在市场的角落里寻找着很奇怪的东西，那个东西叫做~~鞋带。起因是T的爸爸用T的鞋带绑了什么东西。没有经验的我和T在路上乱撞，T先进了一家礼品店，我正纳闷的时候，T就开始问服务员有没有鞋带，在得到没有的回答之后，T又跑到第二家。准确说来，这是一个很深的问题，但是归根结底，鞋带又不是什么礼物，你见过有谁送鞋带的吗？</p>
<p>​    ℡最后我和T在路上的一个不知属于什么范畴的地方见到了这个奇怪的东西。———————— ℡然后和T去FRD，T说中午家里面是榴莲味道扑鼻，让我想起我的那个关于榴莲的记忆。在FRD瞎溜了一会，出来了，去做另一件奇怪的事情，去给T的爸爸买背心，在看过莫代尔是什么材料之后，终于知道什么叫做贵的不实在。</p>
<p>​    ℡然后T说去WZ，结果在走到JW的时候去MKJ喝了两杯热的橙汁，外面有点冷。随便说说，T就说到了她的行程，早上七点坐车到市，然后是去郑州的大巴，然后是郑州飞机场，等到七点之后，坐飞机离开，晚上十一点到达目的地，厦门。然后，开始她的大学旅行。我在一旁静静听。———————— ℡T还说到很多事情。   </p>
<p>​    ℡我们最后去的“韩国蓬蓬”，这是个很奇怪特奇怪的词。我回转身，你说保重，然后我回头，看见你，结果我只听到我小声的说：你也一样，然后，就这样离开。</p>
<p>​    ℡晚上回家，打开media player，第一首是王菲的但愿人长久，第二首是老师的送别。很奇怪的组合。</p>
<p>​    ℡T的签名改成了：启程~~</p>
<p>​    ℡我的笔记本的白色键盘感觉真的很好，很舒服。虽然联想的Y450散热一直被人诟病，然，右手掌托的温度在这个有点冷的季节刚刚能温暖我的脉搏。</p>
<p>​    ℡李梭梭的短信说，朋友不会分离。当时的她正在当画画模特。</p>
<p>​    ℡现在的外面终于，终于是阳光明媚，明媚的力量，很舒服。</p>
<p>​    ℡今天上午，在家看宫崎骏的千与千寻和龙猫，和天堂印画的短片。</p>
<p>​                                                          9&#x2F;9&#x2F;2009 10:56 AM (ˉ(∞)ˉ)</p>
<h2 id="就算全世界与我为敌"><a href="#就算全世界与我为敌" class="headerlink" title="就算全世界与我为敌"></a>就算全世界与我为敌</h2><blockquote>
<p>收藏于 2009-09-10</p>
</blockquote>
<p>最近一直在听Cheer的“就算全世界与我为敌~~~我要的不只是爱你而已，我要让所有虚伪的人都看清自己。”，很好的曲子，尤其是那句“就算全世界与我为敌”。在之后是苏打绿的“小情歌”和Cheer的“送别”，确实是很奇怪的组合。</p>
<p>龙猫是充满爱和希望的动画，就是一种很温馨的感受，当天真和快乐浮现，就是一种很满足的感动，最让我记得的画面是多多洛让种子发芽，让整个世界充满了希望的那个镜头。</p>
<p>鼓浪屿，今天在看《人与自然》的时候看到的，因为T到了厦门，就特别关注了一下，才发现原来鼓浪屿是在春寒料峭里的另一个城市。说鼓浪屿是一个特容易迷路的岛，这和大连一样，道路都不是南北分布，就是蜘蛛网一样。舒婷久居岛上，于是她也经常找不到回家的路，中华路13号，这座舒婷在&lt;真水无香&gt;中描述过她红棉树下的红房子，华丽的旧色调。</p>
<p>而在漳州路上是另一位作家，林语堂和廖家别墅的故事。廖家二小姐和牧师的儿子结婚，这是一场勉强的婚姻，却在多年之后的相濡以沫中达到了幸福。林先生将自己的最爱埋葬，当初他和陈锦端深深相爱，却在无奈之下散去。“他虽然一生都在牵挂那个最初的名字，却从未辜负身边这个许下承诺的人。”┈┈┈┈┈┈</p>
<p>有人说这个在音乐，文学方面名家辈出的文化岛已经枯萎，所以有很多人已经离去，然而没有人能挽回这种现实，就如同无法阻止老房子的衰颓和坍塌一样。</p>
<p>世界一直在前进。这里都是欧美的建筑，这是一段历史的见证。 昨天中午T发来短信：哈哈。当时我就郁闷，发错短信可是不好的。然后的状况是T的手机欠费，丫头就是个白。当时正在去郑州的大巴上，丫是闲的慌，就是开始讨论飞信的问题。我当时正在看“千与千寻”。</p>
<p>然后在飞信提示T是离线状态后，给T交了话费，居然欠到一块多，为什么是居然？现在移动这么精，还能让你欠到这么多，T太强了。</p>
<p>然后T发短信说，问到打的的情况，我去百度知道里查到要100+，后来我才想到应该去百度黄页里找的。在后来就是T抱怨说是新郑机场人是如何多，环境是如何差，厕所是如何香~~~飞之前，T发短信过来~~~~~~~</p>
<p>九点半的时候，T已经到了厦门，发短信说：俯瞰厦门夜景，激动的想哭。我说，不用激动，又不是你在飞。让我纳闷的是，T已经关机，飞信却显示T在线，难道这是飞信延迟的效果，可是移动发缴费信息的时候是如此快。</p>
<p>之后是找旅馆，然后又忘了该去黄页找，结果找了一堆广告。其实得出一个信息，去那里先预定，不用预定金的那种，网上预订。最后得出结论，大城市就是大城市，每个旅馆都有网线</p>
<p>然后和T视屏，无语的是，T那边是笔记本，我这里是手机，图像是一卡一卡的，我的笔记本没网上。 然后就是T说的，要拍好多照片给我看，我很是个期待的说哈。</p>
<p>下午回学校了，国庆才能看上照片。</p>
<h2 id="记录Ing"><a href="#记录Ing" class="headerlink" title="记录Ing"></a>记录Ing</h2><blockquote>
<p>收藏于 2009-09-10</p>
</blockquote>
<p>刚才T发了彩信，录了鼓浪屿的海浪，听到了很有规律的脉搏声，T说那里是阴天，正在涨潮，还有一排排的别墅…在五点之前T回不去，意味着…我五点要走</p>
<h2 id="此生的寂静与漫长"><a href="#此生的寂静与漫长" class="headerlink" title="此生的寂静与漫长"></a>此生的寂静与漫长</h2><blockquote>
<p>收藏于 2009-09-11</p>
</blockquote>
<p>早上还飘着雨的这里，在午觉醒来之后已经是阳光灿烂了</p>
<p>今年的雨下的好少，我记不清是不是有一场真正畅快的雨来过。</p>
<p>眼睛又变得很涩，天知道怎么了。</p>
<p>在读者上看到郭敬明的文章，叫做：此生的寂静与漫长，很不错，我摘在了我的本上，还写了点算是观后感的东西。</p>
<p>眼睛疼了，睡了…</p>
<h2 id="鱼和水-白-天和海"><a href="#鱼和水-白-天和海" class="headerlink" title="鱼和水 白 天和海"></a>鱼和水 白 天和海</h2><blockquote>
<p>收藏于 2009-09-13</p>
</blockquote>
<p>这已经是一个很旧很旧的故事了，相信很多人都看过，我记得有一句这样说的：鱼流泪了，说水看不到她的眼泪，水说，我知道，因为你一直在我心里。想起这个故事，是因为一个很有意思的事情，T的短信，说是好友周，我寒死了，因为好友周的定义是：十二月的第一周。</p>
<p>其实事情挺复杂的，还真说不清，简单说T说了天和海的故事，我想到了鱼和水的故事（这什么和什么啊）……</p>
<h2 id="我奇怪的习惯"><a href="#我奇怪的习惯" class="headerlink" title="我奇怪的习惯"></a>我奇怪的习惯</h2><blockquote>
<p>收藏于 2009-09-15</p>
</blockquote>
<p>我奇怪的习惯</p>
<p>我的习惯是：收到短信，看了之后立即删掉。这个习惯有很长时间了，说不清为什么</p>
<p>但手机里一直保留着的没有删的一条短信是T的，内容如下：如果真的想复习就要下定决心好好干。 ——–</p>
<p>现在每天都会收到一条短信，天气预报，总是会在18：45pm，19：50pm这个开区间里到达。只是天气预报里没有说什么时候会有星星出来…</p>
<p>男生是猪，女生是书，猪不会读书…是某位哲人说的</p>
<p>晚自习的时候又有某家的小孩在大声瞎唱，又有一个同志在九点类似半的时候在外面温柔的吼叫下课了…</p>
<h2 id="一个人久了，之后"><a href="#一个人久了，之后" class="headerlink" title="一个人久了，之后"></a>一个人久了，之后</h2><blockquote>
<p>收藏于 2009-09-17</p>
</blockquote>
<p>一个人久了…</p>
<p>之后 一个人久了因为怕伤害，懒惰去恋爱，懒惰在去了解陌生人。一个人久了，越来越喜欢听歌。一个人久了，朋友会越来越重要。怪癖也接踵而来，对爱情开始挑剔，看到别人俗气的打情骂俏，有厌恶的感觉（我肯定这不是嫉妒），看到样子不错的女子，生理吸引，内心抗拒。一个人久了，会变得成熟，对节日没多大期待，也许偶尔和桃花来点暧昧。一个人久了，会改变自己的性格，也一定会有周期的吃泡面，会喜欢收集东西，会觉得自由自在，但会爱花钱，会转发许多无聊的短信，爱情会变得不那么重要。</p>
<p>一个人久了，虽然久了，虽然有点寂寞无聊，却很舒服。</p>
<p>昨晚发了一堆日文给T，内容我不知道什么意思，说是片假名，貌似是偏旁的意思。</p>
<p>然后T发来彩信，给移动捐了点钱，说了花花草草，说了冷冷热热。我发现很有意思的事，T的手机是NOKIA的5310（貌似） 发彩信的时候，标准的88K，时间只有一分钟，我的3230却能发三分钟的，正好100K。据分析，88K一分钟保证了质量</p>
<p>然后就是飞信短信，再然后就是我发过去的彩信，录音的时候磨了好久，外面人都多</p>
<p>T同宿舍的还有叫~~婷的，我的第一反映是，叫婷的真多</p>
<p>T在军训，因为流感居然提前，时间也缩短，无语。</p>
<p>……T，好好撑下去，别像你们一学姐，晕倒了磕掉两颗牙…</p>
<h2 id="此刻的喧嚣和宁静"><a href="#此刻的喧嚣和宁静" class="headerlink" title="此刻的喧嚣和宁静"></a>此刻的喧嚣和宁静</h2><blockquote>
<p>收藏于 2009-09-19</p>
</blockquote>
<p>​                               此刻的喧嚣和宁静</p>
<p>​                                  —–1——</p>
<p>​       夜，雨来了。很诗意的飘着，送来一种叫做思念的东西。</p>
<p>​       雨的心情太过轻缓，像是宁静的流沙般，无声无息，却一直持续。走在路上，发梢的雨雾凝成水珠，滴落，留下了雨的影子，在昏黄的灯光下，伴着轻缓的余音，也变得温热，在落下的那一刻，留下暖黄色的喧嚣和寂静。</p>
<p>​      雨不像这里的雨，是南方缠绵的了。一种种红豆时的心情，开始在微凉的风中蔓延开来，是否，思念也缠绵了。 在寂静的昏黄中，思念悄悄滋长。</p>
<p>​                                  ——-2——–</p>
<p>​      T的笔记本中夹着的树叶书签，被我不经意的触碰，奇怪的样子，作为一种记号，标记着曾经的喧嚣。</p>
<p>​      树叶的书签不是我的收藏。</p>
<p>​      在书本倾倒的年代里，泛黄的书页夹杂着浓郁的绿色，用宁静代替喧嚣，那闪亮的日子。像是自由的种子，在慢慢的凝结，凝结成果实。树叶的书签，承载着那些寂静的岁月，也隐埋了你的轮廓。</p>
<p>​                                 ——-3——–</p>
<p>​     我突然想到，原来海和天，本为一体，也终为一体。</p>
<p>​     当雨雾慢慢将镜片模糊，我开始想要看到海，那种冷色调的喧嚣。</p>
<p>​     我曾经站在黄渤海的分界线上，向下俯视，看着两种不同颜色的海水各自流淌，没有喧嚣，只有宁静的。</p>
<p>​     我还想要欣赏不同的海景，我还想要隔着海望着对岸，我想要静静的开始华丽的冒险。</p>
<p>​     想要一个人旅行的念头，开始在脑海里变得顽固。</p>
<p>​    “当然，我当然会陪你去”我似乎看到你皱着眉头说，你的声音，像暖黄色的灯光，开始更加温热。</p>
<p>​     于是，此刻的世界变得宁静。</p>
<p>​       后记：昨晚，身在珠海的TZ打来电话，我们共同问好，TZ在挂电话的时候说凌晨两点再给我打电话。我只是没有在意，结果是五点的时候被雨敲醒，手机上多了四个未接来电。TZ，这个信守承诺的大男孩，应该对你说声对不起的。 TZ打完电话之后，雨开始毫无顾忌的下，整整一夜，是在间断的雨声中反反复复，睁眼闭眼，然后雨继续下。在淡淡青烟的时刻里，又是一种宁静。然后，雨一直下，停停走走的，像是没有歌谱的演奏。一直下，直到现在。</p>
<p>​                                                                二〇〇九年九月十九日</p>
<h2 id="长途……"><a href="#长途……" class="headerlink" title="长途……"></a>长途……</h2><blockquote>
<p>收藏于 2009-09-22</p>
</blockquote>
<p>长途，让我敬畏。</p>
<p>当我打了四十分钟长途后，在我消失了四十米RMB之后，我终于明白移动为什么那么有钱了。尽管前期建设基站花钱厉害，可是后期客户回报才叫怕怕（我的RMB…）。</p>
<p>最后去加了一个套餐，本以为这就行了吧，一分钟0.18米我太能接受了，可是居然还要扣通话费，折合下来一分钟在0.48~0.28米之间……我无语，不过还是比之前的一分钟一块RMB便宜……</p>
<p>最后我决定以后还是用飞信打，8：00am~18：00pm之间……是0.25米每分钟，其余时间0.15米（不论长途或本地），这样打长途比较划算，还能N个人一起打。</p>
<p>您好：长治地区今天夜间晴，3到4级西北风，最低气温6度；明天白天晴，3到4级西北风，最高气温22度。山西省气象台提供！温差达到16度</p>
<p>和T在初中的时候，学校有这么一个活动，想办法让从高空落下的鸡蛋不破碎。然后T想的办法……把鸡蛋放进装满水的气球中，后果是T一人完成了这个艰巨的任务，最后的结果是…鸡蛋破了，破的很惨。</p>
<p>我记得最清楚的是，气球是白色的。</p>
<p>最近打电话，总是把T的号码和我的号码混淆，我无语的很</p>
<h2 id="关于距离，两个他们"><a href="#关于距离，两个他们" class="headerlink" title="关于距离，两个他们"></a>关于距离，两个他们</h2><blockquote>
<p>收藏于 2009-10-02</p>
</blockquote>
<p>今天是TZ去长春的第二天了，我其实早就想想写些东西，关于一段距离的事情。</p>
<p>珠海，长春，是一种怎么样的距离，是一种什么样的不同空气。</p>
<p>我讲讲TZ的事吧，他的GF，大学在长春，可是TZ，在了广州，之前两人关系很好的说。</p>
<p>高中，TZ会在七分之五的礼拜里，去C的学校接她，这是一种怎么样的事情。</p>
<p>大学了，是不是两人习惯了距离，就这样继续分离，跑到了天涯海角。两人去一所学校的机会是那么大，可是最终，不知是谁的选择，然后就是这样的结果。</p>
<p>TZ打电话说，受不了她打电话时不哭的声音，是因为她会在打完电话之后，一直哭。</p>
<p>所以，TZ就从广州买了机票，在九月的最后一天下午两点半乘坐飞机，去了长春。</p>
<p>我不想多说什么，只是，何必。</p>
<p>​       你看见了什么，让我不知不觉，也想看得见。<br>​        你说的是一种什么样的事情，让我无语沉默。<br>​       还有，不希望你是琥珀，永远这样，不会腐朽。</p>
<h2 id="白色的温度"><a href="#白色的温度" class="headerlink" title="白色的温度"></a>白色的温度</h2><p>我越来越喜欢，白色键盘，以及这个季节让键盘散发的温度。</p>
<p>白色键盘，其实我没有刻意的挑选，我看中的性能，只有白色系列的选项。总不能带个IBM小黑回家吧，我还没那么老。</p>
<p>我把vista的特效全开，让淡入淡出的效果发挥。我把杜比音效释放，在任何一个可以发声的场景。</p>
<p>这样的效果，才适合白色的键盘。</p>
<p>然后，经常是盯着键盘，想事情。</p>
<p>这样安静的夜里，只有风扇和电流流过的声音。</p>
<p>现在的这里，温度是有点凉，我就把手掌放在掌托的那个位置，谈后打开Davil may cry4，把特效全开，两分钟，核心温度就上到七十。掌托这里，就会温暖。</p>
<p>我喜欢看电影，重复的看，看到背下大部分台词，看到让我满意为止。<br>我开了电脑，关掉灯，让自检界面忽明忽暗的光照在白色键盘，让呼吸效果的灯吸引屏幕。</p>
<p>我说，看一部让我惊喜的电影吧，不要太多的深度，让我笑笑，让我傻笑。</p>
<p>于是就下了博物馆奇妙夜2.</p>
<p>然后，让我很惊喜。这部影片似乎是没有主题可宣扬的事情，只是让人娱乐一下的。事实上，这部影片，还是很多地方让我感到温馨。</p>
<p>蓝色大门，犹豫了好久，还是下了。主题曲是Cheer的歌，很好听的那首小步舞曲。我看到了直白的青春，我看到了洁白的色调。确实，整个过程，没有黑暗，洁白占据整个场景。桂纶镁和陈柏霖，都很不错。</p>
<p>我喜欢白色的感觉。</p>
<p>我开始听王若琳，那种让我昏睡的声音，是很好的催眠曲。</p>
<h2 id="あ"><a href="#あ" class="headerlink" title="あ"></a>あ</h2><blockquote>
<p>收藏于 2009-10-03</p>
</blockquote>
<p>你问，这一辈子，到底要什么。</p>
<p>我只能沉默，不然，我又能说些什么。</p>
<p>我在想，当这个问题来的时候，它是以怎么样的情形出现在你的脑海，又是怎样的情景让你陷入沉思，是不是让你不知所措，让你想的太多。</p>
<p>我问，你这辈子最想要的是什么。</p>
<p>你说，定居国外。我还是不知道说什么好。 只能，只能，只能问一句，你三十岁以前可以吗，其实我不知道说什么</p>
<p>当我还在我的世界的时候，你已经开始思考这样的问题。</p>
<p>我说我们才多大，你说二十了。我的心就开始抖了一下。</p>
<p>时间，真快。</p>
<p>然后，换个话题吧。</p>
<p>事实上，我们都开始沉默。话题，也就无从开始。 那么，晚安。 让这个有点沉重的话题，静一静。</p>
<p>那么，晚安。</p>
<h2 id="秋"><a href="#秋" class="headerlink" title="秋"></a>秋</h2><blockquote>
<p>收藏于 2009-10-03</p>
</blockquote>
<p>我想，秋天来了。</p>
<p>在大街上的时候，风很大，然后，卷起了树叶。</p>
<p>究竟是什么时候，你就来了。</p>
<p>我抬头，看见有些泛黄的树叶。</p>
<p>泛黄，只是泛黄，我看到的。 一切，都在不经意间开始变化，只是有的大，有的我们毫无感觉。</p>
<p>我只是想说说这样的事情，没有忧郁没有其他。</p>
<p>我，只不过是想说说。 只不过是想说说。</p>
<h2 id="中秋快乐"><a href="#中秋快乐" class="headerlink" title="中秋快乐"></a>中秋快乐</h2><blockquote>
<p>收藏于 2009-10-03</p>
</blockquote>
<p>中秋快乐 其实我在想，这句话应该怎么说。</p>
<p>中秋快乐 如果你在别的地方，就是那种独自在外的感觉，那，说这句话，是什么意思，会不会让你想家，是不是会让你难过。</p>
<p>不同的是方向，一样的是月亮。</p>
<p>最近发贺卡，总是能看到一句话，千里寄相思。</p>
<p>那么就是这个意思，中秋快乐。</p>
<h2 id="月光"><a href="#月光" class="headerlink" title="月光"></a>月光</h2><blockquote>
<p>收藏于 2009-10-03</p>
</blockquote>
<p>秋来往，你冷了月光。太漫长，月冷了相思。 雾起伏，模糊了月光，浸透了相思。</p>
<h2 id="廓尔亡言-廓尔忘言"><a href="#廓尔亡言-廓尔忘言" class="headerlink" title="廓尔亡言,廓尔忘言"></a>廓尔亡言,廓尔忘言</h2><blockquote>
<p>收藏于 2009-10-06</p>
</blockquote>
<p>应该是廓尔忘言吧，可是亡更合适。</p>
<p>问余何适，廓尔忘言。花枝春满，天心月圆。看着上面的文字，我真的不知道要说什么。只是我很知道，那安详的宁静，不会是T的去处。-</p>
<p>我们走过一段不需要方向的流年，一切按部就班，当转过的时间流下一个句点，我们稍做休息，又要上路，所以，你要好好思考这件事。</p>
<p>更明确的是，那些大段流年没有颜色，俳徊不前，方向不明。</p>
<p>然后，廓尔无言。</p>
<h2 id="左耳发烫"><a href="#左耳发烫" class="headerlink" title="左耳发烫"></a>左耳发烫</h2><blockquote>
<p>收藏于 2009-10-07</p>
</blockquote>
<p>左耳发烫 今天阴天，有风，很冷。</p>
<p>然后又是飘雨。</p>
<p>然后左耳发烫，我随便问了一下，结果是一个很精妙的回答：左耳发烫是你爱的人在想你，右耳是爱你的人在想你。人的想法总是这么有意思。</p>
<p>我竟然忘了小耳朵是在厦门的，是无意中看到她介绍博饼时才想起，说实话，看了之后还是不清楚什么叫博饼。</p>
<p>有一件很巧的事，关于T的邮件，内容是我下午刚刚看过的，巨巧无比(貌似没这个词’ )-</p>
<p>今天真的很冷。<br>后记，这是三个月之后的感想。 我回头看这篇文章的时候，有一种后知后觉的感觉。 T的邮件，那封关于友谊的，被无数人发来发去的邮件，直到现在，我才真正知道它的内涵。我终于知道你为什么要发了。 T的第一封邮件我没有回，你又发了一遍，我也没有回。 我其实不想说什么，只是那种感觉让我觉得没有那个必要去做这样无聊事情。 呵，我厌恶自己敏锐的感觉，和了解很多事情的脑袋。 T和K，我们都在老去，不管你们离我有多远，我知道。在我可以呼唤你们的时刻，你们义无反顾的和我站在一起。 我记得让青春继续里的话，在青春的泥土里，只有记忆是潮湿的。我们不是植物，不能在这块土地上生根发芽，生生不息。 有人问我，是否开始回忆，就意味着年迈的将近。其实，青春，它一直都在继续。 时间。</p>
<h2 id="下雨了，安"><a href="#下雨了，安" class="headerlink" title="下雨了，安"></a>下雨了，安</h2><blockquote>
<p>收藏于 2009-10-11</p>
</blockquote>
<p>下雨了。</p>
<p>这里变的好冷，在家里只能呆在被子里，裹住自己。给杯子里灌满热水，盖上盖子。我的水杯算是半个保温杯，因为杯盖在热水的浸泡中会发烫，根据能量守恒定律……然后会很舒服的用手贴住杯盖，然后被温热。</p>
<p>昨晚去买晚饭，实际上是买烧饼和鸡蛋，走到房子里面，老板忙的不亦乐乎，重要的是老板进化了，弄了台大录音机，用来放杰伦的歌，当时我觉得，这个世界真有趣。</p>
<p>下雨了，下雨中。早晨是有雾的，可是淡的很，其实我不确定是不是刚洗完脸后水蒸气作用在眼镜片上的结果。</p>
<p>这里的人家开始用柴生火，于是就造成了在雨滴下那种炊烟袅袅的景象。在青色的天空下，在湿润的雨后，每一钟声音都被放大，思念也愈加膨胀，思念，可是，我在思念谁呢？</p>
<p>佛说人有八苦：生，老，病，死，爱别离，恨长久，求不得，放不下。</p>
<p>庄子说，相濡以沫，可是后一句是，不如相忘于江湖。</p>
<p>连续四天了，耳朵一直在下午的时候发烫，昨天是两个一起，今天是两个交替，估计是遵循排列组合的规律。哈， 好几天都没有人对我说安了，那么，安~</p>
<p>听着雨，安睡。。</p>
<h2 id="温度和星星"><a href="#温度和星星" class="headerlink" title="温度和星星"></a>温度和星星</h2><blockquote>
<p>收藏于 2009-10-13</p>
</blockquote>
<p>您好：长治地区今天夜间晴，微风，最低气温0度；明天白天晴，微风，最高气温18度。山西省气象台提供！</p>
<p>最低零度，为什么要差十八度。</p>
<p>晚上有很多星星被我看见，但总是有那么一个，是特别的亮，我把它想成你们。</p>
<h2 id="How-are-you"><a href="#How-are-you" class="headerlink" title="How are you."></a>How are you.</h2><blockquote>
<p>收藏于 2009-10-17</p>
</blockquote>
<p>T,How are you.</p>
<p>我给你发过去这条短信，因为我总是感到有什么事情在发生。</p>
<p>awful…五个字母，就让我不知所措，却隐隐知道你将要说什么。</p>
<p>我问你，怎么了。</p>
<p>你说，姥爷去世了。</p>
<p>我的呼吸有那么一瞬间，停滞。</p>
<p>我记得，在你走之前的下午，那个刚下过雨的这里，我们在MKJ喝热橙汁的时候，翻看你手机中的图像，里面有你姥爷的照片，你说上午去看你姥爷，然后你在下一个我没有准备的时刻，说，可能是最后一次见你姥爷了。我没有看到你的表情，就只是说你这闺女……然而真的被你言中。</p>
<p>之后我给你回短信，我说，其实我一直相信，生命是一个轮回。可恶的移动将这条短信延迟了十六分钟。</p>
<p>然后你说，你不信。</p>
<p>T，你真是一个现实的家伙。你弄的我也不信了。</p>
<p>我说，不信也好，也许，我也不信……之后，你就沉默。</p>
<p>这些生老病死，像是无法改变的春夏秋冬，在漫长的日子里，同我们寂静的对峙。我们，只能是同它们一样寂静。</p>
<p>第一次觉得死亡如此近，是在学校。几个月之前，班上的高考倒记时牌子被翻到不足一百天的时候，可能连面也没见过的同在高三的同学，在晚自习后回宿舍，出了车祸，当场死亡……</p>
<p>我尤为痛恨的是，肇事的车，是驾校的教练车！</p>
<p>我是在第二天的时候，那个阳光居然甚好的日子听到的。教室里很沉闷。</p>
<p>下了早自习，逃出教室，忘了是谁在五楼给我指着四楼的班级，说，那就是他们班。两个班的距离很近，站在蓝色的栏杆旁，以一种甚为高傲的姿态俯视那种悲伤。</p>
<p>斜向下45度角，我看到昏暗的教室里，一种叫悲伤的东西剧烈蔓延。</p>
<p>同学说，我前五秒钟还在和他说话，之后他就再也不见了。同学哭，质问我生命为什么这么脆弱。同学说，就你最坚强，你是不是太冷血。</p>
<p>原来那时的我早就有了喜哀不现于色的本领。他的生命太过像一个玩笑，刚准备开始就要结束，可惜的是，那天不是愚人节。</p>
<p>之后的措施是，一中门口多了两条减速带，交警队说学生违反交通规则，谁都知道，当场死亡，速度会多快。大人们的世界，比较恶心。</p>
<p>第一次接触死亡是小的时候买回来的小鸡，一只一只在暖气旁死亡。</p>
<p>爷爷那年冬天来我们这里过春节，爷爷是医生，我问它们为什么会死亡，爷爷说，天气冷了，时候到了。</p>
<p>干姐在高三的时候，我和干妹妹在高二的时候，经历了干爷爷，干奶奶，干姥爷的逝去，一切都太突然，太剧烈，甚至，叫做麻木。在一瞬间，干娘的头发就白了好多。佛说的果然不错，人有八苦：生，老，病，死，爱别离，怨恨长，求不得，放不下。</p>
<p>这些生老病死，像是无法改变的春夏秋冬，在漫长的日子里，同我们寂静的对峙。我们，只能是同它们一样寂静。</p>
<p>还好，我的亲人们都在，这是多么好的事情！</p>
<p>-尽管我不知道那真正和我有血缘关系的姥姥，姥爷是否还健在，更确切的说是妈妈的亲生父母是否健在。</p>
<p>若不介意，我说说我的姥姥，我现在的姥姥。姥姥很好。</p>
<p>从我记事起 ，就和姥姥住在平房里。可是房子样子模糊了。后来和姥姥在游泳池的院子里住，那时候，满世界都是水。泳池里放了新水，总是第一个跳下去享受，最后还是忘了有几个夏天，是在水里泡过去的。那时候总是在半夜起来，喝姥姥熬的米汤，姥姥抱着我，我们听着机器的喧嚣，看月亮，看星星……</p>
<p>虽然，没有本质的血缘，却依然美好。后来，我就长大，后来，姥姥变老。现在，我还是依然会在回家的时候陪姥姥，听她的声音。</p>
<p>我真的很幸运，你们还在陪我。</p>
<p>可是，有时候，我在想，人应该对生命和死亡有一种信仰，要么相信轮回，要么相信永生，亦或是灵魂的洗涤。这样，当这一切来的时候，不会那么悲伤。我会选择一种仪式，来为这些祭奠。</p>
<p>大地之灯里爷爷给卡桑说的那句话，一直在某个地方盘旋。</p>
<p>“所以，卡桑，你要记住，”在某个天色昏黄的牧归之后，爷爷就这样对她说起，“我们的肉体永远都只不过是一朵莲花，它会毁灭。但是我们的灵魂是永存的。卡桑，你一定要有善美的灵魂。这样，你的灵魂才能在佛的抚度之下，获得永生。” 我们要有最朴素的生活，与最遥远的梦想。 即使明日天寒地冻，路远马亡。</p>
<p>这些生老病死，像是无法改变的春夏秋冬，在漫长的日子里，同我们寂静的对峙。我们，只能是同它们一样寂静。</p>
<p>当逝去了，我就相信轮回。</p>
<p>谨以此，纪念逝去的人。</p>
<h2 id="简桢"><a href="#简桢" class="headerlink" title="简桢"></a>简桢</h2><blockquote>
<p>收藏于 2009-10-17</p>
</blockquote>
<p>1、像每一滴酒回不了最初的葡萄，我回不了年少。是了，那段年岁里最大的主题是爱。渴求美善的爱，却不懂得去彼此守护；总在拥抱同时互使出个性的剑芒、在赞美时责备、倾诉时要求、携手时任性分道，分道之后又企盼回盟，却苦苦忍住不回眸，忍着，二年，忍着，三年，忍到傅钟敲响骊音，浪淘尽路断梦断，各自成为对方生命史册里的风流人物，便罢．　 ——＜水问＞序2、深情即是一桩悲剧 必得以死来句读。</p>
<p>3、此去，此去经年，千山万水，永不相离，生老病死，永不相弃。而是不是今日的下弦曾是十五的月圆？是不是眼前的沧海曾是无际的桑田？是不是来自于生的终归于死，痴守于爱的终将成恨？是不是春到芳菲春将淡，情到深处情转薄？　 ——＜水问＞</p>
<p>4、他是得了又失去的人，还是从来未得到,寻找分内的人？<br>若他得过完好的却失散了了,有什么比无尽的飘泊更能保存那一份完好呢？<br>若他未得，有什么比无尽的流浪更能印证一无所有的清白呢？ ——＜喝眼前的酒＞</p>
<p>5、如果，子夜想歌，有什么比叹息更畅怀？<br>子夜想醉，有什么比忘川之水更能断愁？ ——＜一口闲钟＞</p>
<p>6、有些滋味，哪怕小到风怎样爬梳发丝，雨怎样沁润龟裂的嘴唇，都必须等到相当的年岁之后，才能玩味其中的深奥.如此说来，当时的经验相对于往后的记忆，就显得粗糙了；当刻信以为真的悲欢与哀乐，经过沉之后再回想，恐怕会变得恍惚.犹如一只蝶穿壁飞过，也许留下美丽的图像，也许遗下一股淡香——那是振翅之时无意间漏出的花粉.也许什么也没有，因为忘记曾经有一蝶飞过眼前. ——＜姜母茶＞</p>
<p>7、等待令人老吗？<br>还是曾经过于绚烂的年华在抵挡不住一些风霜雨露之后，所有的华采都灭了，她仍旧回到年华之前那一个素朴的女身，只是回不去当初了无鸿爪的雪地。譬如水吧，无论何等惊涛怒浪的行旅，水还是水，但源起时的清澈，在阳光之下泛出温暖的白烟，如今染了尘意，且冷得毫无血色了。</p>
<p>这就是老的理由吧！ —— ＜隔夜＞</p>
<p>8、我们总是把旺盛的青春留给别人，以至于相逢之时一切都已太晚。我们既然无力改变生命的渠道，又何必惆怅春水滔滔东流。 ——＜晚茶＞</p>
<p>9、我在悲伤里抽丝剥茧，纺织快乐；她将快乐的锦衣剪裁，分给悲伤的人。　荣华或清苦，都像第一遍茶，切记倒掉。而浓茶转淡，饮到路断梦断，自然回甘。 ——＜女侍＞</p>
<p>10、让世界拥有它的脚步，让我保有我的茧。当溃烂已极的心灵再不想做一丝一毫的思索时，就让我静静回到我的茧内，以回忆为睡榻，以悲哀为覆被，这是我唯一的美丽。<br>如果，有醒不了的梦，我一定去做； 　</p>
<p>如果，有走不完的路，我一定去走；</p>
<p>如果，有变不了的爱，我一定去求．<br>让懂的人懂，让不懂的人不懂；让世界是世界，我甘心是我的茧。 ——＜美丽的茧＞</p>
<p>11、认识你愈久，愈觉得你是我人生行路中一处清喜的水泽<br>　　几次想忘于世，总在山穷水尽处又悄然相见，算来即是一种不舍<br>　　 ——《四月裂帛》</p>
<p>12、旦夕之间，情知对于生命的千般流转，尽须付与无尽的忍爱<br>　　深情即是一桩悲剧 必得以死来句读<br>　　你真是一个令人欢喜的人，你的杯不应该为我而空<br>　　 ——《四月裂帛》</p>
<p>13、且让我们以一夜的苦茗<br>　　诉说半生的沧桑<br>　　我们都是执著而无悔的一群，<br>　　以飘零作归宿<br>　　在你年轻而微弱的生命时辰里，我记载这一卷诘屈聱牙的经文，希望有朝一日，你为我讲解。<br>　　 ——《四月裂帛》</p>
<p>14、或许行年渐晚，深知在劳碌的世间，能完整实践理想中的美，愈来愈不可得，触目所见多是无法拼凑完全的碎片。再要苦苦怨忿世间不提供，徒然跟自己倒戈而已。想开了，反而有一份随兴的心情，走到哪里，赏到哪里。不问从何而来，不贪求更多，也不思索第一次相逢是否最后一次相别。<br>　　 ——《落葵》</p>
<p>15、秋天把旧叶子揉掉了，你要听新故事吗。静静的河水睁着眼睛，笑着说：总有回家的人，总有离岸的船<br>　 　——《浮舟》</p>
<p>16、誓言用来拴骚动的心，终就拴住了虚空。山林不向四季起誓，荣枯随缘；海洋不需对沙岸承诺，遇合尽兴 。<br>　　连语言都应该舍弃，你我之间，只有干干净净的缄默，与存在。<br>　　 ——《海誓》</p>
<p>17、时光，重叠在一棵树上。<br>　　旧枝叶团团如盖，新条从其上引申。时光在树上写史，上古的颜色才读毕，忽然看到当代<br>　　旧与新，往昔与现在，并不是敌对状态，它们在时光行程中互相辨认，以美为最后依归<br>　　 —— 《眼中人》</p>
<p>18、当我无法安慰你，或你不再关怀我，请千万记住，在我们菲薄的流年， 曾有十二只白鹭鸶飞过秋天的湖泊<br>　　 ——《四月裂帛》</p>
<p>19、死真的只是天地间的一次远游吗？紧闭的眼，冰凉的手，耷拉成“八”字的眉头。那是怎样孤单而荒凉的远游？漆黑的夜，无尽的路，一个人飘飘荡荡地走。就这样告别了吧，连行囊也来不及整理，至亲的人，也吝啬得不打一声招呼。就这样远去了吧，连回程的时间也不肯讲，此行的方向，也拒绝透露。无论如何，请你满饮我在月光下为你斟的这杯新醅的酒。此去是春、是夏、是秋、是冬，是风、是雪、是雨、是雾，是东、是南、是西、是北，是昼、是夜、是晨、是暮，全仗它为你暖身、驱寒、认路、分担人世间久积的辛酸。　　<br>你只需在路上踩出一些印迹，好让我来寻你时，不会走岔。 ——《渔父》</p>
<p>20、我们对记忆了解多少？自己的、他人的，以及自己与他人之间相互增删、蓄意霸占或秘密窥伺的记忆内容。我相信那是终年叆叇的云梦大泽，看起来像风景明信片般简单明了，当你试图跨越，却发现渺茫无边，而你贫穷得连半截浮木都没有。那么，我们终日在嘴边不断复述、宣扬的那套记忆，可能是基于自我防卫而自动删改、润饰过的，像风和日丽的景致，就算有瑕疵，也是小风小雨。我们躲在里面过日子，假装很幸福，久了，也变成真的．<br>　我想最擅长抽丝剥茧的人也没办法给人生一个结论吧！遇合之人、离散之事，同时是因也同时是果；人在其间走走停停，做个认真的旅行者罢了。把此地收获的好种子携至彼地播植，再把彼地的好阳光剪几尺带在身边，要是走到天昏地暗的城镇，把那亮光舍了出去，如此而已。<br>　　我知道离日出的时间还很遥远，但这世间总有一次日出是为我而跃升的吧，为了不愿错过，这雪夜再怎么冷，我也必须现在就起程。” ——《雪夜，无尽的阅读》</p>
<p>21、行路不难， 难在于应对进退而不失其中正 ；难在于婉转人际而犹有自己的字里行间；难在于往前铸足之时，还能回头自我眉批；难在于路断途穷之际， 犹能端庄句点 ，朝天一跃 另起一行 …… 行路颇难． ——《行书》</p>
<p>22、我们唯一遗憾是无法聚膝，然而这也不算，灵魂遥远才叫人饮憾。现实若圆满无缺，人的光华无从显现，现实的缺口不是用来灭绝人，它给出一个机会，看看人能攀越多高，奔赴多远，坚韧多久？它试探着能否从兽的野性挣脱为人，从人的禁锢蜕变出来，接近了神． ——《梦游书》</p>
<p>23、我逐渐明了，其实人世的生灭故事早已蕴涵在大自然的荣枯里，默默地对人们展示这一切，预告生生不息，也提挈流水落花。人必须穷尽一生之精神才能彻悟，但对这草原上每一棵草而言，春萌秋萎，即具足一生。人没有理由夸示自己生命的长度，人不如一株草，无所求地萌发，无所怨侮地凋萎，吮吸一抹草该吮吸的水分与阳光，占一株草该占的土地，尽它该尽的责任，而后化泥，成全明年春天将萌生的草芽。</p>
<p>——《一株行走的草》<br>24、浮世若不扰攘，恩恩怨怨就荡不开了。然而江湖终究是一场华丽泡影，生灭荣枯转眼即为他人遗忘。中岁以後的领悟：知音就是熠熠星空中那看不见的牧神，知音往往只是自己。<br>　　遗憾像什么？像身上一颗小小的痣，只有自己才知道位置及浮现的过程。<br>　　人的一生大多以缺憾为主轴，在时光中延展、牵连而形成乱麻。常常，我们愈渴慕、企求之人事，愈不可得。年轻时，我们自以为有大气力与本领搜罗奇花异卉，饱经风霜後才懂得舍，专心护持自己院子里的树种，至於花团锦簇、莺啼燕啭，那是别人花园里的事，不必过问。<br>　　我们已各自就位，在自己的天涯种植幸福；曾经失去的被找回，残破的获得补偿。时间，会一寸寸地把凡人的身躯烘成枯草色，但我们望向远方的眼睛内，那抹因梦想的力量而持续荡漾的烟波蓝将永远存在。</p>
<p>就这么望著吧，直到把浮世望成眼睫上的尘埃。 ——《烟波蓝》　</p>
<p>25、欣赏之所以可能，因为有了适当的距离，以及主客体分明。距离太近,失其全貌；过远，流于肌理模糊而主、客不能分，则容易泛滥私情，陷于自伤。我们能清楚明白地鉴赏一棵树，一座高峰，体贴其旧史、新页；我们能否以同等清楚明白鉴赏自己呢？能在自身之外拉出另一个自身，以此为主，以彼为客，隔一段距离，白发人看白发，眼中人说眼中事？<br>　　在时间的推移中，过去的永远过去，无法倒提回到人面桃花初相逢之时；可是在人的记忆中，过去的风韵或余伤，却常常回澜拍岸，使现在成为过去风韵或余伤的延长，更行更远还生。对生命有一完整的拥抱后，看旧事或新物，都能宽容大量，给它们应得的位置与意义，它若是美事，看得出从这事儿的芽眼又抽出什么样的枝子；它若是伤心事，也看到有一条嫩枝从阴天出发伸到晴天里来了．</p>
<p>——《眼中人》<br>26、人世间，本是处处有情，只怕己心太无情，便不知情为何物？</p>
<p>——《踏一回月》</p>
<p>27、总有一些淡馨的东西，随着生活的潮涨不知不觉地遗落于我孤单的沙岸，像一篇呆板的公文里突然冒出的美丽句子，那样令人惊讶，令人有浅浅的喜悦。任凭是潮来潮往的日夕，任是漩不止的漩涡，我仍旧要坚持着去珍惜这些意外，一点一滴地收藏。当有一天，当我年老得只咀嚼得动回忆，我会欣喜于自己一直保有着的这一瓢清浅——一瓢有着珍珠色泽的清清浅浅，我会满足地死去。</p>
<p>——《一瓢清浅》</p>
<p>28、生命可以有不同的姿态，但同样是航行于真理之海。万物各有其迷人的韵律，而终究是以不同的方式在演算一道相同的定理，每张证明的纸上，都写着同一的答案：一个最初，及一个最后的座标点，都是线段。<br>　　只不过有人两三笔便推出了结果，而有人硬是不肯歇止，希望算成射线。</p>
<p>——《神秘的雕刻家》</p>
<p>29、我一直认为叶子是树的语言：松木善于针砭，相思则一树的梦句，爱自言自语。那么，我说这古树的薄叶乃哲人语，简而深。其实，生命到了这种程度，说什么都是多余，所以更多时候，树是无言。</p>
<p>——《野蔓之誓》</p>
<p>30、每个人都有一双心灵的眼，如果它们紧闭着，我再怎么描述都是徒然；如果它们已大大地张开，不用我说，便早已醉了。 ——《壁画》</p>
<p>31、誓言用来拴骚动的心，终就拴住了虚空。山林不向四季起誓，荣枯随缘；海洋不需对沙岸承诺，遇合尽兴。偏爱盟誓的恋人，有了第一回，又要第二回。所有的誓言都在口述传说中的乐园，世间本是忽然聚合之一瞬，聚是一个字，遇合了当下便是“聚”义；散亦一字，分别了当下便是“散”义。我不吃誓言鸦片，故不问聚后何时散，散后何时聚，该聚自然会聚，该散放心一散。<br>连语言都应该舍弃，你我之间，只有干干净净的缄默，与存在。 ——《海誓》</p>
<p>32、诉得出的苦其实不是苦，诉不出的苦，方是真苦。云的倾诉，向来谁也不懂，大地不爱做考据。<br>生命的历程中，其实也有雨季。所有的豪情壮志都在一刹那间被打湿了，像湿了翅膀的鹰，沮丧地凝望阴霾的天空，想要振奋，却挣不断细细密密的网丝，想要展翅，却甩不掉羽翼上凝聚的重露。乌云至少还有大地可泄漏，不管懂不懂，泄完了，雨季也就过去了。而无处可诉的苦，日积月累地便在内心形成阴沉的气候，形成没有阳光的一方天空。最悲哀的是，明明心里延续着梅雨，脸上却必须堆积着虚伪的晴朗。生命之中，总难免有这样的季节。</p>
<p>大自然总是无时无刻不在教我认识世界，传授给我力量新生的秘诀。天下没有永远阴霾的天空，只要让生命的太阳自内心升起。我感受到日出的惊喜．</p>
<p>——《问候天》<br>33、时间证明了世间无情，可是，人为何又一代一代地将多情托付在不可托付的情事上？为之痛不欲生，为之哀哀欲绝！<br>如果，人世是一出永不谢幕的悲剧，那是因为每个人都知其不可而为，把多情勇敢地托付了出去。<br>　　人并非不知道江山易改的道理，也熟读沧海桑田的故事；然而，面对繁华似锦的世间，忍不住要去争取、去唱和，人仍然有一丝憧憬，以为江山已改了千万次，不会恰恰好在我身上改动，沧海已换了千万回面目，怎会恰恰好在我身上变成桑田？<br>人完全浸润在自己的多情里，以至于认为其多情可以更改亘古不变的律则，人信任了自己的多情，忽略时间正在无情地冷眼相看。 ——《带酒江月》</p>
<p>34、我还是愿意固执地相信爱情的存在，相信那些美好的存在，和相信春暖花开一样的相信。<br>　　人生应该是酿一壶美酒，和续情的人曲水流殇。只要我们愿意直面落崖惊风，便可认领天下。<br>倘若上苍失手，只留了张单人床给你，那就见招拆招，将床搬至窗口，一个人以安静的姿态，微笑地看递嬗的人事，看缤纷的落英，看铺陈在远方的旖旎风景。 ——《女子便是好》</p>
<p>35、文学如同溪涧，允许不同姿势的流览与品位。好寻思的人，临流自伤，说人生也是不可眉批的东逝水。自诩清高的人，水清濯缨，水浊濯足，一向自在。至于率然天真的人，俯身溪岸，一咕噜一咕噜地畅饮，把自己喝成一条支流。　　　　　　　　　　　　　　　　　　　　　　　　　　——《伏流》</p>
<p>36、一滴泪掉入江河里，才会懂淡而不化的心情！　　　　　　　　　　　　　——《冲淡》</p>
<h2 id="非常想念"><a href="#非常想念" class="headerlink" title="非常想念"></a>非常想念</h2><blockquote>
<p>收藏于 2009-10-21</p>
</blockquote>
<p>A B C D E F G H I J K L M N P Q R S T V W X Z 上面有23个字母，意思是I miss you. 可以理解吗。</p>
<h2 id="眼睛涩掉"><a href="#眼睛涩掉" class="headerlink" title="眼睛涩掉"></a>眼睛涩掉</h2><blockquote>
<p>收藏于 2009-10-19</p>
</blockquote>
<p>今天，很不舒服，眼睛涩死，左眼一直流泪，止都止不住，结果是肿了—一个眼。安</p>
<h2 id="百度空间-我在这里患过伤风"><a href="#百度空间-我在这里患过伤风" class="headerlink" title="百度空间,我在这里患过伤风"></a>百度空间,我在这里患过伤风</h2><blockquote>
<p>收藏于 2009-10-24</p>
</blockquote>
<p>关于百度空间 刚开始来百度空间是因为它的模版，模版N多，这确是一个值得鄙视的理由，于是抛弃了网易</p>
<p>细数一下有过的空间，当然首先是QQ空间，可怜腾讯是被钱迷住了。其实QQ就不适合写文章，适合转载，转来转去，最后无聊的死去。</p>
<p>然后就是新浪和网易博客，这两个是名人的天下，实在受不了。</p>
<p>然后就是MSN了，QQ横行的年代里，MSN是高品质的存在。</p>
<p>然后就是豆瓣，豆瓣绝对是个好网站，在豆瓣主要是看别人的旅行故事。加了两个小组，一个人旅行和没钱也去旅行，人很多，也很活跃，他们的故事让我倾慕不已，经常有的活动就是素不相识的人同去一个地方旅行，然后约定在某个咖啡馆见面……</p>
<p>百度空间，其实人很多，可是给人的感觉就是很安静，如若QQ是大厅，这里就是后花园。其实只想说一句话：百度空间，很好。</p>
<p>用了两年又一个月的P4原装耳机终于坏掉，我用它听过了我两个春夏秋冬……</p>
<p>在所有人事已非的景色里，在所有不被想起的快乐里，我最喜欢你，我在这个角落患了伤风……</p>
<p>另外，非常想念T和k</p>
<h2 id="九月九，今又重阳-我在这里祝我生日快乐"><a href="#九月九，今又重阳-我在这里祝我生日快乐" class="headerlink" title="九月九，今又重阳 我在这里祝我生日快乐"></a>九月九，今又重阳 我在这里祝我生日快乐</h2><blockquote>
<p>收藏于 2009-10-26</p>
</blockquote>
<p>九月九，今又重阳 今天是重阳节，收到移动的彩信，说是重阳快乐，我极其郁闷，为什么是重阳快乐，移动其实应该明天给我发个生日快乐。</p>
<p>昨晚老妈发来短信问我用不用后天给我做好吃的给我送过来，我说不用。恩，在暮色四合之时的日子里，老妈总是想着我，谢谢。</p>
<p>明天九月初十，十月二十七号。T之前说十九年生日一个轮回，九零年来的孩子们，今年阴阳历重合，确实值得纪念。过了明天，就十九周岁了，就是After 19……</p>
<p>送上短信一条:if A is 1 B is 2 C is 3 … then: L+O+V+E&#x3D;54而F+R+I+E+N+D+S+H+I+P&#x3D;108所以友谊是爱情的二倍,好好珍惜身边的朋友,转发给想交一辈子的朋友啊!别独享。</p>
<h2 id="关于昆仑的第七个故事"><a href="#关于昆仑的第七个故事" class="headerlink" title="关于昆仑的第七个故事"></a>关于昆仑的第七个故事</h2><blockquote>
<p>收藏于 2009-10-31</p>
</blockquote>
<p>0.又想起关于昆仑个地七个故事，而第七个故事是个爱情故事，完了。</p>
<p>1.昨天一天都是阴阴的感觉，在晚上就下起了雨，有雾气陪着它一起，就是一副很好的画面了。</p>
<p>2.我走在路上，脚下踩着的是大片的落叶，因为下了雨，没有那种脆脆的响声，安静的。又因为是黑夜，路上是昏黄的灯光，很有感觉。 而这样的雨，这样的雾，我很喜欢。</p>
<p>3.我想起海子的那首诗，叫做：尼采，你让我想起悲伤的热带。 又想起关于昆仑个地七个故事，而第七个故事是个爱情故事，完了。</p>
<p>4.甲流来到长治，我的第一个感觉是，原来长治和世界也是接轨的。因为隔壁班的有四十个请假，所以放假了。</p>
<p>5.早上六点起来，和老妈一起去外面逛，昨晚虽然下了雨，可是却没有很冷。早上去了新建的乒羽活动中心，其实是原来的游泳池改建的，那里很新，因为刚开业。</p>
<p>6.早上又去打羽毛球，是又啊，上一次打时去年的暑假，距今有很长时间了。结果是胳膊很疼，手腕没劲。</p>
<p>7.羽毛球完了之后，去吃heluo汤，吃的有点多了</p>
<h2 id="须臾"><a href="#须臾" class="headerlink" title="须臾"></a>须臾</h2><blockquote>
<p>收藏于 2009-11-08</p>
</blockquote>
<p>须臾，我很害怕一些东西</p>
<h2 id="简桢说四月裂帛，我说十月裂帛"><a href="#简桢说四月裂帛，我说十月裂帛" class="headerlink" title="简桢说四月裂帛，我说十月裂帛"></a>简桢说四月裂帛，我说十月裂帛</h2><blockquote>
<p>收藏于 2009-11-02</p>
</blockquote>
<p>——-1——</p>
<p>阳光把我晒懒了，也把我晒冷了。前时的夜雨，早就消了痕迹，只留几处深浅的水泽，映射这秋日的阳光。 昨晨在打球的时候，阳光陡然出现，就消褪了雨的冷魅。</p>
<p>秋风，秋雨揉掉了叶子，揉下了秋思，把夏暖揉向了秋冷。</p>
<p>前几日毕竟未到秋冷时，未有寒意深深，只是落落叶子，阳光依旧会温暖空气。而中午时分天气预报报告发布寒潮预警，晚时的预报明天温度零下一到六度。这回，我终于知道，秋冷了。</p>
<p>而晚上编好的短信，让大家窝里多添点草，发了几条就再也发不下去，那里不是早已寒意深深，就是暖意融融，这是多么可悲的事情。</p>
<p>——2——</p>
<p>今早依旧穿着前几日的薄衣出来散步，可是天气预报变准了，天凉了，就是嗖的一下就凉了。而我终于忍受不了突然的寒意，将手缩回口袋。</p>
<p>在楼于楼之间穿梭，因为是气暖，这里对送气又毫不吝啬，我就看见雾气环绕。且极易在下雪的的晚上，造出一种甚美的景致，终究还是太多了，忘了确切的数字。好几次，在下雪的夜里，在路边昏黄昏黄的灯光映衬下，和着雾气，行走，行走。</p>
<p>那样的夜，那样的时光，叫做炫烂。</p>
<p>我有好几次躺在雪里，却甚为温暖。而今，雪若来了，我必要再去寻。</p>
<p>早上在路上遇到T妈妈，之后又遇到K妈妈，确切来说是看到而非遇到。</p>
<p>中午电视里有了北京下雪的画面，我转向窗外，阳光灿烂，隔窗户看太阳，甚好。我躺在床上，没有拉住帘子，于是阳光扑天盖地而来，给我当了被子。</p>
<p>单眼皮是隔不住阳光的，闭住眼就透进了血红色，我竟然在想，双眼皮是不是一样能看见。在充满红色的世界，熏着了。</p>
<p>——3——</p>
<p>我向来疏于言表，疏于言表，一直都是。</p>
<p>前几日沈阳下雪，珉发信息汇报，这多少让我惊异，若秋不深，冬何来，雪又去哪里。雪的突访，我惊讶不已，我说还好还好，这里也会有雪，这回答多么自私。而其实，我想说很多。</p>
<p>下午去T空间，看到她关于下雪的那篇，留言说，你让我想起悲伤的亚热带，而后T说想家，我说想吧，这回答真弱智。而其实，我有很多话要说。</p>
<p>几次想将内心最柔软之处让你们触摸，却在按拨号键的下一刻按向刺眼的红色。我惊异于我的矛盾，惊异于最终什么也没说。那天我给我自己手机号发送短信，在无意识状态下发给了T,之后是我的愕然，惊讶。从那时，我才知道，原来朋友在我心中的地位如此厚重。而我一直包裹自己，不言于别人，这是多么可悲的事情。</p>
<p>而终于，我有太多话要说，却什么也没说。我向来疏于言表，一直都是。</p>
<p>——4——</p>
<p>简桢说：深情即是一场悲剧，必得以死来句读。不过，死就不必了。</p>
<p>之于前面所说佛之八苦，即生，老，病，死，爱别离，怨长久，求不得，放不下，也会有更深的理解。</p>
<p>细而想来，真只有死还未体会。之于田维给我最大的感动就是她直面死亡的温柔。而情之于深，我却不敢再解，我知道，最后解不开的还是自己。</p>
<p>我向来以为我的T不会陷入深情之中，因为她向来理性远大于感性，我没见过她会为哪件事冲动，但，终究逃不脱。</p>
<p>T，我只能说，有些事情在于我们内心的一些执念。你问我你变了没，我说变了，是必然的那种，而其实，我想说你没变，你一如我七年前见到的那个你一样，一样值得骄傲，只不过岁月让我们附丽，既而改变。</p>
<p>而其实，你是一个令人欢喜的人，你的杯，不该为任何人空。T，你不该嘲笑自己。而你的欲断未断，你的执念，都应该消散。你的悲伤，我体会，我很想安慰，可T，你知道，我向来疏于言表。我不知道如何帮你解决，可我知道有很多人都不想让你悲伤。有很多人看着你，只有一些人模糊了你。</p>
<p>我想安慰你，却无从说起。我想让你真正举重若轻，我想让你别付深情。旦夕之间，情知对于生命的千般流转，尽须付予无尽的忍爱。 我想让你不要悲伤。我想念，那个不悲伤的你。</p>
<p>十月的天空有如裂帛。</p>
<p>后记:十月的天空有如裂帛，十一月的怡衣也起了头。</p>
<p>蛰伏于月隙缝的一场雪，不过是一桌惨淡的盛宴。</p>
<p>雪落下的，是云的精魄。</p>
<p>在这精心营造的氛围里，一个人和冰冷的空气，缓缓的走。</p>
<p>带上蓝牙耳机，开始给不同的人打电话，听不同的心情。</p>
<p>所幸的是，耳朵也经的起寒冷。</p>
<p>中国真是大，有冰天雪地，也有桂香飘飘。 这实属中国的悲哀。</p>
<p>雪是来了，可惨淡的经不起经营。 身边，连朋友都不在。</p>
<p>看到小手拉大手，在暖黄色的灯光下，我竟然就很感动。</p>
<p>冰是睡着的水，雪是天的泪。</p>
<p>子夜想歌，可，有什么比叹息更畅怀。</p>
<p>安。</p>
]]></content>
  </entry>
  <entry>
    <title>禅道的集成注册</title>
    <url>/2021/01/04/%E7%A6%85%E9%81%93%E7%9A%84%E9%9B%86%E6%88%90%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<h4 id="禅道的集成注册"><a href="#禅道的集成注册" class="headerlink" title="禅道的集成注册"></a>禅道的集成注册</h4><blockquote>
<p>zentao其实我感觉,没必要前端把密码加密了啊,为什么会这么做呢?前端没事干嘛?</p>
<p>参考资料:<a href="https://www.jianshu.com/p/4f3fa26c8dc3?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/4f3fa26c8dc3?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">官方示例中提示需要解包两次json</span></span><br><span class="line"><span class="string">$result = file_get_contents(&#x27;http://pms.zentao.net/project-task-8.json&#x27;); </span></span><br><span class="line"><span class="string">$result = json_decode($result);</span></span><br><span class="line"><span class="string">if($result-&gt;status == &#x27;success&#x27; and md5($result-&gt;data) == $result-&gt;md5)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $data = json_decode($result-&gt;data);</span></span><br><span class="line"><span class="string">    print_r($data);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zentao</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, account, password</span>):</span><br><span class="line">        self.host = host</span><br><span class="line">        self.session_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.account = account</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">        self._get_session_id()</span><br><span class="line">        self.login()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_session_id</span>(<span class="params">self</span>):</span><br><span class="line">        api_path = <span class="string">&quot;/zentao/api-getsessionid.json&quot;</span></span><br><span class="line">        response = requests.get(self.host + api_path)</span><br><span class="line">        result = self._get_zentao_result(response.json())</span><br><span class="line">        self.session_id = result[<span class="string">&#x27;sessionID&#x27;</span>]</span><br><span class="line">        self.params[result[<span class="string">&#x27;sessionName&#x27;</span>]] = self.session_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        api_path = <span class="string">&#x27;/zentao/user-login.json&#x27;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;account&#x27;</span>: self.account,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: self.password,</span><br><span class="line">        &#125;</span><br><span class="line">        result = requests.post(self.host + api_path, data=data, params=self.params).json()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;success&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;zentao 登陆成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_zentao_result</span>(<span class="params">result</span>):</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;success&#x27;</span> <span class="keyword">and</span> md5(result[<span class="string">&#x27;data&#x27;</span>].encode()).hexdigest() == result[<span class="string">&#x27;md5&#x27;</span>]:</span><br><span class="line">            data = json.loads(result[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zentao_get</span>(<span class="params">self, api_path</span>):</span><br><span class="line">        response = requests.get(self.host + api_path, self.params)</span><br><span class="line">        <span class="comment"># print(response.content)</span></span><br><span class="line">        result = response.json()</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="keyword">return</span> self._get_zentao_result(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zentao_post</span>(<span class="params">self, api_path, data=<span class="literal">None</span>, json_data=<span class="literal">None</span></span>):</span><br><span class="line">        response = requests.post(self.host + api_path, data=data, json=json_data, params=self.params)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._get_zentao_result(response.json())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_dept_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取部门列表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        api_path = <span class="string">&quot;/zentao/dept-browse-.json&quot;</span></span><br><span class="line">        data = self.zentao_get(api_path)</span><br><span class="line">        <span class="keyword">return</span> data[<span class="string">&#x27;sons&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">self, account: <span class="built_in">str</span>, password: <span class="built_in">str</span>, realname: <span class="built_in">str</span>, deptid: <span class="built_in">int</span> = <span class="number">7</span>, email: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建用户</span></span><br><span class="line"><span class="string">        :param account: 账号</span></span><br><span class="line"><span class="string">        :param password: 密码</span></span><br><span class="line"><span class="string">        :param realname: 真实姓名</span></span><br><span class="line"><span class="string">        :param deptid: 部门编号</span></span><br><span class="line"><span class="string">        :param email: 邮箱</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        api_path = <span class="string">&quot;/zentao/user-create.json&quot;</span>.<span class="built_in">format</span>(deptid)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;dept&quot;</span>: deptid,</span><br><span class="line">            <span class="string">&quot;account&quot;</span>: account,</span><br><span class="line">            <span class="string">&quot;password1&quot;</span>: password,</span><br><span class="line">            <span class="string">&quot;password2&quot;</span>: password,</span><br><span class="line">            <span class="string">&quot;realname&quot;</span>: realname,</span><br><span class="line">            <span class="string">&quot;join&quot;</span>: <span class="built_in">str</span>(datetime.date.today()),</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;dev&quot;</span>,</span><br><span class="line">            <span class="string">&quot;group&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: email,</span><br><span class="line">            <span class="string">&quot;commiter&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;m&quot;</span>,</span><br><span class="line">            <span class="string">&quot;verifyPassword&quot;</span>: md5((md5(self.password.encode()).hexdigest() + self._get_verify_rand()).encode(</span><br><span class="line"></span><br><span class="line">            )).hexdigest(),</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(self.host + api_path, data=data, params=self.params)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            result = response.json()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_verify_rand</span>(<span class="params">self</span>):</span><br><span class="line">        path = <span class="string">&#x27;/zentao/user-create.html&#x27;</span></span><br><span class="line">        html = requests.get(self.host + path, params=self.params).text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        value = soup.select_one(<span class="string">&#x27;input#verifyRand&#x27;</span>).attrs[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    user-delete-[userid].json</span></span><br><span class="line"><span class="string">    verifyPassword: md5(md5(pass)+rand)</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># json_print(dept_browse())</span></span><br><span class="line">    <span class="comment"># print(get_verifyRand())</span></span><br><span class="line">    <span class="comment"># print(create_user(&quot;test2&quot;, &quot;testABC123&quot;, &quot;测试用户&quot;))</span></span><br><span class="line">    <span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">    zentao = Zentao(zentao_host, zentao_account, zentao_password)</span><br><span class="line">    <span class="built_in">print</span>(zentao.get_dept_list())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="其实-用Basic-Auth-直接跳登录的index-可以获取正确的zentaosid"><a href="#其实-用Basic-Auth-直接跳登录的index-可以获取正确的zentaosid" class="headerlink" title="其实,用Basic Auth 直接跳登录的index,可以获取正确的zentaosid"></a>其实,用Basic Auth 直接跳登录的index,可以获取正确的zentaosid</h5><h5 id="添加用户就没有办法了-两个字-太恶心了"><a href="#添加用户就没有办法了-两个字-太恶心了" class="headerlink" title="添加用户就没有办法了, 两个字,太恶心了"></a>添加用户就没有办法了, 两个字,太恶心了</h5><blockquote>
<p>接下来说添加用户的参数,发现每个版本基本都不一样,我用的12.3.3</p>
<p>用户密码加密,使用的password      md5加密 +  rand</p>
<p>管理员密码  md5加密 + rand  再来一层 md5  得到最后的值</p>
</blockquote>
<h4 id="最后怎么实现的呢"><a href="#最后怎么实现的呢" class="headerlink" title="最后怎么实现的呢"></a>最后怎么实现的呢</h4><blockquote>
<p>Jsoup 抓 verifyRand  </p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Mysql简单的定时任务</title>
    <url>/2021/01/04/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h4 id="简单的定时任务"><a href="#简单的定时任务" class="headerlink" title="简单的定时任务"></a>简单的定时任务</h4><blockquote>
<p>因为当时着急,没改逻辑 ,直接数据库定时修改值,优秀</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#x27;event_scheduler&#x27;     查看定时任务信息,如果是OFF,需要开启</span><br><span class="line">SET GLOBAL event_scheduler = ON;　      开启定时任务</span><br><span class="line"></span><br><span class="line">use gitea;</span><br><span class="line">delimiter</span><br><span class="line">create procedure set_1 ()</span><br><span class="line">begin</span><br><span class="line">UPDATE user SET must_change_password=0 ;</span><br><span class="line">end</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create event run_event</span><br><span class="line">on schedule every 10 second</span><br><span class="line">on completion preserve enable</span><br><span class="line">do call set_1 ();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>赚吧监控工具的开发</title>
    <url>/2020/05/30/%E8%B5%9A%E5%AE%A2%E5%90%A7%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="最近"><a href="#最近" class="headerlink" title="最近"></a>最近</h2><p>感觉好久没有写东西了,就觉得好久没有学习了一样</p>
<p>这段时间刚入职新公司,终于体会到了每天五点下班的感觉,一个月的开发任务简直就是上个公司的一个礼拜的任务</p>
<p>所以我就有时间学点其他东西了</p>
<blockquote>
<p>做了一个赚客吧新帖监控工具</p>
</blockquote>
<span id="more"></span>

<h2 id="最近学习的东西"><a href="#最近学习的东西" class="headerlink" title="最近学习的东西"></a>最近学习的东西</h2><ol>
<li>Python中的客户端编写</li>
<li>Electron</li>
<li>lowdb 本地json数据库,比sqllite还要轻</li>
<li>node-express   &#x2F;  forever 守护工具</li>
</ol>
<h2 id="python客户端"><a href="#python客户端" class="headerlink" title="python客户端"></a>python客户端</h2><blockquote>
<p>最开始使用pyqt5,后感觉太重,使用 kinter ,做了一个半成品的新帖监控后,使用Electron重写</p>
</blockquote>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/python123.jpg" alt="python版本"></p>
<h2 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h2><blockquote>
<p>改用Electron-vue之后,写这个项目让我对vue和node有了更清楚的认识,相当于理解了一些东西</p>
<p>研究promise,异步这种东西真是难受了半天,自己查文档也静不下心看,总是想快速达到自己的目的</p>
<p>感觉学到了很多,最后写的感觉, 还是写成了B&#x2F;S的感觉</p>
</blockquote>
<ol>
<li><strong><a href="https://api.uomg.com/">umog-API接口</a></strong></li>
<li><strong><a href="https://github.com/SevenOutman/vue-aplayer/blob/develop/docs/README.zh-CN.md">vue-player插件</a></strong></li>
<li><strong><a href="https://github.com/ravenq/markdown-it-vue">markdown-it-vue插件</a></strong></li>
<li><strong>后端使用node-express</strong></li>
<li><strong>本地JSON数据库</strong></li>
</ol>
<p><img src="https://gitee.com/Anke1938/image/raw/master/img/electron123.jpg"></p>
<h2 id="node-express"><a href="#node-express" class="headerlink" title="node-express"></a>node-express</h2><blockquote>
<p>使用这个是因为后台不想用java了,试试看node的感觉怎么样</p>
<p>最后的感觉就是,可能我没写对 ,老感觉乱乱的,但是启动速度是真的快</p>
<p>服务器用forever 管理  感觉挺稳定的  配合mongodb 用着很不错</p>
</blockquote>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
  </entry>
  <entry>
    <title>银联支付的一些记录</title>
    <url>/2022/03/23/%E9%93%B6%E8%81%94%E6%94%AF%E4%BB%98%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="在线网关支付-定义说明"><a href="#在线网关支付-定义说明" class="headerlink" title="在线网关支付  定义说明"></a>在线网关支付  定义说明</h3><blockquote>
<p>网关支付产品主要适用于持卡人在商户网站B2C购物支付场景，持卡人通过点击银联在线支付图标，并跳转银联页面完成支付信息录入，最终完成支付。</p>
<p>从PC端发起的交易为WEB网关支付交易，从移动端发起的交易为WAP网关支付交易。</p>
</blockquote>
<h3 id="接口列表"><a href="#接口列表" class="headerlink" title="接口列表"></a>接口列表</h3><ul>
<li>消费接口</li>
<li>消费撤销接口</li>
<li>退货接口</li>
<li>交易查询状态接口</li>
<li>银联加密公钥更新查询接口</li>
<li>预授权接口</li>
<li>预授权撤销</li>
<li>预授权完成</li>
<li>预授权完成撤销</li>
<li>文件传输接口（对账文件下载）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://open.unionpay.com/tjweb/acproduct/APIList?apiservId=448&amp;acpAPIId=754&amp;bussType=0</span><br></pre></td></tr></table></figure>
 <span id="more"></span>
<h3 id="银联支付"><a href="#银联支付" class="headerlink" title="银联支付"></a>银联支付</h3><h3 id="商户需要先提交-4个证书-存放到服务器"><a href="#商户需要先提交-4个证书-存放到服务器" class="headerlink" title="商户需要先提交 4个证书,存放到服务器"></a>商户需要先提交 4个证书,存放到服务器</h3><p>测试对应的交易记查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://open.unionpay.com/tjweb/user/mchTest/trans?mchntOrderId=&amp;priAcctNo=6216261000000000018&amp;startTs=&amp;endTs=</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="接入方式"><a href="#接入方式" class="headerlink" title="接入方式"></a>接入方式</h4><ul>
<li>SDK 接入, pom 直接导入依赖文件</li>
<li>fegin 微服务方式 使用</li>
<li>如果pod 有开端口 ,直接访问 ip:port   对应的接口(一般测试使用)</li>
</ul>
</li>
<li><h4 id="接口说明-测试-请求均为POST-请求"><a href="#接口说明-测试-请求均为POST-请求" class="headerlink" title="接口说明,测试      请求均为POST 请求"></a>接口说明,测试      请求均为POST 请求</h4><ul>
<li><p>支付   会返回html 页面数据   应用应直接跳转到html页面    接口返回的 html  含有转义字符  需要转义后使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/pay</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	//分配的商户id</span><br><span class="line">    &quot;merId&quot;:&quot;777290058193407&quot;,</span><br><span class="line">     //自定义订单号</span><br><span class="line">    &quot;orderId&quot;:&quot;12324124212222&quot;,  </span><br><span class="line">    //支付金额</span><br><span class="line">    &quot;amount&quot;:6688 // todo  后续改成分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>支付撤销    返回原始json 数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/unPay</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;merId&quot;:&quot;777290058193407&quot;,</span><br><span class="line">    &quot;orderId&quot;:&quot;972109221359280534008&quot;,  //流水号  </span><br><span class="line">    &quot;amount&quot;:222200    //分  必须全额</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退款</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/refund</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;merId&quot;:&quot;777290058193407&quot;,</span><br><span class="line">    &quot;orderId&quot;:&quot;972109221359280534008&quot;,  //流水号  </span><br><span class="line">    &quot;amount&quot;:222200    //分</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>交易查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/refund</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;orderId&quot;:&quot;123456789002&quot;,</span><br><span class="line">    &quot;txnTime&quot;:&quot;20210910105439&quot;,</span><br><span class="line">    &quot;merId&quot;:&quot;777290058193407&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预授权 返回html  直接跳转html 页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/preAuth</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;amount&quot;:&quot;888&quot;,  //分</span><br><span class="line">    &quot;merId&quot;:&quot;777290058193407&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预授权撤销</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/preAuthUndo</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;orderId&quot;:&quot;152109231133332675248&quot;,</span><br><span class="line">    &quot;amount&quot;:888,</span><br><span class="line">    &quot;merId&quot;:&quot;777290058193407&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预授权消费</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/preAuthFinish</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;orderId&quot;:&quot;&quot;,</span><br><span class="line">	&quot;amount&quot;:&quot;&quot;,</span><br><span class="line">	&quot;merId&quot;:&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预授权消费完成撤销退款</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/preAuthFinishUndo</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;orderId&quot;:&quot;&quot;,</span><br><span class="line">	&quot;amount&quot;:&quot;&quot;,</span><br><span class="line">	&quot;merId&quot;:&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新证书接口   不建议测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/updateCert</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;merId&quot;:&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取对账文件   测试账号不支持  500错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.213:57733/unionpay/gateway/getCheckFile</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;dateMMdd&quot;:&quot;0923&quot;,</span><br><span class="line">	&quot;merId&quot;:&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>阿里云香港服务器ss的坑</title>
    <url>/2018/06/13/%E9%98%BF%E9%87%8C%E4%BA%91%E9%A6%99%E6%B8%AF%E6%9C%8D%E5%8A%A1%E5%99%A8ss%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p><img src="/uploads/aliyunlogo.jpg" alt="avatar"></p>
<h4 id="ss需要python-环境"><a href="#ss需要python-环境" class="headerlink" title="ss需要python 环境"></a>ss需要python 环境</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip </span><br><span class="line"></span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h4 id="touch-一个json文件-存放读取配置"><a href="#touch-一个json文件-存放读取配置" class="headerlink" title="touch 一个json文件,存放读取配置"></a>touch 一个json文件,存放读取配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;server_port&quot;:8888,</span><br><span class="line">    </span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    </span><br><span class="line">    &quot;password&quot;:&quot;88888888&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    </span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ssserver -c /home/ss.json -d start</span><br></pre></td></tr></table></figure>

<h4 id="通过telnet-来测试ss-server是否正常开启"><a href="#通过telnet-来测试ss-server是否正常开启" class="headerlink" title="通过telnet 来测试ss-server是否正常开启"></a>通过telnet 来测试ss-server是否正常开启</h4><blockquote>
<p>telnet iphost port</p>
</blockquote>
<h5 id="如果没有正常开启-那么需要在防火墙中开放"><a href="#如果没有正常开启-那么需要在防火墙中开放" class="headerlink" title="如果没有正常开启,那么需要在防火墙中开放"></a>如果没有正常开启,那么需要在防火墙中开放</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 8388 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h1 id="坑来了"><a href="#坑来了" class="headerlink" title="坑来了"></a>坑来了</h1><ul>
<li><p>在阿里香港中,如果服务器是专有网络，&#x2F;etc&#x2F;ss.json 中的server ip 是私有ip,而非公网ip</p>
</li>
<li><p>&#x2F;etc&#x2F;ss.json中开放的端口需要 运行命令开放，iptables -A INPUT -p tcp –dport yourprot -j ACCEPT</p>
</li>
<li><p>服务器实例的安全组规则需要增加 自定义 TCP 在 相关端口（8388） 的访问 ,（允许所有ip访问，设置为0.0.0.0&#x2F;0）,不然只设置你需要的端口</p>
</li>
</ul>
]]></content>
      <categories>
        <category>操作记录</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>ss</tag>
        <tag>阿里云</tag>
        <tag>香港</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴对DTO,VO,POJO和其他的定义</title>
    <url>/2020/04/17/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%AF%B9DTO-VO-POJO%E5%92%8C%E5%85%B6%E4%BB%96%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h2 id="分层领域模型规约："><a href="#分层领域模型规约：" class="headerlink" title="分层领域模型规约："></a>分层领域模型规约：</h2><ul>
<li><strong>DO（ Data Object）</strong>：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li>
<li><strong>DTO（ Data Transfer Object）</strong>：数据传输对象，Service或Manager向外传输的对象。</li>
<li><strong>BO（ Business Object）</strong>：业务对象。 由Service层输出的封装业务逻辑的对象。</li>
<li><strong>AO（ Application Object）</strong>：应用对象。 在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>
<li><strong>VO（ View Object）</strong>：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li>
<li><strong>POJO（ Plain Ordinary Java Object）</strong>：在本手册中， POJO专指只有setter&#x2F;getter&#x2F;toString的简单类，包括DO&#x2F;DTO&#x2F;BO&#x2F;VO等。</li>
<li><strong>Query</strong>：数据查询对象，各层接收上层的查询请求。 注意超过2个参数的查询封装，禁止使用Map类来传输。</li>
</ul>
<h2 id="领域模型命名规约："><a href="#领域模型命名规约：" class="headerlink" title="领域模型命名规约："></a>领域模型命名规约：</h2><ul>
<li><strong>数据对象</strong>：xxxDO，xxx即为数据表名。</li>
<li><strong>数据传输对象</strong>：xxxDTO，xxx为业务领域相关的名称。</li>
<li><strong>展示对象</strong>：xxxVO，xxx一般为网页名称。</li>
<li><strong>POJO是DO&#x2F;DTO&#x2F;BO&#x2F;VO的统称，禁止命名成xxxPOJO</strong>。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>OAuth2的一些记录</title>
    <url>/2022/04/24/%E9%9D%A2%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h4 id="最近面是别人太频繁了-整理下资料"><a href="#最近面是别人太频繁了-整理下资料" class="headerlink" title="最近面是别人太频繁了,整理下资料"></a>最近面是别人太频繁了,整理下资料</h4><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><h3 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h3><ul>
<li><p>负责哪一块(详细)</p>
</li>
<li><p>用到的技术深入问一下</p>
</li>
<li><p>项目团队</p>
</li>
<li><p>使用到的工具们都有啥</p>
</li>
<li><p>使用什么管理代码,简单介绍下代码分支管理流程</p>
</li>
<li><p>项目运行在什么环境?linux?windows?虚拟化?</p>
</li>
<li><p>线上遇到过性能问题么?如何定位问题?如何优化?性能指标</p>
 <span id="more"></span>
<blockquote>
<p><strong><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/tips/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%AE%9A%E4%BD%8D%E5%B8%B8%E8%A7%81Java%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98.md">手把手教你定位常见 Java 性能问题</a></strong></p>
<p><strong>top 命令</strong></p>
<p><strong>vmstat 命令</strong></p>
<p><strong>jstack 命令</strong></p>
<p><strong>jstat 命令</strong></p>
<p><strong>jmap 命令</strong></p>
<p><strong>mat 内存工具</strong> </p>
<p><strong>JProfiler</strong></p>
<p><strong>Arthas</strong></p>
</blockquote>
</li>
</ul>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul>
<li><p><strong>java 中操作字符串都有哪些类,有什么区别</strong></p>
<blockquote>
<p>操作字符串的类有：String、StringBuffer、StringBuilder。</p>
<p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p>
<p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p>
</blockquote>
</li>
<li><p><strong>你重写过 <code>hashcode</code> 和 <code>equals</code>么，什么场景,为什么重写 <code>equals</code> 时必须重写 <code>hashCode</code> 方法？</strong></p>
<blockquote>
<p>hashCode()被设计是用来使得哈希容器能高效的工作。</p>
<p>如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。<strong>因此，equals 方法被覆盖过，则 <code>hashCode</code> 方法也必须被覆盖。</strong></p>
</blockquote>
</li>
<li><p><strong>用的什么JDK版本,有没有用到新特性</strong></p>
<blockquote>
<ul>
<li><p>JDK8  <a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247484744&idx=1&sn=9db31dca13d327678845054af75efb74&chksm=cea24a83f9d5c3956f4feb9956b068624ab2fdd6c4a75fe52d5df5dca356a016577301399548&token=1082669959&lang=zh_CN&scene=21#wechat_redirect">详情</a></p>
<ul>
<li><p>接口的默认方法(Default Methods for Interfaces)</p>
</li>
<li><p>Lambda表达式(Lambda expressions)</p>
</li>
<li><p>函数式接口(Functional Interfaces)</p>
</li>
<li><p>方法和构造函数引用(Method and Constructor References)</p>
</li>
<li><p>Lamda 表达式作用域(Lambda Scopes)</p>
</li>
<li><ul>
<li>访问局部变量</li>
<li>访问字段和静态变量</li>
<li>访问默认接口方法</li>
</ul>
</li>
<li><p>内置函数式接口(Built-in Functional Interfaces)</p>
</li>
<li><ul>
<li>Predicates</li>
<li>Functions</li>
<li>Suppliers</li>
<li>Consumers</li>
<li>Comparators</li>
</ul>
</li>
<li><p>Optionals</p>
</li>
<li><p>Streams(流)</p>
</li>
<li><ul>
<li>Filter(过滤)</li>
<li>Sorted(排序)</li>
<li>Map(映射)</li>
<li>Match(匹配)</li>
<li>Count(计数)</li>
<li>Reduce(规约)</li>
</ul>
</li>
<li><p>Parallel Streams(并行流)</p>
</li>
<li><ul>
<li>Sequential Sort(串行排序)</li>
<li>Parallel Sort(并行排序)</li>
</ul>
</li>
<li><p>Maps</p>
</li>
<li><p>Data API(日期相关API)</p>
</li>
<li><ul>
<li>Clock</li>
<li>Timezones(时区)</li>
<li>LocalTime(本地时间)</li>
<li>LocalDate(本地日期)</li>
<li>LocalDateTime(本地日期时间)</li>
</ul>
</li>
<li><p>Annotations(注解)</p>
</li>
</ul>
</li>
<li><p>JDK9-17</p>
<ul>
<li>接口里可以添加私有接口(9)</li>
<li>匿名内部类也支持钻石（diamond）运算符(9)</li>
<li>增强的 <code>try-with-resources</code>(9)</li>
<li>局部变量的自动类型推断（var）(10)</li>
<li>Lambda 中的自动类型推断（var）(11)</li>
<li>更简洁的 switch 语法(12)</li>
<li>instanceof + 类型强转一步到位(12)</li>
<li>文本块（Text Block）的支持(13)</li>
<li>新增的 record 类型，干掉复杂的 POJO 类(14)</li>
<li>更直观的 NullPointerException 提示(14)</li>
<li>封闭（Sealed ）类(15)</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p><strong>深拷贝 vs 浅拷贝</strong></p>
<blockquote>
<ol>
<li><strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</li>
<li><strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</li>
</ol>
<p><a href="https://camo.githubusercontent.com/2ba88f5f00d8f37b58c303929a0cb97bc9925189287ad741ec74338c867ee14e/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d372f6a6176612d646565702d616e642d7368616c6c6f772d636f70792e6a7067"><img src="https://up.sowevo.com/img/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d372f6a6176612d646565702d616e642d7368616c6c6f772d636f70792e6a7067.jpeg" alt="deep and shallow copy"></a></p>
</blockquote>
</li>
</ul>
<h4 id="集合-HashMap-1-8"><a href="#集合-HashMap-1-8" class="headerlink" title="集合(HashMap,1.8)"></a>集合(HashMap,1.8)</h4><ul>
<li><p>Map,Set,List的常见实现</p>
<blockquote>
<p>Collection</p>
<ul>
<li>List:有序,可重复<ul>
<li>ArrayList:   线程不安全,有序,可重复,查询性能高于LinkedList,下标维护顺序</li>
<li>LinkedList: 线程不安全,有序,可重复,修改性能高于1,链表维护顺序</li>
<li>Vector:        线程安全,有序,可重复</li>
</ul>
</li>
<li>Set:<ul>
<li>HashSet:             线程不安全,不可重复,无序,基于hashMap</li>
<li>LinkedHashSet: 线程不安全,不可重复,插入顺序,基于LinkedHashMap</li>
<li>TreeSet:              线程不安全,不可重复,自然顺序,基于TreeMap</li>
</ul>
</li>
<li>Map<ul>
<li>HashMap:非线程安全,无序,基于Hash表+链表,1.8以后加入了红黑树</li>
<li>TreeMap:非线程安全,自然顺序,基于红黑树</li>
<li>LinkedHashMap:非线程安全,插入顺序,使用链表维护顺序</li>
<li><del>HashTable</del>:线程安全,不能有null的键或值</li>
<li>ConcurrentHashMap:线程安全,1.8以前是通过分段锁实现线程安全,1.8以后改用cas算法实现线程安全</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p><strong>ArrayList 和 LinkedList 的区别是什么？</strong></p>
<blockquote>
<p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p>
</blockquote>
</li>
<li><p><strong>HashMap的实现方式,1.8的变化</strong></p>
<blockquote>
<ul>
<li><p>1.8前:数组+链表</p>
<p><img src="https://up.sowevo.com/img/20201222235956.webp" alt="img"></p>
<ul>
<li>初始化一个数组,默认容量16,增长因子0.75</li>
<li>Put方法<ol start="0">
<li>根据key获得索引位置 i</li>
<li>如果数组[i]&#x3D;&#x3D;null,直接新建节点添加,如果table[i]不为空,下一步；</li>
<li>判断数组[i]的首个元素是否和key一样,如果相同直接覆盖,否则下一步,这里的相同指的是hashCode以及equals,</li>
<li>遍历数组[i]的链表,如果存在相同,覆盖,如果没有相同,则进行链表的插入</li>
<li>扩容检测,是否要扩容<ul>
<li>数组占用达到了0.75</li>
<li>new 新的数组大小X2</li>
<li>老数组的数据重新计算放入新数组</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>1.8:引入了红黑树,整体结构:数组+链表+红黑树</p>
<p><img src="https://up.sowevo.com/img/20201223135117.jpeg" alt="img"></p>
<ul>
<li>当一次插入前,判断一个链表的长度是否大于8,大于8转换为红黑树</li>
</ul>
</li>
<li><p>1.8之后的put流程</p>
<p><img src="https://up.sowevo.com/img/20201223002533.png" alt="img"></p>
</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><ul>
<li><p><strong>创建线程的方式</strong></p>
<blockquote>
<ul>
<li><p>通过实现 Runnable 接口,重写run()方法,调用start()执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.err.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CountRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountRunnable</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>继承Thread,重写run()方法,调用start()执行,本质上Thread也实现了Runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.err.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">CountThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountThread</span>();</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现Callable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;FutureTask&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">callable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">FutureTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">            list.add(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (FutureTask task : list) &#123;</span><br><span class="line">            System.err.println(task.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
</li>
<li><p><strong>ThreadLocal 是什么？有哪些使用场景？</strong></p>
<blockquote>
<p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p>
</blockquote>
</li>
<li><p><strong>ThreadLocal 的实现原理</strong></p>
<blockquote>
<p><img src="https://up.sowevo.com/img/1460000022351516.png" alt="图片来自网络"></p>
<p>每一个Thread中保存一个ThreadLocalMap,key为当前ThreadLocal对象,ThreadLocal调用get(),set()时,先拿到当前线程的ThreadLocalMap,然后进行get(),set()</p>
</blockquote>
</li>
</ul>
<h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><ul>
<li><p>锁的分类方式</p>
<blockquote>
<ul>
<li><p>重入锁&#x2F;不可重入锁</p>
<ul>
<li>重入锁:当前线程可以重复获取锁</li>
<li>不可重入锁:当前线程已经获取了锁,如果接下来再次获取锁,就会获取不到,会造成死锁</li>
</ul>
</li>
<li><p>读写锁</p>
</li>
<li><p>将锁分为读与写两把</p>
<ul>
<li>读-读能共存</li>
<li>读-写不能共存</li>
<li>写-写不能共存</li>
</ul>
</li>
<li><p>悲观锁、乐观锁</p>
<ul>
<li>悲观锁:认为数据每次都会被修改,用之前先加锁<ul>
<li>常用的加锁操作synchonized等</li>
</ul>
</li>
<li>乐观锁:认为数据每次都不会被修改,更新时进行比较,没有变化才能写入<ul>
<li>乐观锁没有锁</li>
<li>CAS的实现</li>
<li>版本号的实现</li>
</ul>
</li>
</ul>
</li>
<li><p>公平锁&#x2F;非公平锁</p>
<ul>
<li>公平锁:按照申请的顺序获得资源,过去直接排队</li>
<li>非公平锁:线程先去直接尝试获取资源,获取不到再去排队</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="数据库-Mysql"><a href="#数据库-Mysql" class="headerlink" title="数据库(Mysql)"></a>数据库(Mysql)</h4><ul>
<li><p><strong>有哪些常见的关系型数据库呢？</strong></p>
<blockquote>
<p>MySQL、PostgreSQL、Oracle、SQL Server、SQLite …</p>
</blockquote>
</li>
<li><p><strong>MyISAM 和 InnoDB 的区别</strong></p>
<blockquote>
<ul>
<li>InnoDB:<ul>
<li>支持事务处理</li>
<li>支持外键</li>
<li>支持崩溃修复能力和并发控制</li>
<li>支持聚集索引,主键和数据在一起存储</li>
</ul>
</li>
<li>MyISAM<ul>
<li>不支持事务</li>
<li>不支持外键</li>
<li>不支持聚集索引</li>
<li>索引和数据分开存储</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p><strong>数据库的三范式是什么</strong></p>
<blockquote>
<ul>
<li>1NF：属性不可再分。</li>
<li>2NF：1NF 的基础之上，消除了非主属性对于码的部分函数依赖。</li>
<li>3NF：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。</li>
</ul>
</blockquote>
</li>
<li><p><strong>说一下 ACID 是什么</strong></p>
<blockquote>
<ol>
<li><strong>原子性</strong>（<code>Atomicity</code>） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>
<li><strong>一致性</strong>（<code>Consistency</code>）： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li>
<li><strong>隔离性</strong>（<code>Isolation</code>）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li>
<li><strong>持久性</strong>（<code>Durability</code>）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>
</ol>
</blockquote>
</li>
<li><p><strong>如何做 mysql 的性能优化？</strong></p>
<blockquote>
<ul>
<li>为搜索字段创建索引。</li>
<li>避免使用 select *，列出需要查询的字段。</li>
<li>垂直分割分表。</li>
<li>选择正确的存储引擎。</li>
<li>使用EXPLAIN分析sql</li>
<li>避免使用mysql的函数</li>
<li>当只要一行数据时使用 LIMIT 1</li>
<li>在 Join 表的时候使用相当类型的例，并将其索引</li>
</ul>
</blockquote>
</li>
<li><p><strong>Mysql索引的类型</strong></p>
<blockquote>
<ul>
<li><p>普通索引</p>
<ul>
<li>普通索引:最基本的索引，它没有任何限制。</li>
<li>组合索引:指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合</li>
<li>唯一索引:与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li>
</ul>
</li>
<li><p>主键索引</p>
<p>就是表的主键</p>
</li>
<li><p>全文索引</p>
<p>主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。</p>
</li>
</ul>
</blockquote>
</li>
<li><p><strong>主键与普通唯一索引的区别</strong></p>
<blockquote>
<ul>
<li>主键会自动创建唯一索引</li>
<li>主键可以作为外键,唯一索引不可以</li>
<li>主键默认not null,每个表只能有一个</li>
<li>主键和唯一索引都可以是多个字段的组合</li>
</ul>
</blockquote>
</li>
<li><p><strong>索引失效的情况</strong></p>
<blockquote>
<ul>
<li>当语句使用or的时候,or的所有条件都要有索引,否则会失效。</li>
<li>当语句索引like带%在左边时候索引失效</li>
<li>索引与查询语句中类型不一致</li>
<li>如果mysql估计使用全表扫描要比使用索引快</li>
<li>联合索引顺序不对的情况</li>
<li>对索引进行计算操作(数学计算,函数计算等)</li>
<li>查询使用了  不等于  not in</li>
</ul>
</blockquote>
</li>
<li><p><strong>索引的注意事项</strong></p>
<blockquote>
<ul>
<li>索引键的大小不能超过900个字节,当超过900个字节时会报错</li>
<li>对于内容基本重复的列，比如只有1和0，禁止建立索引</li>
<li>当一个索引有多个列构成时，应将选择性强的列放在前面。</li>
<li>索引会影响插入修改性能,索引不是越多越好</li>
</ul>
</blockquote>
</li>
<li><p><strong>B tree与B+Tree</strong></p>
<blockquote>
<ul>
<li><ul>
<li>B Tree<ol>
<li>所有键值分布在整棵树中</li>
<li>搜索可能在非叶子节点结束</li>
<li>所有叶子节点都在同一层</li>
<li>数据分布在整棵树中</li>
</ol>
</li>
</ul>
<p><img src="https://up.sowevo.com/img/20201230153826.png" alt="索引"></p>
</li>
<li><p>B+Tree</p>
<ol>
<li>B+Tree是对B Tree的一种优化</li>
<li>非叶子节点存储key,叶子节点存储key和value</li>
<li>每个节点可以存储多的节点信息,降低树的高度</li>
<li>叶子节点之间相互连接,便于范围查询</li>
</ol>
<p><img src="https://up.sowevo.com/img/20201230153959.png" alt="索引"></p>
</li>
<li><p>区别</p>
<ul>
<li>数据的存储方式不同,B+ Tree存储在叶子节点,B Tree存储在整个树中</li>
<li>非叶子节点中可以存储更多的信息</li>
<li>叶子节点之间相互连接,便于范围查询</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p><strong>聚簇索引 &amp; 非聚簇索引</strong></p>
<blockquote>
<p>聚集索引与非聚集索引的区别是：叶节点是否存放一整行记录</p>
<p>InnoDB 主键使用的是聚簇索引,MyISAM 不管是主键索引，还是二级索引使用的都是非聚簇索引</p>
<ul>
<li>聚簇索引的优点<ol>
<li>范围查询的时候性能比非聚集索引高</li>
<li>查询速度比非聚集索引高</li>
<li>覆盖索引可以直接用节点上的值</li>
</ol>
</li>
<li>聚簇索引的缺点<ol>
<li>主键生成无序会导致插入性能问题,一页放不下了,变成两页</li>
<li>更新主键会导致性能问题,数据从这一页移动到另一页</li>
<li>普通索引非覆盖的情况下进行查询,会造成回表,<strong>第一次找到主键值,第二次根据主键值找到行数据</strong></li>
<li>整体插入性能下降:判断主键唯一时要查更多的数据</li>
</ol>
</li>
</ul>
</blockquote>
</li>
<li><p><strong>啥是回表</strong></p>
<blockquote>
<p>普通索引进行查询时没有获取到所需要的所有字段,需要根据id再查一遍的情况</p>
<p>解决方法:使用覆盖索引,要查询的字段建立成组合索引</p>
</blockquote>
</li>
<li><p><strong>事务隔离级别有哪些?</strong></p>
<blockquote>
<p>SQL 标准定义了四个隔离级别：</p>
<ul>
<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>
<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>
<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>
<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>READ-UNCOMMITTED</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>READ-COMMITTED</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>REPEATABLE-READ</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
</blockquote>
</li>
</ul>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul>
<li><p>linux常用命令</p>
<blockquote>
<ul>
<li><p><strong><code>mkdir 目录名称</code>：</strong> 增加目录。</p>
</li>
<li><p>**<code>ls/ll</code>**（ll 是 ls -l 的别名，ll 命令可以看到该目录下的所有目录和文件的详细信息）：查看目录信息。</p>
</li>
<li><p><strong><code>find 目录 参数</code>：</strong> 寻找目录（查）。示例：① 列出当前目录及子目录下所有文件和文件夹: <code>find .</code>；② 在<code>/home</code>目录下查找以.txt 结尾的文件名:<code>find /home -name &quot;*.txt&quot;</code> ,忽略大小写: <code>find /home -iname &quot;*.txt&quot;</code> ；③ 当前目录及子目录下查找所有以.txt 和.pdf 结尾的文件:<code>find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \)</code>或<code>find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</code>。</p>
</li>
<li><p><strong><code>mv 目录名称 新目录名称</code>：</strong> 修改目录的名称（改）。注意：mv 的语法不仅可以对目录进行重命名而且也可以对各种文件，压缩包等进行 重命名的操作。mv 命令用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。后面会介绍到 mv 命令的另一个用法。</p>
</li>
<li><p><strong><code>mv 目录名称 目录的新位置</code>：</strong> 移动目录的位置—剪切（改）。注意：mv 语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作。另外 mv 与 cp 的结果不同，mv 好像文件“搬家”，文件个数并未增加。而 cp 对文件进行复制，文件个数增加了。</p>
</li>
<li><p><strong><code>cp -r 目录名称 目录拷贝的目标位置</code>：</strong> 拷贝目录（改），-r 代表递归拷贝 。注意：cp 命令不仅可以拷贝目录还可以拷贝文件，压缩包等，拷贝文件和压缩包时不 用写-r 递归。</p>
</li>
<li><p><strong><code>rm [-rf] 目录</code> :</strong> 删除目录（删）。注意：rm 不仅可以删除目录，也可以删除其他文件或压缩包，为了增强大家的记忆， 无论删除任何目录或文件，都直接使用<code>rm -rf</code> 目录&#x2F;文件&#x2F;压缩包。</p>
</li>
<li><p><strong><code>touch 文件名称</code>:</strong> 文件的创建（增）。</p>
</li>
<li><p><strong><code>cat/more/less/tail 文件名称</code></strong> ：文件的查看（查） 。命令 <code>tail -f 文件</code> 可以对某个文件进行动态监控，例如 tomcat 的日志文件， 会随着程序的运行，日志会变化，可以使用 <code>tail -f catalina-2016-11-11.log</code> 监控 文 件的变化 。</p>
</li>
<li><p><strong><code>vim 文件</code>：</strong> 修改文件的内容（改）。vim 编辑器是 Linux 中的强大组件，是 vi 编辑器的加强版，vim 编辑器的命令和快捷方式有很多，但此处不一一阐述，大家也无需研究的很透彻，使用 vim 编辑修改文件的方式基本会使用就可以了。在实际开发中，使用 vim 编辑器主要作用就是修改配置文件，下面是一般步骤： <code>vim 文件------&gt;进入文件-----&gt;命令模式------&gt;按i进入编辑模式-----&gt;编辑文件 -------&gt;按Esc进入底行模式-----&gt;输入：wq/q!</code> （输入 wq 代表写入内容并退出，即保存；输入 q!代表强制退出不保存）。</p>
</li>
<li><p><strong><code>rm -rf 文件</code>：</strong> 删除文件（删）。</p>
</li>
<li><p><strong><code>pwd</code>：</strong> 显示当前所在位置</p>
</li>
<li><p><code>sudo + 其他命令</code>：以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。</p>
</li>
<li><p><strong><code>grep 要搜索的字符串 要搜索的文件 --color</code>：</strong> 搜索命令，–color 代表高亮显示</p>
</li>
<li><p><strong><code>ps -ef</code>&#x2F;<code>ps -aux</code>：</strong> 这两个命令都是查看当前系统正在运行进程，两者的区别是展示格式不同。如果想要查看特定的进程可以使用这样的格式：**<code>ps aux|grep redis</code>** （查看包括 redis 字符串的进程），也可使用 <code>pgrep redis -a</code>。</p>
<p>注意：如果直接用 ps（（Process Status））命令，会显示所有进程的状态，通常结合 grep 命令查看某进程的状态。</p>
</li>
<li><p><strong><code>kill -9 进程的pid</code>：</strong> 杀死进程（-9 表示强制终止。）</p>
</li>
<li><p><strong>net-tools 和 iproute2 ：</strong> <code>net-tools</code>起源于 BSD 的 TCP&#x2F;IP 工具箱，后来成为老版本 LinuxLinux 中配置网络功能的工具。但自 2001 年起，Linux 社区已经对其停止维护。同时，一些 Linux 发行版比如 Arch Linux 和 CentOS&#x2F;RHEL 7 则已经完全抛弃了 net-tools，只支持<code>iproute2</code>。linux ip 命令类似于 ifconfig，但功能更强大，旨在替代它。更多详情请阅读<a href="https://linoxide.com/linux-command/use-ip-command-linux">如何在 Linux 中使用 IP 命令和示例</a></p>
</li>
<li><p><strong><code>shutdown</code>：</strong> <code>shutdown -h now</code>： 指定现在立即关机；<code>shutdown +5 &quot;System will shutdown after 5 minutes&quot;</code>：指定 5 分钟后关机，同时送出警告信息给登入用户。</p>
</li>
<li><p><strong><code>reboot</code>：</strong> <strong><code>reboot</code>：</strong> 重开机。**<code>reboot -w</code>：** 做个重开机的模拟（只有纪录并不会真的重开机）。</p>
</li>
<li><p><strong>网络通信命令：</strong></p>
<ul>
<li>查看当前系统的网卡信息：ifconfig</li>
<li>查看与某台机器的连接情况：ping</li>
<li>查看当前系统的端口使用：netstat -an</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>端口被占用了怎么办</p>
<blockquote>
<p>找到端口的pid <code>netstat -an |grep 端口</code></p>
<p>kill -9 pid</p>
</blockquote>
</li>
<li><p>如何动态滚动查看日志</p>
<blockquote>
<p>cat&#x2F;more&#x2F;less&#x2F;tail 文件名称</p>
</blockquote>
</li>
<li><p>打包文件,上传下载文件</p>
<blockquote>
<p>打包 <code>tar -zcvf 打包压缩后的文件名 要打包压缩的文件</code></p>
<p>解压 <code>tar [-xvf] 压缩文件</code></p>
<p>上传下载 <code>scp</code>,各种工具</p>
</blockquote>
</li>
</ul>
<h4 id="缓存-Redis"><a href="#缓存-Redis" class="headerlink" title="缓存(Redis)"></a>缓存(Redis)</h4><ul>
<li><p>简单介绍一下 Redis 呗,项目中用它干了什么</p>
<blockquote>
<p>简单来说 <strong>Redis 就是一个使用 C 语言开发的数据库</strong>，不过与传统数据库不同的是 <strong>Redis 的数据是存在内存中的</strong> ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。</p>
<p>另外，<strong>Redis 除了做缓存之外，也经常用来做分布式锁，甚至是消息队列。</strong></p>
<p><strong>Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。</strong></p>
</blockquote>
</li>
<li><p><strong>redis 支持的数据类型有哪些？,有什么特点</strong></p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">简介</th>
<th align="left">特性</th>
<th align="left">场景</th>
</tr>
</thead>
<tbody><tr>
<td align="left">String(字符串)</td>
<td align="left">二进制安全</td>
<td align="left">可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">Hash(字典)</td>
<td align="left">键值对集合,即编程语言中的Map类型</td>
<td align="left">适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td>
<td align="left">存储、读取、修改用户属性</td>
</tr>
<tr>
<td align="left">List(列表)</td>
<td align="left">链表(双向链表)</td>
<td align="left">增删快,提供了操作某一段元素的API</td>
<td align="left">1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td>
</tr>
<tr>
<td align="left">Set(集合)</td>
<td align="left">哈希表实现,元素不重复</td>
<td align="left">1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td>
<td align="left">1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td>
</tr>
<tr>
<td align="left">Sorted Set(有序集合)</td>
<td align="left">将Set中的元素增加一个权重参数score,元素按score有序排列</td>
<td align="left">数据插入集合时,已经进行天然排序</td>
<td align="left">1、排行榜 2、带权重的消息队列</td>
</tr>
</tbody></table>
</li>
<li><p>缓存雪崩、击穿、穿透</p>
<blockquote>
<ul>
<li>雪崩<ul>
<li>大量缓存同时到期</li>
<li>解决:超时时间采用随机数</li>
</ul>
</li>
<li>击穿<ul>
<li>查询一个不存在的id,缓存中没有,查数据库,数据库也没</li>
<li>一般是被大量恶意调用</li>
<li>参数有效性校验,重复参数校验,用户权限校验,让运维拉黑他的ip</li>
</ul>
</li>
<li>穿透<ul>
<li>某热点缓存,请求量巨大,失效的一瞬间大量请求到达db导致系统崩溃</li>
<li>热点数据不过期</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
  </entry>
</search>
